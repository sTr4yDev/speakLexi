# FRONTEND COMPLETO - SpeakLexi
# Total archivos: 167
# Generado: 2025-10-29 18:49:59


================================================================================
# ARCHIVO: front-end/app/admin/dashboard/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/dashboard/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { AdminStats } from "@/components/admin/admin-stats"
import { RecentLessons } from "@/components/admin/recent-lessons"
import { MediaLibraryPreview } from "@/components/admin/media-library-preview"
import { QuickAdminActions } from "@/components/admin/quick-admin-actions"

export default function AdminDashboardPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Panel de Administración</h1>
          <p className="mt-1 text-muted-foreground">Gestiona el contenido de la plataforma</p>
        </div>

        <div className="grid gap-6 lg:grid-cols-3">
          <div className="space-y-6 lg:col-span-2">
            <AdminStats />
            <RecentLessons />
          </div>

          <div className="space-y-6">
            <QuickAdminActions />
            <MediaLibraryPreview />
          </div>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/admin/lecciones/[id]/editar/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/lecciones/[id]/editar/page.tsx
================================================================================

"use client"

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ArrowLeft, Save, Loader2, CheckCircle } from "lucide-react"
import Link from "next/link"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { leccionesAPI, type Leccion } from "@/lib/api"
import { toast } from "sonner"

export default function EditLessonPage({ params }: { params: { id: string } }) {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [leccion, setLeccion] = useState<Leccion | null>(null)

  useEffect(() => {
    cargarLeccion()
  }, [params.id])

  const cargarLeccion = async () => {
    try {
      setLoading(true)
      const response = await leccionesAPI.obtener(parseInt(params.id), true, true)
      setLeccion(response.leccion)
    } catch (error: any) {
      console.error("Error al cargar lección:", error)
      toast.error(error.message || "Error al cargar lección")
      router.push("/admin/lecciones")
    } finally {
      setLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!leccion) return

    try {
      setSaving(true)
      
      const datosActualizados = {
        titulo: leccion.titulo,
        descripcion: leccion.descripcion,
        nivel: leccion.nivel,
        idioma: leccion.idioma,
        categoria: leccion.categoria,
        duracion_estimada: leccion.duracion_estimada,
        puntos_xp: leccion.puntos_xp,
        estado: leccion.estado
      }
      
      await leccionesAPI.actualizar(parseInt(params.id), datosActualizados)
      
      toast.success("Lección actualizada exitosamente")
      router.push("/admin/lecciones")
      
    } catch (error: any) {
      console.error("Error al actualizar:", error)
      toast.error(error.message || "Error al actualizar lección")
    } finally {
      setSaving(false)
    }
  }

  const handlePublicar = async () => {
    if (!leccion) return

    try {
      await leccionesAPI.publicar(parseInt(params.id))
      toast.success("Lección publicada exitosamente")
      cargarLeccion() // Recargar para actualizar estado
    } catch (error: any) {
      console.error("Error al publicar:", error)
      toast.error(error.message || "Error al publicar lección")
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
        <DashboardHeader />
        <main className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        </main>
      </div>
    )
  }

  if (!leccion) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
        <DashboardHeader />
        <main className="container mx-auto px-4 py-8">
          <div className="text-center py-12">
            <p className="text-muted-foreground">Lección no encontrada</p>
            <Link href="/admin/lecciones">
              <Button variant="outline" className="mt-4">
                Volver a lecciones
              </Button>
            </Link>
          </div>
        </main>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-6 flex items-center justify-between">
          <Link href="/admin/lecciones">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Volver a Lecciones
            </Button>
          </Link>
          
          {leccion.estado === 'borrador' && (
            <Button variant="outline" onClick={handlePublicar}>
              <CheckCircle className="mr-2 h-4 w-4" />
              Publicar Lección
            </Button>
          )}
        </div>

        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Editar Lección</h1>
          <p className="mt-1 text-muted-foreground">Modifica los detalles de la lección #{params.id}</p>
        </div>

        <form onSubmit={handleSubmit}>
          <Card className="mx-auto max-w-3xl">
            <CardHeader>
              <CardTitle>Información de la Lección</CardTitle>
              <CardDescription>Actualiza los campos que desees modificar</CardDescription>
            </CardHeader>

            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="title">Título de la Lección</Label>
                <Input 
                  id="title" 
                  value={leccion.titulo}
                  onChange={(e) => setLeccion({...leccion, titulo: e.target.value})}
                  required
                />
              </div>

              <div className="grid gap-4 sm:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="nivel">Nivel</Label>
                  <Select 
                    value={leccion.nivel}
                    onValueChange={(value: any) => setLeccion({...leccion, nivel: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="principiante">Principiante</SelectItem>
                      <SelectItem value="intermedio">Intermedio</SelectItem>
                      <SelectItem value="avanzado">Avanzado</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="idioma">Idioma</Label>
                  <Select 
                    value={leccion.idioma}
                    onValueChange={(value) => setLeccion({...leccion, idioma: value})}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ingles">Inglés</SelectItem>
                      <SelectItem value="espanol">Español</SelectItem>
                      <SelectItem value="frances">Francés</SelectItem>
                      <SelectItem value="aleman">Alemán</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="categoria">Categoría</Label>
                <Input 
                  id="categoria" 
                  value={leccion.categoria || ''}
                  onChange={(e) => setLeccion({...leccion, categoria: e.target.value})}
                  placeholder="vocabulario, gramatica, pronunciacion, etc."
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Descripción</Label>
                <Textarea
                  id="description"
                  value={leccion.descripcion}
                  onChange={(e) => setLeccion({...leccion, descripcion: e.target.value})}
                  rows={4}
                  required
                />
              </div>

              <div className="grid gap-4 sm:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="duration">Duración (minutos)</Label>
                  <Input 
                    id="duration" 
                    type="number" 
                    value={leccion.duracion_estimada}
                    onChange={(e) => setLeccion({...leccion, duracion_estimada: parseInt(e.target.value)})}
                    required
                    min="1"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="xp">XP Otorgados</Label>
                  <Input 
                    id="xp" 
                    type="number" 
                    value={leccion.puntos_xp}
                    onChange={(e) => setLeccion({...leccion, puntos_xp: parseInt(e.target.value)})}
                    required
                    min="0"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="status">Estado</Label>
                <Select 
                  value={leccion.estado}
                  onValueChange={(value: any) => setLeccion({...leccion, estado: value})}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="borrador">Borrador</SelectItem>
                    <SelectItem value="publicada">Publicada</SelectItem>
                    <SelectItem value="archivada">Archivada</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex gap-3">
                <Button type="submit" className="flex-1" disabled={saving}>
                  {saving ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Guardar Cambios
                    </>
                  )}
                </Button>
                <Button variant="outline" asChild>
                  <Link href="/admin/lecciones">Cancelar</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </form>

        {/* Sección de actividades */}
        {leccion.actividades && leccion.actividades.length > 0 && (
          <Card className="mx-auto max-w-3xl mt-6">
            <CardHeader>
              <CardTitle>Actividades ({leccion.actividades.length})</CardTitle>
              <CardDescription>Actividades asociadas a esta lección</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {leccion.actividades.map((actividad, index) => (
                  <div 
                    key={actividad.id} 
                    className="p-3 border rounded-lg flex items-center justify-between"
                  >
                    <div>
                      <p className="font-medium">
                        {index + 1}. {actividad.pregunta}
                      </p>
                      <p className="text-sm text-muted-foreground">
                        Tipo: {actividad.tipo} • {actividad.puntos} puntos
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/admin/lecciones/crear/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/lecciones/crear/page.tsx
================================================================================

"use client"

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { CreateLessonForm } from "@/components/admin/create-lesson-form"
import { ArrowLeft } from "lucide-react"
import { Button } from "@/components/ui/button"
import Link from "next/link"

export default function CreateLessonPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <Link href="/admin/lecciones">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Volver a Lecciones
            </Button>
          </Link>
        </div>

        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Crear Nueva Lección</h1>
          <p className="mt-1 text-muted-foreground">Completa los pasos para crear una lección</p>
        </div>

        <CreateLessonForm />
      </main>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/admin/lecciones/loading.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/lecciones/loading.tsx
================================================================================

export default function Loading() {
  return null
}



================================================================================
# ARCHIVO: front-end/app/admin/lecciones/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/lecciones/page.tsx
================================================================================

"use client"

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Search, Plus, Edit, Eye, Trash2, Loader2, BookOpen, Award, Clock } from "lucide-react"
import Link from "next/link"
import { useState, useEffect } from "react"
import { toast } from "sonner"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"

interface Curso {
  id: number
  nombre: string
  nivel: string
  codigo: string
}

interface Leccion {
  id: number
  curso_id?: number
  titulo: string
  descripcion: string
  nivel: string
  idioma: string
  categoria?: string
  duracion_estimada: number
  puntos_xp: number
  estado: string
  orden?: number
  // Datos del curso si está incluido
  curso?: Curso
}

export default function AdminLessonsPage() {
  const [lessons, setLessons] = useState<Leccion[]>([])
  const [cursos, setCursos] = useState<Curso[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState("")
  const [filtros, setFiltros] = useState({
    curso_id: "",
    nivel: "",
    estado: "",
    categoria: ""
  })

  useEffect(() => {
    cargarCursos()
    cargarLecciones()
  }, [filtros])

  const cargarCursos = async () => {
    try {
      const response = await fetch('/api/cursos?activos=true', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      })
      
      if (!response.ok) throw new Error('Error al cargar cursos')
      
      const data = await response.json()
      setCursos(data.cursos || [])
    } catch (error) {
      console.error('Error:', error)
    }
  }

  const cargarLecciones = async () => {
    try {
      setLoading(true)
      
      // Construir query params
      const params = new URLSearchParams()
      if (searchTerm) params.append('buscar', searchTerm)
      if (filtros.curso_id) params.append('curso_id', filtros.curso_id)
      if (filtros.nivel) params.append('nivel', filtros.nivel)
      if (filtros.estado) params.append('estado', filtros.estado)
      if (filtros.categoria) params.append('categoria', filtros.categoria)
      
      const response = await fetch(`/api/lecciones?${params.toString()}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      })
      
      if (!response.ok) throw new Error('Error al cargar lecciones')
      
      const data = await response.json()
      setLessons(data.lecciones || [])
    } catch (error: any) {
      console.error("Error al cargar lecciones:", error)
      toast.error(error.message || "Error al cargar lecciones")
    } finally {
      setLoading(false)
    }
  }

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    cargarLecciones()
  }

  const handleDelete = async (id: number, titulo: string) => {
    if (!confirm(`¿Estás seguro de archivar la lección "${titulo}"?`)) {
      return
    }

    try {
      const response = await fetch(`/api/lecciones/${id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      })

      if (!response.ok) throw new Error('Error al eliminar')

      toast.success("Lección archivada exitosamente")
      cargarLecciones()
    } catch (error: any) {
      console.error("Error al eliminar:", error)
      toast.error(error.message || "Error al archivar lección")
    }
  }

  const getEstadoBadge = (estado: string) => {
    const variants: Record<string, any> = {
      publicada: "default",
      borrador: "secondary",
      archivada: "outline"
    }
    
    const labels: Record<string, string> = {
      publicada: "✅ Publicada",
      borrador: "📝 Borrador",
      archivada: "📦 Archivada"
    }
    
    return (
      <Badge variant={variants[estado] || "secondary"}>
        {labels[estado] || estado}
      </Badge>
    )
  }

  const getNivelColor = (nivel: string) => {
    const colors: Record<string, string> = {
      principiante: "text-green-600 bg-green-50",
      intermedio: "text-blue-600 bg-blue-50",
      avanzado: "text-purple-600 bg-purple-50"
    }
    return colors[nivel] || "text-gray-600 bg-gray-50"
  }

  // Agrupar lecciones por curso
  const leccionesPorCurso = lessons.reduce((acc, leccion) => {
    const cursoId = leccion.curso_id || 0
    if (!acc[cursoId]) {
      acc[cursoId] = []
    }
    acc[cursoId].push(leccion)
    return acc
  }, {} as Record<number, Leccion[]>)

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">📚 Gestión de Lecciones</h1>
            <p className="mt-1 text-muted-foreground">
              {loading ? "Cargando..." : `${lessons.length} lecciones encontradas`}
            </p>
          </div>
          <Link href="/admin/lecciones/crear">
            <Button size="lg">
              <Plus className="mr-2 h-4 w-4" />
              Crear Nueva Lección
            </Button>
          </Link>
        </div>

        {/* Filtros */}
        <Card className="mb-6 p-6">
          <form onSubmit={handleSearch} className="space-y-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
              <Input 
                placeholder="Buscar lecciones por título o descripción..." 
                className="pl-10"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            <div className="grid gap-4 sm:grid-cols-4">
              <Select
                value={filtros.curso_id}
                onValueChange={(value) => setFiltros({...filtros, curso_id: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Todos los cursos" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Todos los cursos</SelectItem>
                  {cursos.map((curso) => (
                    <SelectItem key={curso.id} value={curso.id.toString()}>
                      {curso.codigo} - {curso.nombre}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select
                value={filtros.nivel}
                onValueChange={(value) => setFiltros({...filtros, nivel: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Todos los niveles" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Todos los niveles</SelectItem>
                  <SelectItem value="principiante">Principiante</SelectItem>
                  <SelectItem value="intermedio">Intermedio</SelectItem>
                  <SelectItem value="avanzado">Avanzado</SelectItem>
                </SelectContent>
              </Select>

              <Select
                value={filtros.estado}
                onValueChange={(value) => setFiltros({...filtros, estado: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Todos los estados" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Todos los estados</SelectItem>
                  <SelectItem value="publicada">Publicada</SelectItem>
                  <SelectItem value="borrador">Borrador</SelectItem>
                  <SelectItem value="archivada">Archivada</SelectItem>
                </SelectContent>
              </Select>

              <Select
                value={filtros.categoria}
                onValueChange={(value) => setFiltros({...filtros, categoria: value})}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Todas las categorías" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">Todas las categorías</SelectItem>
                  <SelectItem value="vocabulario">📚 Vocabulario</SelectItem>
                  <SelectItem value="gramatica">📖 Gramática</SelectItem>
                  <SelectItem value="pronunciacion">🗣️ Pronunciación</SelectItem>
                  <SelectItem value="conversacion">💬 Conversación</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </form>
        </Card>

        {/* Lista de lecciones */}
        {loading ? (
          <Card className="p-12">
            <div className="flex items-center justify-center">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
            </div>
          </Card>
        ) : lessons.length === 0 ? (
          <Card className="p-12">
            <div className="text-center text-muted-foreground">
              <BookOpen className="mx-auto mb-4 h-12 w-12 opacity-50" />
              <p className="mb-2 text-lg font-semibold">No se encontraron lecciones</p>
              <p className="mb-4">Comienza creando tu primera lección</p>
              <Link href="/admin/lecciones/crear">
                <Button>
                  <Plus className="mr-2 h-4 w-4" />
                  Crear Primera Lección
                </Button>
              </Link>
            </div>
          </Card>
        ) : (
          <div className="space-y-6">
            {/* Mostrar lecciones agrupadas por curso */}
            {Object.entries(leccionesPorCurso).map(([cursoId, leccionesCurso]) => {
              const curso = cursos.find(c => c.id === parseInt(cursoId)) || null
              
              return (
                <Card key={cursoId} className="overflow-hidden">
                  <div className="border-b bg-muted/50 p-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h2 className="text-xl font-bold">
                          {curso ? (
                            <>
                              🎓 {curso.codigo} - {curso.nombre}
                              <Badge variant="outline" className="ml-2">
                                {curso.nivel}
                              </Badge>
                            </>
                          ) : (
                            '📋 Sin curso asignado'
                          )}
                        </h2>
                        <p className="text-sm text-muted-foreground">
                          {leccionesCurso.length} {leccionesCurso.length === 1 ? 'lección' : 'lecciones'}
                        </p>
                      </div>
                      {curso && (
                        <Link href={`/admin/cursos/${curso.id}`}>
                          <Button variant="outline" size="sm">
                            Ver Curso
                          </Button>
                        </Link>
                      )}
                    </div>
                  </div>

                  <div className="p-6">
                    <div className="space-y-3">
                      {leccionesCurso
                        .sort((a, b) => (a.orden || 0) - (b.orden || 0))
                        .map((lesson) => (
                        <div
                          key={lesson.id}
                          className="group rounded-xl border-2 border-border bg-card p-4 transition-all hover:border-primary/50 hover:shadow-md"
                        >
                          <div className="flex items-start justify-between gap-4">
                            <div className="flex-1">
                              <div className="mb-2 flex items-center gap-2">
                                <span className="text-muted-foreground">#{lesson.orden || '?'}</span>
                                <h3 className="font-semibold">{lesson.titulo}</h3>
                                {getEstadoBadge(lesson.estado || 'borrador')}
                              </div>
                              
                              <p className="mb-3 text-sm text-muted-foreground line-clamp-2">
                                {lesson.descripcion}
                              </p>
                              
                              <div className="flex flex-wrap items-center gap-3 text-sm">
                                <Badge className={getNivelColor(lesson.nivel)}>
                                  {lesson.nivel}
                                </Badge>
                                
                                {lesson.categoria && (
                                  <Badge variant="outline">
                                    {lesson.categoria}
                                  </Badge>
                                )}
                                
                                <div className="flex items-center gap-1 text-muted-foreground">
                                  <Clock className="h-3 w-3" />
                                  <span>{lesson.duracion_estimada} min</span>
                                </div>
                                
                                <div className="flex items-center gap-1 text-muted-foreground">
                                  <Award className="h-3 w-3" />
                                  <span>{lesson.puntos_xp} XP</span>
                                </div>
                              </div>
                            </div>

                            <div className="flex gap-2 opacity-0 transition-opacity group-hover:opacity-100">
                              <Link href={`/lecciones/${lesson.id}`}>
                                <Button variant="ghost" size="icon" title="Vista previa">
                                  <Eye className="h-4 w-4" />
                                </Button>
                              </Link>
                              <Link href={`/admin/lecciones/${lesson.id}/editar`}>
                                <Button variant="ghost" size="icon" title="Editar">
                                  <Edit className="h-4 w-4" />
                                </Button>
                              </Link>
                              <Button 
                                variant="ghost" 
                                size="icon" 
                                title="Archivar"
                                onClick={() => handleDelete(lesson.id, lesson.titulo)}
                              >
                                <Trash2 className="h-4 w-4 text-destructive" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </Card>
              )
            })}
          </div>
        )}
      </main>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/admin/usuarios/[id]/editar/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/usuarios/[id]/editar/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ArrowLeft } from "lucide-react"
import Link from "next/link"

export default function EditUserPage({ params }: { params: { id: string } }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8 max-w-3xl">
        <Button variant="ghost" className="mb-6" asChild>
          <Link href="/admin/usuarios">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Volver a Usuarios
          </Link>
        </Button>

        <Card>
          <CardHeader>
            <CardTitle>Editar Usuario</CardTitle>
            <CardDescription>Modifica la información del usuario</CardDescription>
          </CardHeader>
          <CardContent>
            <form className="space-y-6">
              <div className="grid gap-4 md:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="name">Nombre Completo</Label>
                  <Input id="name" defaultValue="Juan Pérez" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Correo Electrónico</Label>
                  <Input id="email" type="email" defaultValue="juan@example.com" />
                </div>
              </div>

              <div className="grid gap-4 md:grid-cols-2">
                <div className="space-y-2">
                  <Label htmlFor="role">Rol</Label>
                  <Select defaultValue="estudiante">
                    <SelectTrigger id="role">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="estudiante">Estudiante</SelectItem>
                      <SelectItem value="profesor">Profesor</SelectItem>
                      <SelectItem value="admin">Administrador</SelectItem>
                      <SelectItem value="mantenimiento">Mantenimiento</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Estado</Label>
                  <Select defaultValue="activo">
                    <SelectTrigger id="status">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="activo">Activo</SelectItem>
                      <SelectItem value="inactivo">Inactivo</SelectItem>
                      <SelectItem value="suspendido">Suspendido</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex gap-3">
                <Button type="button" variant="outline" className="flex-1 bg-transparent" asChild>
                  <Link href="/admin/usuarios">Cancelar</Link>
                </Button>
                <Button type="submit" className="flex-1">
                  Guardar Cambios
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/admin/usuarios/loading.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/usuarios/loading.tsx
================================================================================

export default function Loading() {
  return null
}



================================================================================
# ARCHIVO: front-end/app/admin/usuarios/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/admin/usuarios/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Search, UserPlus, Users, GraduationCap, Shield, Wrench } from "lucide-react"
import Link from "next/link"

export default function UsersPage() {
  const users = [
    {
      id: 1,
      name: "Juan Pérez",
      email: "juan@example.com",
      role: "estudiante",
      status: "activo",
      joinDate: "15 Ene 2025",
    },
    {
      id: 2,
      name: "María García",
      email: "maria.profesor@example.com",
      role: "profesor",
      status: "activo",
      joinDate: "10 Ene 2025",
    },
    {
      id: 3,
      name: "Carlos López",
      email: "carlos@example.com",
      role: "estudiante",
      status: "inactivo",
      joinDate: "5 Ene 2025",
    },
    {
      id: 4,
      name: "Ana Martínez",
      email: "ana.admin@example.com",
      role: "admin",
      status: "activo",
      joinDate: "1 Ene 2025",
    },
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-balance">Gestión de Usuarios</h1>
            <p className="mt-1 text-muted-foreground">Administra los usuarios de la plataforma</p>
          </div>
          <Button>
            <UserPlus className="mr-2 h-4 w-4" />
            Nuevo Usuario
          </Button>
        </div>

        {/* Stats */}
        <div className="mb-6 grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Usuarios</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1,234</div>
              <p className="text-xs text-muted-foreground">+12% este mes</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Estudiantes</CardTitle>
              <GraduationCap className="h-4 w-4 text-blue-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1,150</div>
              <p className="text-xs text-muted-foreground">93% del total</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Profesores</CardTitle>
              <Users className="h-4 w-4 text-green-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">68</div>
              <p className="text-xs text-muted-foreground">5.5% del total</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Administradores</CardTitle>
              <Shield className="h-4 w-4 text-purple-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">16</div>
              <p className="text-xs text-muted-foreground">1.5% del total</p>
            </CardContent>
          </Card>
        </div>

        {/* Users List */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Lista de Usuarios</CardTitle>
                <CardDescription>Busca y gestiona usuarios de la plataforma</CardDescription>
              </div>
              <div className="relative w-64">
                <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input placeholder="Buscar usuarios..." className="pl-8" />
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {users.map((user) => (
                <Card key={user.id}>
                  <CardContent className="flex items-center justify-between pt-6">
                    <div className="flex items-center gap-4">
                      <Avatar className="h-12 w-12">
                        <AvatarFallback className="bg-primary text-primary-foreground">
                          {user.name
                            .split(" ")
                            .map((n) => n[0])
                            .join("")}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <div className="mb-1 flex items-center gap-2">
                          <h3 className="font-semibold">{user.name}</h3>
                          <Badge
                            variant="outline"
                            className={
                              user.role === "estudiante"
                                ? "border-blue-500 text-blue-500"
                                : user.role === "profesor"
                                  ? "border-green-500 text-green-500"
                                  : user.role === "admin"
                                    ? "border-purple-500 text-purple-500"
                                    : "border-orange-500 text-orange-500"
                            }
                          >
                            {user.role === "estudiante" && <GraduationCap className="mr-1 h-3 w-3" />}
                            {user.role === "profesor" && <Users className="mr-1 h-3 w-3" />}
                            {user.role === "admin" && <Shield className="mr-1 h-3 w-3" />}
                            {user.role === "mantenimiento" && <Wrench className="mr-1 h-3 w-3" />}
                            {user.role}
                          </Badge>
                          <Badge variant={user.status === "activo" ? "default" : "secondary"}>{user.status}</Badge>
                        </div>
                        <p className="text-sm text-muted-foreground">{user.email}</p>
                        <p className="text-xs text-muted-foreground">Registrado: {user.joinDate}</p>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button size="sm" variant="outline" asChild>
                        <Link href="/perfil">Ver Perfil</Link>
                      </Button>
                      <Button size="sm" variant="default" asChild>
                        <Link href={`/admin/usuarios/${user.id}/editar`}>Editar</Link>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/asignar-nivel/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/asignar-nivel/page.tsx
================================================================================

import { LevelAssignmentFlow } from "@/components/auth/level-assignment-flow"
import { BookOpen } from "lucide-react"
import Link from "next/link"

export default function AssignLevelPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10">
      <div className="container mx-auto flex min-h-screen flex-col items-center justify-center px-4 py-8">
        <div className="w-full max-w-2xl">
          {/* Logo */}
          <Link href="/" className="mb-8 flex items-center justify-center gap-2">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary text-primary-foreground">
              <BookOpen className="h-7 w-7" />
            </div>
            <span className="text-3xl font-bold">SpeakLexi</span>
          </Link>

          <LevelAssignmentFlow />
        </div>
      </div>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/cambiar-curso/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/cambiar-curso/page.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { 
  Globe, 
  CheckCircle2, 
  ArrowRight, 
  Loader2,
  AlertCircle,
  ArrowLeft,
  Languages
} from "lucide-react"
import { useToast } from "@/hooks/use-toast"

interface Idioma {
  id: string
  nombre: string
  icono: string
  disponible: boolean
  descripcion: string
}

const IDIOMAS_BASE: Idioma[] = [
  {
    id: "Inglés",
    nombre: "Inglés",
    icono: "🇺🇸",
    disponible: true,
    descripcion: "El idioma más hablado del mundo",
  },
  {
    id: "Francés",
    nombre: "Francés",
    icono: "🇫🇷",
    disponible: true,
    descripcion: "El idioma del amor y la cultura",
  },
  {
    id: "Alemán",
    nombre: "Alemán",
    icono: "🇩🇪",
    disponible: true,
    descripcion: "El idioma de la precisión",
  },
  {
    id: "Italiano",
    nombre: "Italiano",
    icono: "🇮🇹",
    disponible: true,
    descripcion: "El idioma de la música",
  },
]

export default function CambiarCursoPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [loading, setLoading] = useState(false)
  const [loadingData, setLoadingData] = useState(true)
  const [idiomaActual, setIdiomaActual] = useState("Inglés")
  const [idiomas] = useState<Idioma[]>(IDIOMAS_BASE)
  const [selectedIdioma, setSelectedIdioma] = useState<string | null>(null)
  const [showConfirmation, setShowConfirmation] = useState(false)
  const [nivelActual, setNivelActual] = useState("A1")
  const [xpActual, setXpActual] = useState(0)

  useEffect(() => {
    cargarPerfil()
  }, [])

  const cargarPerfil = async () => {
    try {
      const userId = localStorage.getItem("userId")
      if (!userId) {
        router.push("/login")
        return
      }

      const res = await fetch(`http://localhost:5000/api/usuario/perfil/${userId}`)
      const data = await res.json()

      if (res.ok && data.perfil) {
        setIdiomaActual(data.perfil.idioma || "Inglés")
        setNivelActual(data.perfil.nivel_actual || "A1")
        setXpActual(data.perfil.total_xp || 0)
      } else {
        toast({
          title: "Error",
          description: "No se pudo cargar tu perfil.",
          variant: "destructive",
        })
      }
    } catch (error) {
      console.error("Error al cargar perfil:", error)
      toast({
        title: "Error",
        description: "No se pudo conectar con el servidor.",
        variant: "destructive",
      })
    } finally {
      setLoadingData(false)
    }
  }

  const handleCambiarIdioma = async () => {
    if (!selectedIdioma) return

    setLoading(true)
    try {
      const userId = localStorage.getItem("userId")
      const res = await fetch("http://localhost:5000/api/usuario/cambiar-curso", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          usuario_id: parseInt(userId!),
          idioma: selectedIdioma,
        }),
      })

      const data = await res.json()

      if (!res.ok) {
        throw new Error(data.error || "Error al cambiar de idioma")
      }

      // ✅ Actualizar estado local inmediatamente
      setIdiomaActual(selectedIdioma)
      setNivelActual(data.nivel_actual || nivelActual)

      // ✅ Actualizar localStorage
      localStorage.setItem("idioma", selectedIdioma)
      localStorage.setItem("nivel", data.nivel_actual || nivelActual)

      toast({
        title: "¡Idioma cambiado! 🎉",
        description: `Ahora estás aprendiendo ${selectedIdioma}`,
      })

      // ✅ Redirigir al dashboard después de 1.5 segundos
      setTimeout(() => {
        router.push("/dashboard")
        router.refresh() // Forzar recarga de datos
      }, 1500)

    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
      setShowConfirmation(false)
    }
  }

  const handleSelectIdioma = (idiomaId: string) => {
    const idioma = idiomas.find(i => i.id === idiomaId)
    
    if (!idioma?.disponible) {
      toast({
        title: "Idioma no disponible",
        description: "Este idioma estará disponible próximamente",
        variant: "destructive",
      })
      return
    }

    if (idiomaId === idiomaActual) {
      toast({
        title: "Idioma actual",
        description: "Ya estás aprendiendo este idioma",
      })
      return
    }

    setSelectedIdioma(idiomaId)
    setShowConfirmation(true)
  }

  if (loadingData) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <Loader2 className="h-8 w-8 animate-spin text-primary mx-auto" />
          <p className="text-muted-foreground">Cargando cursos disponibles...</p>
        </div>
      </div>
    )
  }

  const idiomaSeleccionadoInfo = idiomas.find(i => i.id === selectedIdioma)

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-muted p-4 py-8">
      <div className="container max-w-6xl mx-auto space-y-8">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-bold flex items-center gap-3">
              <Languages className="h-8 w-8 text-primary" />
              Cambiar Curso
            </h1>
            <p className="text-muted-foreground mt-2">
              Selecciona el idioma que deseas aprender
            </p>
          </div>
          <Button variant="outline" onClick={() => router.push("/perfil")}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Volver al perfil
          </Button>
        </div>

        {/* Idioma Actual */}
        <Alert>
          <Globe className="h-4 w-4" />
          <AlertDescription>
            <strong>Idioma actual:</strong> {idiomaActual} — Nivel {nivelActual} ({xpActual} XP)
          </AlertDescription>
        </Alert>

        {/* Grid de Idiomas */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {idiomas.map((idioma) => (
            <Card
              key={idioma.id}
              className={`cursor-pointer transition-all hover:shadow-lg ${
                idioma.id === idiomaActual
                  ? "border-primary ring-2 ring-primary"
                  : idioma.disponible
                  ? "hover:border-primary"
                  : "opacity-60 cursor-not-allowed"
              }`}
              onClick={() => handleSelectIdioma(idioma.id)}
            >
              <CardHeader className="text-center pb-3">
                <div className="text-6xl mb-4">{idioma.icono}</div>
                <CardTitle className="text-2xl">{idioma.nombre}</CardTitle>
                <CardDescription className="text-sm min-h-[2.5rem]">
                  {idioma.descripcion}
                </CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-3">
                <div className="flex flex-col gap-2">
                  {idioma.id === idiomaActual && (
                    <Badge className="w-full justify-center">
                      <CheckCircle2 className="mr-1 h-3 w-3" />
                      Cursando actualmente
                    </Badge>
                  )}
                  
                  {idioma.disponible && idioma.id !== idiomaActual && (
                    <Badge variant="secondary" className="w-full justify-center">
                      Disponible
                    </Badge>
                  )}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Modal de Confirmación */}
        {showConfirmation && selectedIdioma && idiomaSeleccionadoInfo && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
            <Card className="max-w-md w-full">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-center">
                  <AlertCircle className="h-5 w-5 text-orange-500" />
                  Confirmar Cambio de Curso
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 text-center">
                <div className="text-6xl">{idiomaSeleccionadoInfo.icono}</div>
                <p>
                  ¿Deseas cambiar a <strong>{selectedIdioma}</strong>?
                </p>
                <p className="text-sm text-muted-foreground">
                  Tu progreso en {idiomaActual} se guardará automáticamente.
                </p>

                <div className="flex gap-4">
                  <Button
                    variant="outline"
                    onClick={() => {
                      setShowConfirmation(false)
                      setSelectedIdioma(null)
                    }}
                    disabled={loading}
                    className="flex-1"
                  >
                    Cancelar
                  </Button>
                  <Button
                    onClick={handleCambiarIdioma}
                    disabled={loading}
                    className="flex-1"
                  >
                    {loading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Cambiando...
                      </>
                    ) : (
                      <>
                        Confirmar
                        <ArrowRight className="ml-2 h-4 w-4" />
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/clasificacion/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/clasificacion/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { LeaderboardTable } from "@/components/gamification/leaderboard-table"
import { LeaderboardFilters } from "@/components/gamification/leaderboard-filters"
import { UserRankCard } from "@/components/gamification/user-rank-card"

export default function LeaderboardPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Clasificación</h1>
          <p className="mt-1 text-muted-foreground">Compite con otros estudiantes y sube de posición</p>
        </div>

        <div className="grid gap-6 lg:grid-cols-4">
          <aside className="lg:col-span-1">
            <div className="space-y-6">
              <UserRankCard />
              <LeaderboardFilters />
            </div>
          </aside>

          <div className="lg:col-span-3">
            <LeaderboardTable />
          </div>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/correo-enviado/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/correo-enviado/page.tsx
================================================================================

import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { BookOpen, Mail } from "lucide-react"
import Link from "next/link"

export default function EmailSentPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10">
      <div className="container mx-auto flex min-h-screen flex-col items-center justify-center px-4 py-8">
        <div className="w-full max-w-md">
          {/* Logo */}
          <Link href="/" className="mb-8 flex items-center justify-center gap-2">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary text-primary-foreground">
              <BookOpen className="h-7 w-7" />
            </div>
            <span className="text-3xl font-bold">SpeakLexi</span>
          </Link>

          <Card className="p-8">
            <div className="text-center">
              <div className="mx-auto mb-4 flex h-20 w-20 items-center justify-center rounded-full bg-success/10">
                <Mail className="h-10 w-10 text-success" />
              </div>
              <h1 className="text-2xl font-bold text-balance">Correo Enviado</h1>
              <p className="mt-2 text-muted-foreground leading-relaxed">
                Hemos enviado un enlace de recuperación a tu correo electrónico. Por favor revisa tu bandeja de entrada
                y sigue las instrucciones.
              </p>

              <div className="mt-6 space-y-3">
                <Link href="/login" className="block">
                  <Button className="w-full">Volver al Inicio de Sesión</Button>
                </Link>
                <p className="text-sm text-muted-foreground">
                  ¿No recibiste el correo?{" "}
                  <Link href="/recuperar-contrasena" className="font-medium text-primary hover:underline">
                    Reenviar enlace
                  </Link>
                </p>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/cuenta-desactivada/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/cuenta-desactivada/page.tsx
================================================================================

"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { CheckCircle2, Info, Clock, AlertTriangle } from "lucide-react"
import { useRouter } from "next/navigation"
import { Alert, AlertDescription } from "@/components/ui/alert"

export default function CuentaDesactivadaPage() {
  const router = useRouter()

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted">
      <Card className="w-full max-w-2xl shadow-lg">
        <CardHeader className="text-center space-y-4">
          <div className="flex justify-center">
            <div className="relative">
              <CheckCircle2 className="h-20 w-20 text-green-500" />
              <Clock className="h-8 w-8 text-orange-500 absolute -bottom-1 -right-1 bg-background rounded-full p-1" />
            </div>
          </div>
          <div>
            <CardTitle className="text-3xl font-bold">Cuenta Desactivada</CardTitle>
            <CardDescription className="text-lg mt-2">
              Tu cuenta ha sido desactivada temporalmente
            </CardDescription>
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Información principal */}
          <Alert className="border-orange-500 bg-orange-50 dark:bg-orange-950/20">
            <AlertTriangle className="h-5 w-5 text-orange-600" />
            <AlertDescription className="text-base">
              <strong className="block mb-2 text-orange-700 dark:text-orange-400">
                Tu cuenta permanecerá desactivada por 30 días
              </strong>
              <p className="text-sm text-muted-foreground">
                Durante este período, no podrás acceder a tu cuenta pero toda tu información 
                permanecerá guardada de forma segura.
              </p>
            </AlertDescription>
          </Alert>

          {/* ¿Qué sucede ahora? */}
          <div className="bg-muted/50 rounded-lg p-6 space-y-4">
            <div className="flex items-center gap-2 mb-3">
              <Info className="h-5 w-5 text-primary" />
              <h3 className="font-semibold text-lg">¿Qué sucede ahora?</h3>
            </div>
            
            <div className="space-y-3 text-sm text-muted-foreground">
              <div className="flex items-start gap-3">
                <div className="rounded-full bg-primary/10 p-1 mt-0.5">
                  <div className="w-2 h-2 rounded-full bg-primary" />
                </div>
                <p>
                  <strong className="text-foreground">Desactivación temporal:</strong> Tu cuenta 
                  estará inactiva durante los próximos 30 días.
                </p>
              </div>

              <div className="flex items-start gap-3">
                <div className="rounded-full bg-primary/10 p-1 mt-0.5">
                  <div className="w-2 h-2 rounded-full bg-primary" />
                </div>
                <p>
                  <strong className="text-foreground">Datos protegidos:</strong> Todo tu progreso, 
                  logros y configuración permanecen guardados de forma segura.
                </p>
              </div>

              <div className="flex items-start gap-3">
                <div className="rounded-full bg-primary/10 p-1 mt-0.5">
                  <div className="w-2 h-2 rounded-full bg-primary" />
                </div>
                <p>
                  <strong className="text-foreground">Reactivación fácil:</strong> Puedes reactivar 
                  tu cuenta en cualquier momento simplemente iniciando sesión.
                </p>
              </div>

              <div className="flex items-start gap-3">
                <div className="rounded-full bg-destructive/10 p-1 mt-0.5">
                  <div className="w-2 h-2 rounded-full bg-destructive" />
                </div>
                <p>
                  <strong className="text-foreground">Eliminación automática:</strong> Si no 
                  reactivas tu cuenta en 30 días, será eliminada permanentemente y no podrás 
                  recuperar tu información.
                </p>
              </div>
            </div>
          </div>

          {/* ¿Cambiaste de opinión? */}
          <div className="border-2 border-primary/20 rounded-lg p-6 bg-primary/5">
            <h3 className="font-semibold text-lg mb-3 flex items-center gap-2">
              <CheckCircle2 className="h-5 w-5 text-primary" />
              ¿Cambiaste de opinión?
            </h3>
            <p className="text-sm text-muted-foreground mb-4">
              Si quieres volver a SpeakLexi, es muy fácil. Solo tienes que iniciar sesión 
              con tu correo y contraseña. Te daremos la opción de reactivar tu cuenta 
              inmediatamente y continuar donde lo dejaste.
            </p>
            <Button 
              onClick={() => router.push('/login')} 
              variant="outline"
              className="w-full"
            >
              Reactivar mi cuenta ahora
            </Button>
          </div>

          {/* Botón principal */}
          <div className="pt-4">
            <Button 
              onClick={() => router.push('/')} 
              size="lg"
              className="w-full"
            >
              Volver a la página principal
            </Button>
          </div>

          {/* Nota al pie */}
          <div className="text-center">
            <p className="text-xs text-muted-foreground">
              Si tienes dudas o necesitas ayuda, contáctanos en{" "}
              <a href="mailto:soporte@speaklexi.com" className="text-primary hover:underline">
                soporte@speaklexi.com
              </a>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/dashboard/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/dashboard/page.tsx
================================================================================

"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"
import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { ProgressOverview } from "@/components/dashboard/progress-overview"
import { StreakCard } from "@/components/dashboard/streak-card"
import { RecentLessons } from "@/components/dashboard/recent-lessons"
import { QuickActions } from "@/components/dashboard/quick-actions"
import { authStorage } from "@/lib/auth"
import { useUserData } from "@/hooks/use-user-data"
import { Skeleton } from "@/components/ui/skeleton"

export default function DashboardPage() {
  const router = useRouter()
  const { userData, isLoading, error } = useUserData()

  useEffect(() => {
    // Verificar autenticación
    if (!authStorage.isAuthenticated()) {
      console.log("❌ No autenticado, redirigiendo a login...")
      router.push("/login")
    }
  }, [router])

  // Si hay error, mostrar usando datos de authStorage
  if (error) {
    console.warn("⚠️ Error cargando datos del backend, usando authStorage:", error)
    
    const user = authStorage.getUser()
    if (!user) {
      return (
        <div className="min-h-screen bg-background flex items-center justify-center">
          <div className="text-center">
            <p className="text-muted-foreground mb-4">Error al cargar el perfil</p>
            <button 
              onClick={() => router.push("/login")}
              className="text-primary hover:underline"
            >
              Volver al login
            </button>
          </div>
        </div>
      )
    }
    
    // Usar datos de authStorage como fallback
    return (
      <div className="min-h-screen bg-background">
        <DashboardHeader />
        <main className="container mx-auto px-4 py-8">
          <div className="space-y-6">
            <div>
              <h1 className="text-3xl font-bold">¡Hola, {user.nombre}! 👋</h1>
              <p className="text-muted-foreground">
                Nivel {user.nivel_actual || "A1"} • {user.idioma || "Inglés"}
              </p>
            </div>
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <p className="text-sm text-yellow-800">
                No se pudieron cargar todos los datos. Intenta recargar la página.
              </p>
            </div>
          </div>
        </main>
      </div>
    )
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-background">
        <DashboardHeader />
        <main className="container mx-auto px-4 py-8">
          <div className="space-y-6">
            {/* Skeleton del título */}
            <div className="space-y-2">
              <Skeleton className="h-10 w-64" />
              <Skeleton className="h-5 w-48" />
            </div>

            {/* Skeleton del contenido */}
            <div className="grid gap-6 lg:grid-cols-3">
              <div className="lg:col-span-2 space-y-6">
                <Skeleton className="h-96" />
                <Skeleton className="h-64" />
              </div>
              <div className="space-y-6">
                <Skeleton className="h-64" />
                <Skeleton className="h-48" />
              </div>
            </div>
          </div>
        </main>
      </div>
    )
  }

  const userName = userData?.usuario.nombre || "Usuario"
  const nivelActual = userData?.perfil.nivel_actual || "A1"
  const idioma = userData?.perfil.idioma || "Inglés"

  return (
    <div className="min-h-screen bg-background">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="space-y-6">
          {/* Welcome Section */}
          <div>
            <h1 className="text-3xl font-bold">¡Hola, {userName}! 👋</h1>
            <p className="text-muted-foreground">
              Nivel {nivelActual} • {idioma} • ¡Sigue aprendiendo!
            </p>
          </div>

          {/* Main Content Grid */}
          <div className="grid gap-6 lg:grid-cols-3">
            {/* Left Column - Main Content */}
            <div className="lg:col-span-2 space-y-6">
              <ProgressOverview />
              <RecentLessons />
            </div>

            {/* Right Column - Sidebar */}
            <div className="space-y-6">
              <StreakCard />
              <QuickActions />
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/eliminar-cuenta/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/eliminar-cuenta/page.tsx
================================================================================

"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Checkbox } from "@/components/ui/checkbox"
import { AlertTriangle, Loader2, ArrowLeft } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

export default function EliminarCuentaPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [step, setStep] = useState(1)
  
  // Step 1
  const [password, setPassword] = useState("")
  
  // Step 2
  const [aceptaTerminos, setAceptaTerminos] = useState(false)
  
  // Step 3
  const [confirmacion, setConfirmacion] = useState("")

  // Obtener datos del usuario
  const userEmail = typeof window !== 'undefined' ? localStorage.getItem('userEmail') : ''

  const handleNextStep = () => {
    setError("")
    
    if (step === 1 && !password) {
      setError("Debes ingresar tu contraseña")
      return
    }
    
    if (step === 2 && !aceptaTerminos) {
      setError("Debes aceptar los términos para continuar")
      return
    }
    
    setStep(step + 1)
  }

  const handleFinalDelete = async () => {
    setError("")

    // Validación final
    if (confirmacion.toUpperCase() !== "ELIMINAR") {
      setError("Debes escribir ELIMINAR para confirmar")
      return
    }

    setLoading(true)

    try {
      const userId = localStorage.getItem('userId')
      if (!userId) {
        throw new Error("No se pudo identificar tu usuario")
      }

      const res = await fetch(`http://localhost:5000/api/usuario/desactivar/${userId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ 
          password: password,
          confirmacion: "ELIMINAR" // Backend espera exactamente esto
        }),
      })

      const data = await res.json()

      if (!res.ok) {
        throw new Error(data.error || "Error al desactivar la cuenta")
      }

      toast({
        title: "Cuenta desactivada",
        description: "Tu cuenta ha sido desactivada correctamente",
      })
      
      // Limpiar sesión
      localStorage.clear()
      
      // Redirigir
      router.push('/cuenta-desactivada')
      
    } catch (err: any) {
      setError(err.message || "Error al desactivar la cuenta")
      toast({
        title: "Error",
        description: err.message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted">
      <div className="w-full max-w-2xl">
        <Card className="border-destructive shadow-lg">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-destructive" />
                <CardTitle>Eliminar Cuenta</CardTitle>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => router.push('/perfil')}
              >
                <ArrowLeft className="mr-2 h-4 w-4" />
                Volver al perfil
              </Button>
            </div>
            <CardDescription>
              Esta acción es permanente e irreversible
            </CardDescription>
            {userEmail && (
              <p className="text-sm text-muted-foreground">
                Cuenta: <strong>{userEmail}</strong>
              </p>
            )}
          </CardHeader>

        <CardContent className="space-y-6">
          {/* Indicador de paso */}
          <Alert>
            <AlertDescription>
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-4 w-4" />
                <strong>Paso {step} de 3</strong>
              </div>
              <p className="text-sm mt-1">
                {step === 1 && "Verificación de identidad"}
                {step === 2 && "Confirmación de términos"}
                {step === 3 && "Confirmación final"}
              </p>
            </AlertDescription>
          </Alert>

          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* PASO 1: Contraseña */}
          {step === 1 && (
            <div className="space-y-4">
              <Alert>
                <AlertDescription>
                  <strong>¿Qué sucederá?</strong>
                  <ul className="mt-2 ml-4 list-disc space-y-1 text-sm">
                    <li>Tu cuenta será desactivada por 30 días</li>
                    <li>Puedes reactivarla en cualquier momento</li>
                    <li>Después de 30 días, se eliminará permanentemente</li>
                  </ul>
                </AlertDescription>
              </Alert>

              <div className="space-y-2">
                <Label htmlFor="password">Confirma tu contraseña</Label>
                <Input
                  id="password"
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Ingresa tu contraseña"
                />
              </div>

              <div className="flex gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => router.back()}
                  className="flex-1"
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Atrás
                </Button>
                <Button
                  onClick={handleNextStep}
                  className="flex-1"
                >
                  Continuar
                </Button>
              </div>
            </div>
          )}

          {/* PASO 2: Términos */}
          {step === 2 && (
            <div className="space-y-4">
              <Alert variant="destructive">
                <AlertDescription>
                  <strong>Advertencia importante:</strong>
                  <ul className="mt-2 ml-4 list-disc space-y-1 text-sm">
                    <li>Perderás acceso a todas tus lecciones</li>
                    <li>Tu progreso y logros se eliminarán</li>
                    <li>No podrás recuperar tu información después de 30 días</li>
                  </ul>
                </AlertDescription>
              </Alert>

              <div className="flex items-start space-x-2 bg-muted p-4 rounded-lg">
                <Checkbox
                  id="terms"
                  checked={aceptaTerminos}
                  onCheckedChange={(checked) => setAceptaTerminos(checked as boolean)}
                />
                <Label htmlFor="terms" className="text-sm leading-relaxed cursor-pointer">
                  Entiendo que esta acción desactivará mi cuenta por 30 días y que después 
                  de ese período será eliminada permanentemente junto con toda mi información.
                </Label>
              </div>

              <div className="flex gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setStep(1)}
                  className="flex-1"
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Atrás
                </Button>
                <Button
                  onClick={handleNextStep}
                  disabled={!aceptaTerminos}
                  className="flex-1"
                >
                  Continuar
                </Button>
              </div>
            </div>
          )}

          {/* PASO 3: Confirmación final */}
          {step === 3 && (
            <div className="space-y-4">
              <Alert variant="destructive">
                <AlertDescription>
                  <div className="flex items-center gap-2 mb-2">
                    <AlertTriangle className="h-4 w-4" />
                    <strong>Última advertencia:</strong>
                  </div>
                  <p className="text-sm">
                    Esta es tu última oportunidad para cancelar
                  </p>
                </AlertDescription>
              </Alert>

              <div className="space-y-2">
                <Label htmlFor="confirmacion">
                  Escribe <strong className="text-destructive">ELIMINAR</strong> para confirmar
                </Label>
                <Input
                  id="confirmacion"
                  type="text"
                  value={confirmacion}
                  onChange={(e) => setConfirmacion(e.target.value)}
                  placeholder="ELIMINAR"
                  disabled={loading}
                />
                <p className="text-xs text-muted-foreground">
                  Debes escribir exactamente "ELIMINAR" en mayúsculas
                </p>
              </div>

              <div className="flex gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setStep(2)}
                  disabled={loading}
                  className="flex-1"
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Atrás
                </Button>
                <Button
                  onClick={handleFinalDelete}
                  variant="destructive"
                  disabled={loading || confirmacion.toUpperCase() !== "ELIMINAR"}
                  className="flex-1"
                >
                  {loading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Desactivando...
                    </>
                  ) : (
                    "Eliminar mi cuenta permanentemente"
                  )}
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/globals.css
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/globals.css
================================================================================

@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

:root {
  /* Brand Colors - Vibrant and Playful */
  --primary: oklch(0.65 0.25 265); /* Vibrant purple-blue */
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.75 0.2 145); /* Fresh green */
  --secondary-foreground: oklch(0.15 0 0);
  --accent: oklch(0.7 0.22 45); /* Warm orange */
  --accent-foreground: oklch(0.15 0 0);

  /* Neutrals */
  --background: oklch(0.99 0 0);
  --foreground: oklch(0.15 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.15 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.15 0 0);

  /* UI Elements */
  --muted: oklch(0.96 0 0);
  --muted-foreground: oklch(0.5 0 0);
  --border: oklch(0.9 0 0);
  --input: oklch(0.9 0 0);
  --ring: oklch(0.65 0.25 265);

  /* Status Colors */
  --destructive: oklch(0.6 0.24 25);
  --destructive-foreground: oklch(1 0 0);
  --success: oklch(0.65 0.2 145);
  --success-foreground: oklch(1 0 0);
  --warning: oklch(0.75 0.2 75);
  --warning-foreground: oklch(0.15 0 0);

  /* Charts */
  --chart-1: oklch(0.65 0.25 265);
  --chart-2: oklch(0.75 0.2 145);
  --chart-3: oklch(0.7 0.22 45);
  --chart-4: oklch(0.6 0.2 320);
  --chart-5: oklch(0.7 0.18 200);

  --radius: 0.75rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.15 0 0);
  --foreground: oklch(0.98 0 0);
  --card: oklch(0.18 0 0);
  --card-foreground: oklch(0.98 0 0);
  --popover: oklch(0.18 0 0);
  --popover-foreground: oklch(0.98 0 0);
  --primary: oklch(0.7 0.25 265);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.3 0 0);
  --secondary-foreground: oklch(0.98 0 0);
  --muted: oklch(0.25 0 0);
  --muted-foreground: oklch(0.65 0 0);
  --accent: oklch(0.3 0 0);
  --accent-foreground: oklch(0.98 0 0);
  --border: oklch(0.25 0 0);
  --input: oklch(0.25 0 0);
  --ring: oklch(0.7 0.25 265);
  --destructive: oklch(0.55 0.24 25);
  --destructive-foreground: oklch(0.98 0 0);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  /* optional: --font-sans, --font-serif, --font-mono if they are applied in the layout.tsx */
  --font-sans: "Poppins", "system-ui", "sans-serif";
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================================================
# ARCHIVO: front-end/app/layout.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/layout.tsx
================================================================================

import type React from "react"
import type { Metadata } from "next"
import { Poppins } from "next/font/google"
import { Analytics } from "@vercel/analytics/next"
import { Toaster } from "@/components/ui/toaster"
import "./globals.css"

const poppins = Poppins({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
  variable: "--font-poppins",
})

export const metadata: Metadata = {
  title: "SpeakLexi - Learn Languages Gamified",
  description: "Master new languages through fun, gamified lessons",
  generator: "v0.app",
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="es">
      <body className={`font-sans antialiased`}>
        {children}
        <Toaster />
        <Analytics />
      </body>
    </html>
  )
}



================================================================================
# ARCHIVO: front-end/app/lecciones/[id]/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/lecciones/[id]/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { LessonViewer } from "@/components/lessons/lesson-viewer"

export default function LessonPage({ params }: { params: { id: string } }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />
      <LessonViewer lessonId={params.id} />
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/lecciones/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/lecciones/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { LessonList } from "@/components/lessons/lesson-list"
import { LessonFilters } from "@/components/lessons/lesson-filters"

export default function LessonsPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Lecciones</h1>
          <p className="mt-1 text-muted-foreground">Explora y completa lecciones para mejorar tu nivel</p>
        </div>

        <div className="grid gap-6 lg:grid-cols-4">
          <aside className="lg:col-span-1">
            <LessonFilters />
          </aside>

          <div className="lg:col-span-3">
            <LessonList />
          </div>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/login/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/login/page.tsx
================================================================================

import { LoginForm } from "@/components/auth/login-form"
import { BookOpen } from "lucide-react"
import Link from "next/link"

export default function LoginPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10">
      <div className="container mx-auto flex min-h-screen flex-col items-center justify-center px-4 py-8">
        <div className="w-full max-w-md">
          {/* Logo */}
          <Link href="/" className="mb-8 flex items-center justify-center gap-2">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary text-primary-foreground">
              <BookOpen className="h-7 w-7" />
            </div>
            <span className="text-3xl font-bold">SpeakLexi</span>
          </Link>

          {/* Login Card */}
          <div className="rounded-2xl bg-card p-8 shadow-lg">
            <div className="mb-6 text-center">
              <h1 className="text-2xl font-bold text-balance">Bienvenido de Nuevo</h1>
              <p className="mt-2 text-muted-foreground">Ingresa tus credenciales para continuar</p>
            </div>

            <LoginForm />

            <div className="mt-6 text-center text-sm">
              <span className="text-muted-foreground">¿No tienes cuenta? </span>
              <Link href="/registro" className="font-medium text-primary hover:underline">
                Regístrate aquí
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/logros/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/logros/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { AchievementsList } from "@/components/gamification/achievements-list"
import { LevelProgress } from "@/components/gamification/level-progress"
import { RewardsInventory } from "@/components/gamification/rewards-inventory"

export default function AchievementsPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Logros y Recompensas</h1>
          <p className="mt-1 text-muted-foreground">Desbloquea insignias y sube de nivel</p>
        </div>

        <div className="grid gap-6 lg:grid-cols-3">
          <div className="space-y-6 lg:col-span-2">
            <AchievementsList />
          </div>

          <div className="space-y-6">
            <LevelProgress />
            <RewardsInventory />
          </div>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/mantenimiento/dashboard/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/mantenimiento/dashboard/page.tsx
================================================================================

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { AlertTriangle, CheckCircle, Clock, Settings, FileText, Calendar } from "lucide-react"
import Link from "next/link"

export default function MaintenanceDashboardPage() {
  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-card/50 backdrop-blur-sm">
        <div className="container mx-auto flex items-center justify-between px-4 py-4">
          <div className="flex items-center gap-2">
            <div className="flex h-10 w-10 items-center justify-center rounded-xl bg-primary text-primary-foreground">
              <Settings className="h-6 w-6" />
            </div>
            <div>
              <h1 className="text-2xl font-bold">SpeakLexi</h1>
              <p className="text-xs text-muted-foreground">Panel de Mantenimiento</p>
            </div>
          </div>

          <nav className="hidden items-center gap-6 md:flex">
            <Link href="/mantenimiento/dashboard" className="font-medium text-foreground hover:text-primary">
              Dashboard
            </Link>
            <Link href="/mantenimiento/reportes" className="font-medium text-muted-foreground hover:text-primary">
              Reportes
            </Link>
            <Link href="/mantenimiento/tareas" className="font-medium text-muted-foreground hover:text-primary">
              Tareas
            </Link>
          </nav>

          <Button variant="outline" asChild>
            <Link href="/login">Cerrar Sesión</Link>
          </Button>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h2 className="text-3xl font-bold">Panel de Mantenimiento</h2>
          <p className="text-muted-foreground">Gestiona reportes de fallas y tareas programadas</p>
        </div>

        {/* Stats Overview */}
        <div className="mb-8 grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Reportes Pendientes</CardTitle>
              <AlertTriangle className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">12</div>
              <p className="text-xs text-muted-foreground">+3 desde ayer</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Reportes Resueltos</CardTitle>
              <CheckCircle className="h-4 w-4 text-green-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">48</div>
              <p className="text-xs text-muted-foreground">Este mes</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Tareas Programadas</CardTitle>
              <Clock className="h-4 w-4 text-blue-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">8</div>
              <p className="text-xs text-muted-foreground">Próximas 7 días</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Tiempo Promedio</CardTitle>
              <Calendar className="h-4 w-4 text-purple-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">2.4h</div>
              <p className="text-xs text-muted-foreground">Resolución de reportes</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid gap-6 md:grid-cols-2">
          {/* Recent Reports */}
          <Card>
            <CardHeader>
              <CardTitle>Reportes Recientes</CardTitle>
              <CardDescription>Últimas fallas reportadas por usuarios</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[
                  { id: 1, title: "Error al cargar lección", priority: "Alta", status: "Pendiente" },
                  { id: 2, title: "Audio no reproduce", priority: "Media", status: "En progreso" },
                  { id: 3, title: "Problema con clasificación", priority: "Baja", status: "Pendiente" },
                ].map((report) => (
                  <div key={report.id} className="flex items-center justify-between rounded-lg border p-3">
                    <div className="flex-1">
                      <p className="font-medium">{report.title}</p>
                      <p className="text-sm text-muted-foreground">Prioridad: {report.priority}</p>
                    </div>
                    <span
                      className={`text-xs font-medium px-2 py-1 rounded-full ${
                        report.status === "Pendiente" ? "bg-orange-100 text-orange-700" : "bg-blue-100 text-blue-700"
                      }`}
                    >
                      {report.status}
                    </span>
                  </div>
                ))}
              </div>
              <Button variant="outline" className="mt-4 w-full bg-transparent" asChild>
                <Link href="/mantenimiento/reportes">
                  <FileText className="mr-2 h-4 w-4" />
                  Ver Todos los Reportes
                </Link>
              </Button>
            </CardContent>
          </Card>

          {/* Scheduled Tasks */}
          <Card>
            <CardHeader>
              <CardTitle>Tareas Programadas</CardTitle>
              <CardDescription>Próximas tareas de mantenimiento</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {[
                  { id: 1, title: "Backup de base de datos", date: "Hoy, 23:00", type: "Automática" },
                  { id: 2, title: "Actualización de servidor", date: "Mañana, 02:00", type: "Manual" },
                  { id: 3, title: "Limpieza de logs", date: "En 3 días", type: "Automática" },
                ].map((task) => (
                  <div key={task.id} className="flex items-center justify-between rounded-lg border p-3">
                    <div className="flex-1">
                      <p className="font-medium">{task.title}</p>
                      <p className="text-sm text-muted-foreground">{task.date}</p>
                    </div>
                    <span
                      className={`text-xs font-medium px-2 py-1 rounded-full ${
                        task.type === "Automática" ? "bg-green-100 text-green-700" : "bg-purple-100 text-purple-700"
                      }`}
                    >
                      {task.type}
                    </span>
                  </div>
                ))}
              </div>
              <Button variant="outline" className="mt-4 w-full bg-transparent" asChild>
                <Link href="/mantenimiento/tareas">
                  <Calendar className="mr-2 h-4 w-4" />
                  Ver Todas las Tareas
                </Link>
              </Button>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/mantenimiento/reportes/[id]/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/mantenimiento/reportes/[id]/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { ArrowLeft, AlertCircle, User, Calendar, Tag } from "lucide-react"
import Link from "next/link"

export default function ReportDetailPage({ params }: { params: { id: string } }) {
  const report = {
    id: params.id,
    title: "Error en carga de lecciones",
    description: "Las lecciones no cargan correctamente en el módulo de estudiantes. Aparece un error 500.",
    priority: "alta",
    status: "en_revision",
    category: "Backend",
    reportedBy: "Juan Pérez",
    reportedAt: "2025-01-18 14:30",
    assignedTo: "Carlos Martínez",
    steps: "1. Iniciar sesión\n2. Ir a Lecciones\n3. Intentar abrir cualquier lección\n4. Error aparece",
    environment: "Producción - Chrome 120",
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <Link href="/mantenimiento/reportes">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Volver a Reportes
            </Button>
          </Link>
        </div>

        <div className="mb-6 flex items-start justify-between">
          <div>
            <h1 className="text-3xl font-bold text-balance">Reporte #{report.id}</h1>
            <p className="mt-1 text-muted-foreground">{report.title}</p>
          </div>
          <Badge
            variant={report.priority === "alta" ? "destructive" : report.priority === "media" ? "default" : "secondary"}
          >
            {report.priority}
          </Badge>
        </div>

        <div className="grid gap-6 lg:grid-cols-3">
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Descripción del Problema</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm leading-relaxed">{report.description}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Pasos para Reproducir</CardTitle>
              </CardHeader>
              <CardContent>
                <pre className="whitespace-pre-wrap text-sm font-mono bg-muted p-4 rounded-lg">{report.steps}</pre>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Actualizar Estado</CardTitle>
                <CardDescription>Cambia el estado o asigna el reporte</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label>Estado</Label>
                  <Select defaultValue={report.status}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="pendiente">Pendiente</SelectItem>
                      <SelectItem value="en_revision">En Revisión</SelectItem>
                      <SelectItem value="en_progreso">En Progreso</SelectItem>
                      <SelectItem value="resuelto">Resuelto</SelectItem>
                      <SelectItem value="cerrado">Cerrado</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Asignar a</Label>
                  <Select defaultValue={report.assignedTo}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Carlos Martínez">Carlos Martínez</SelectItem>
                      <SelectItem value="Ana López">Ana López</SelectItem>
                      <SelectItem value="Pedro Sánchez">Pedro Sánchez</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>Comentarios</Label>
                  <Textarea placeholder="Agrega notas o comentarios sobre el reporte..." rows={4} />
                </div>

                <Button className="w-full">Guardar Cambios</Button>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-base">Información</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-start gap-3">
                  <AlertCircle className="h-5 w-5 text-muted-foreground mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium">Estado</p>
                    <Badge variant="secondary" className="mt-1">
                      {report.status.replace("_", " ")}
                    </Badge>
                  </div>
                </div>

                <div className="flex items-start gap-3">
                  <Tag className="h-5 w-5 text-muted-foreground mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium">Categoría</p>
                    <p className="text-sm text-muted-foreground mt-1">{report.category}</p>
                  </div>
                </div>

                <div className="flex items-start gap-3">
                  <User className="h-5 w-5 text-muted-foreground mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium">Reportado por</p>
                    <p className="text-sm text-muted-foreground mt-1">{report.reportedBy}</p>
                  </div>
                </div>

                <div className="flex items-start gap-3">
                  <Calendar className="h-5 w-5 text-muted-foreground mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium">Fecha</p>
                    <p className="text-sm text-muted-foreground mt-1">{report.reportedAt}</p>
                  </div>
                </div>

                <div className="flex items-start gap-3">
                  <User className="h-5 w-5 text-muted-foreground mt-0.5" />
                  <div className="flex-1">
                    <p className="text-sm font-medium">Asignado a</p>
                    <p className="text-sm text-muted-foreground mt-1">{report.assignedTo}</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-base">Entorno</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">{report.environment}</p>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/mantenimiento/reportes/loading.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/mantenimiento/reportes/loading.tsx
================================================================================

export default function Loading() {
  return null
}



================================================================================
# ARCHIVO: front-end/app/mantenimiento/reportes/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/mantenimiento/reportes/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { AlertCircle, Bug, AlertTriangle, Info, Search } from "lucide-react"
import Link from "next/link"

export default function ReportesPage() {
  const reports = [
    {
      id: 1,
      title: "Error al cargar lección de gramática",
      module: "Módulo Alumno",
      severity: "alta",
      status: "pendiente",
      reporter: "Juan Pérez",
      date: "2025-01-19",
      description: "La lección no carga correctamente en dispositivos móviles",
    },
    {
      id: 2,
      title: "Problema con el sistema de logros",
      module: "Gamificación",
      severity: "media",
      status: "en_revision",
      reporter: "María García",
      date: "2025-01-18",
      description: "Los logros no se actualizan después de completar lecciones",
    },
    {
      id: 3,
      title: "Lentitud en la carga del dashboard",
      module: "Dashboard",
      severity: "baja",
      status: "resuelto",
      reporter: "Carlos López",
      date: "2025-01-17",
      description: "El dashboard tarda más de 5 segundos en cargar",
    },
    {
      id: 4,
      title: "Error en la tabla de clasificación",
      module: "Leaderboard",
      severity: "alta",
      status: "en_progreso",
      reporter: "Ana Martínez",
      date: "2025-01-16",
      description: "Los puntajes no se actualizan en tiempo real",
    },
  ]

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "alta":
        return <AlertCircle className="h-4 w-4" />
      case "media":
        return <AlertTriangle className="h-4 w-4" />
      default:
        return <Info className="h-4 w-4" />
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "alta":
        return "destructive"
      case "media":
        return "default"
      default:
        return "secondary"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "resuelto":
        return "default"
      case "en_progreso":
        return "default"
      case "en_revision":
        return "secondary"
      default:
        return "outline"
    }
  }

  const getStatusLabel = (status: string) => {
    switch (status) {
      case "resuelto":
        return "Resuelto"
      case "en_progreso":
        return "En Progreso"
      case "en_revision":
        return "En Revisión"
      default:
        return "Pendiente"
    }
  }

  return (
    <div className="min-h-screen bg-background">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-2">Reportes de Fallas</h1>
          <p className="text-muted-foreground">Gestiona y da seguimiento a los reportes del sistema</p>
        </div>

        {/* Filters */}
        <Card className="mb-6">
          <CardContent className="pt-6">
            <div className="grid gap-4 md:grid-cols-4">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input placeholder="Buscar reportes..." className="pl-9" />
              </div>
              <Select defaultValue="todos">
                <SelectTrigger>
                  <SelectValue placeholder="Severidad" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="todos">Todas las severidades</SelectItem>
                  <SelectItem value="alta">Alta</SelectItem>
                  <SelectItem value="media">Media</SelectItem>
                  <SelectItem value="baja">Baja</SelectItem>
                </SelectContent>
              </Select>
              <Select defaultValue="todos">
                <SelectTrigger>
                  <SelectValue placeholder="Estado" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="todos">Todos los estados</SelectItem>
                  <SelectItem value="pendiente">Pendiente</SelectItem>
                  <SelectItem value="en_revision">En Revisión</SelectItem>
                  <SelectItem value="en_progreso">En Progreso</SelectItem>
                  <SelectItem value="resuelto">Resuelto</SelectItem>
                </SelectContent>
              </Select>
              <Select defaultValue="todos">
                <SelectTrigger>
                  <SelectValue placeholder="Módulo" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="todos">Todos los módulos</SelectItem>
                  <SelectItem value="alumno">Módulo Alumno</SelectItem>
                  <SelectItem value="profesor">Módulo Profesor</SelectItem>
                  <SelectItem value="admin">Módulo Admin</SelectItem>
                  <SelectItem value="gamificacion">Gamificación</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Reports List */}
        <div className="space-y-4">
          {reports.map((report) => (
            <Card key={report.id} className="hover:border-primary transition-colors">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <Bug className="h-5 w-5 text-muted-foreground" />
                      <CardTitle className="text-lg">
                        #{report.id} - {report.title}
                      </CardTitle>
                    </div>
                    <CardDescription>{report.description}</CardDescription>
                  </div>
                  <div className="flex gap-2">
                    <Badge variant={getSeverityColor(report.severity) as any} className="gap-1">
                      {getSeverityIcon(report.severity)}
                      {report.severity.charAt(0).toUpperCase() + report.severity.slice(1)}
                    </Badge>
                    <Badge variant={getStatusColor(report.status) as any}>{getStatusLabel(report.status)}</Badge>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div className="flex gap-6 text-sm text-muted-foreground">
                    <span>
                      Módulo: <strong>{report.module}</strong>
                    </span>
                    <span>
                      Reportado por: <strong>{report.reporter}</strong>
                    </span>
                    <span>
                      Fecha: <strong>{report.date}</strong>
                    </span>
                  </div>
                  <Button variant="outline" size="sm" asChild>
                    <Link href={`/mantenimiento/reportes/${report.id}`}>Ver Detalles</Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/mantenimiento/tareas/nueva/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/mantenimiento/tareas/nueva/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { CreateTaskForm } from "@/components/maintenance/create-task-form"

export default function NewTaskPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Programar Nueva Tarea</h1>
          <p className="mt-1 text-muted-foreground">Crea una nueva tarea de mantenimiento programada</p>
        </div>

        <CreateTaskForm />
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/mantenimiento/tareas/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/mantenimiento/tareas/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Calendar, Clock, Plus, CheckCircle2, AlertCircle } from "lucide-react"
import Link from "next/link"

export default function TareasPage() {
  const tasks = [
    {
      id: 1,
      title: "Actualización de seguridad del servidor",
      type: "Actualización",
      priority: "alta",
      status: "programada",
      scheduledDate: "2025-01-25",
      scheduledTime: "02:00 AM",
      assignedTo: "Equipo DevOps",
      recurring: false,
    },
    {
      id: 2,
      title: "Respaldo semanal de base de datos",
      type: "Preventivo",
      priority: "media",
      status: "completada",
      scheduledDate: "2025-01-19",
      scheduledTime: "03:00 AM",
      assignedTo: "Sistema Automático",
      recurring: true,
      recurringPattern: "Semanal",
    },
    {
      id: 3,
      title: "Limpieza de archivos temporales",
      type: "Mantenimiento",
      priority: "baja",
      status: "en_progreso",
      scheduledDate: "2025-01-20",
      scheduledTime: "01:00 AM",
      assignedTo: "Sistema Automático",
      recurring: true,
      recurringPattern: "Diario",
    },
    {
      id: 4,
      title: "Revisión de logs de errores",
      type: "Correctivo",
      priority: "alta",
      status: "programada",
      scheduledDate: "2025-01-21",
      scheduledTime: "09:00 AM",
      assignedTo: "Carlos Rodríguez",
      recurring: false,
    },
  ]

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "alta":
        return "destructive"
      case "media":
        return "default"
      default:
        return "secondary"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "completada":
        return "default"
      case "en_progreso":
        return "default"
      default:
        return "outline"
    }
  }

  const getStatusLabel = (status: string) => {
    switch (status) {
      case "completada":
        return "Completada"
      case "en_progreso":
        return "En Progreso"
      default:
        return "Programada"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "completada":
        return <CheckCircle2 className="h-4 w-4" />
      case "en_progreso":
        return <Clock className="h-4 w-4" />
      default:
        return <AlertCircle className="h-4 w-4" />
    }
  }

  return (
    <div className="min-h-screen bg-background">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-bold mb-2">Tareas Programadas</h1>
            <p className="text-muted-foreground">Gestiona el mantenimiento y tareas del sistema</p>
          </div>
          <Button asChild>
            <Link href="/mantenimiento/tareas/nueva">
              <Plus className="mr-2 h-4 w-4" />
              Nueva Tarea
            </Link>
          </Button>
        </div>

        {/* Stats */}
        <div className="grid gap-6 md:grid-cols-4 mb-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Tareas</CardTitle>
              <Calendar className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{tasks.length}</div>
              <p className="text-xs text-muted-foreground">Este mes</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Programadas</CardTitle>
              <Clock className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{tasks.filter((t) => t.status === "programada").length}</div>
              <p className="text-xs text-muted-foreground">Pendientes</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">En Progreso</CardTitle>
              <AlertCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{tasks.filter((t) => t.status === "en_progreso").length}</div>
              <p className="text-xs text-muted-foreground">Activas</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Completadas</CardTitle>
              <CheckCircle2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{tasks.filter((t) => t.status === "completada").length}</div>
              <p className="text-xs text-muted-foreground">Este mes</p>
            </CardContent>
          </Card>
        </div>

        {/* Tasks List */}
        <div className="space-y-4">
          {tasks.map((task) => (
            <Card key={task.id} className="hover:border-primary transition-colors">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      {getStatusIcon(task.status)}
                      <CardTitle className="text-lg">{task.title}</CardTitle>
                    </div>
                    <CardDescription>Asignado a: {task.assignedTo}</CardDescription>
                  </div>
                  <div className="flex gap-2">
                    <Badge variant={getPriorityColor(task.priority) as any}>
                      {task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}
                    </Badge>
                    <Badge variant={getStatusColor(task.status) as any}>{getStatusLabel(task.status)}</Badge>
                    {task.recurring && <Badge variant="outline">{task.recurringPattern}</Badge>}
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div className="flex gap-6 text-sm text-muted-foreground">
                    <span className="flex items-center gap-1">
                      <Calendar className="h-4 w-4" />
                      {task.scheduledDate}
                    </span>
                    <span className="flex items-center gap-1">
                      <Clock className="h-4 w-4" />
                      {task.scheduledTime}
                    </span>
                    <span>
                      Tipo: <strong>{task.type}</strong>
                    </span>
                  </div>
                  <Button variant="outline" size="sm">
                    Ver Detalles
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/page.tsx
================================================================================

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { BookOpen, Trophy, Users, Zap } from "lucide-react"

export default function HomePage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10">
      {/* Header */}
      <header className="border-b bg-card/50 backdrop-blur-sm">
        <div className="container mx-auto flex items-center justify-between px-4 py-4">
          <div className="flex items-center gap-2">
            <div className="flex h-10 w-10 items-center justify-center rounded-xl bg-primary text-primary-foreground">
              <BookOpen className="h-6 w-6" />
            </div>
            <span className="text-2xl font-bold text-balance">SpeakLexi</span>
          </div>
          <div className="flex items-center gap-3">
            <Link href="/login">
              <Button variant="ghost">Iniciar Sesión</Button>
            </Link>
            <Link href="/registro">
              <Button>Comenzar Gratis</Button>
            </Link>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <main className="container mx-auto px-4 py-16">
        <div className="mx-auto max-w-4xl text-center">
          <h1 className="mb-6 text-5xl font-bold leading-tight text-balance md:text-6xl">
            Aprende Idiomas de Forma{" "}
            <span className="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">Divertida</span>
          </h1>
          <p className="mb-8 text-xl text-muted-foreground text-pretty leading-relaxed">
            Domina nuevos idiomas con lecciones gamificadas, desafíos interactivos y un sistema de recompensas que te
            mantiene motivado cada día.
          </p>
          <div className="flex flex-col items-center justify-center gap-4 sm:flex-row">
            <Link href="/registro">
              <Button size="lg" className="w-full sm:w-auto">
                Empezar Ahora
              </Button>
            </Link>
            <Link href="/login">
              <Button size="lg" variant="outline" className="w-full sm:w-auto bg-transparent">
                Ya Tengo Cuenta
              </Button>
            </Link>
          </div>
        </div>

        {/* Features */}
        <div className="mx-auto mt-24 grid max-w-5xl gap-8 md:grid-cols-2 lg:grid-cols-4">
          <div className="flex flex-col items-center gap-3 rounded-2xl bg-card p-6 text-center shadow-sm">
            <div className="flex h-14 w-14 items-center justify-center rounded-xl bg-primary/10 text-primary">
              <BookOpen className="h-7 w-7" />
            </div>
            <h3 className="font-semibold">Lecciones Interactivas</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              Aprende con actividades dinámicas y contenido multimedia
            </p>
          </div>

          <div className="flex flex-col items-center gap-3 rounded-2xl bg-card p-6 text-center shadow-sm">
            <div className="flex h-14 w-14 items-center justify-center rounded-xl bg-secondary/10 text-secondary">
              <Trophy className="h-7 w-7" />
            </div>
            <h3 className="font-semibold">Sistema de Logros</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              Gana insignias y recompensas por tu progreso
            </p>
          </div>

          <div className="flex flex-col items-center gap-3 rounded-2xl bg-card p-6 text-center shadow-sm">
            <div className="flex h-14 w-14 items-center justify-center rounded-xl bg-accent/10 text-accent">
              <Users className="h-7 w-7" />
            </div>
            <h3 className="font-semibold">Tabla de Clasificación</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              Compite con otros estudiantes y sube de nivel
            </p>
          </div>

          <div className="flex flex-col items-center gap-3 rounded-2xl bg-card p-6 text-center shadow-sm">
            <div className="flex h-14 w-14 items-center justify-center rounded-xl bg-primary/10 text-primary">
              <Zap className="h-7 w-7" />
            </div>
            <h3 className="font-semibold">Progreso Rápido</h3>
            <p className="text-sm text-muted-foreground leading-relaxed">
              Avanza a tu ritmo con lecciones adaptadas a tu nivel
            </p>
          </div>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/perfil/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/perfil/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { ProfileSettings } from "@/components/profile/profile-settings"

export default function ProfilePage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      {/* Header con botón de regreso habilitado */}
      <DashboardHeader showBackButton={true} />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Mi Perfil</h1>
          <p className="mt-1 text-muted-foreground">Gestiona tu información personal y preferencias</p>
        </div>

        <ProfileSettings />
      </main>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/profesor/dashboard/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/profesor/dashboard/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { TeacherStats } from "@/components/teacher/teacher-stats"
import { StudentPerformance } from "@/components/teacher/student-performance"
import { RecentFeedback } from "@/components/teacher/recent-feedback"
import { QuickTeacherActions } from "@/components/teacher/quick-teacher-actions"

export default function TeacherDashboardPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Panel del Profesor</h1>
          <p className="mt-1 text-muted-foreground">Monitorea el progreso de tus estudiantes</p>
        </div>

        <div className="grid gap-6 lg:grid-cols-3">
          <div className="space-y-6 lg:col-span-2">
            <TeacherStats />
            <StudentPerformance />
          </div>

          <div className="space-y-6">
            <QuickTeacherActions />
            <RecentFeedback />
          </div>
        </div>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/profesor/estadisticas/[id]/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/profesor/estadisticas/[id]/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { ArrowLeft, TrendingUp, TrendingDown, Target, Clock, Award, BookOpen } from "lucide-react"
import Link from "next/link"

export default function EstadisticasAlumnoPage({ params }: { params: { id: string } }) {
  // Mock data for individual student
  const student = {
    id: params.id,
    name: "María García",
    email: "maria.garcia@email.com",
    level: "Intermedio",
    course: "Inglés B1",
    enrolledDate: "2024-09-15",
    lastActive: "Hace 2 horas",
    stats: {
      totalLessons: 45,
      completedLessons: 34,
      totalXP: 2450,
      currentStreak: 12,
      averageScore: 87,
      timeSpent: "18.5h",
    },
  }

  const recentActivity = [
    { lesson: "Present Perfect", score: 92, date: "2025-01-19", time: "25 min" },
    { lesson: "Phrasal Verbs", score: 78, date: "2025-01-18", time: "30 min" },
    { lesson: "Conditional Sentences", score: 95, date: "2025-01-17", time: "28 min" },
    { lesson: "Passive Voice", score: 85, date: "2025-01-16", time: "22 min" },
  ]

  const skillsBreakdown = [
    { skill: "Vocabulario", score: 90, trend: "up" },
    { skill: "Gramática", score: 85, trend: "up" },
    { skill: "Comprensión Auditiva", score: 82, trend: "down" },
    { skill: "Pronunciación", score: 88, trend: "up" },
    { skill: "Escritura", score: 75, trend: "neutral" },
  ]

  const areasToImprove = [
    "Comprensión auditiva de conversaciones rápidas",
    "Uso de tiempos verbales compuestos",
    "Vocabulario técnico y profesional",
  ]

  return (
    <div className="min-h-screen bg-background">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-6">
          <Button variant="ghost" asChild className="mb-4">
            <Link href="/profesor/estadisticas">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Volver a Estadísticas
            </Link>
          </Button>
          <div className="flex items-start gap-4">
            <Avatar className="h-16 w-16">
              <AvatarFallback className="text-xl bg-primary text-primary-foreground">
                {student.name
                  .split(" ")
                  .map((n) => n[0])
                  .join("")}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <h1 className="text-3xl font-bold">{student.name}</h1>
              <p className="text-muted-foreground">{student.email}</p>
              <div className="flex gap-2 mt-2">
                <Badge>{student.level}</Badge>
                <Badge variant="outline">{student.course}</Badge>
              </div>
            </div>
            <div className="text-right text-sm text-muted-foreground">
              <p>Inscrito: {student.enrolledDate}</p>
              <p>Última actividad: {student.lastActive}</p>
            </div>
          </div>
        </div>

        {/* Stats Overview */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Progreso</CardTitle>
              <BookOpen className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {student.stats.completedLessons}/{student.stats.totalLessons}
              </div>
              <Progress value={(student.stats.completedLessons / student.stats.totalLessons) * 100} className="mt-2" />
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Promedio</CardTitle>
              <Target className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{student.stats.averageScore}%</div>
              <p className="text-xs text-muted-foreground mt-1">Calificación promedio</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Racha</CardTitle>
              <Award className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{student.stats.currentStreak} días</div>
              <p className="text-xs text-muted-foreground mt-1">{student.stats.totalXP} XP total</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Tiempo</CardTitle>
              <Clock className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{student.stats.timeSpent}</div>
              <p className="text-xs text-muted-foreground mt-1">Tiempo total de estudio</p>
            </CardContent>
          </Card>
        </div>

        <div className="grid gap-6 lg:grid-cols-2">
          {/* Skills Breakdown */}
          <Card>
            <CardHeader>
              <CardTitle>Desglose por Habilidad</CardTitle>
              <CardDescription>Rendimiento en diferentes áreas</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {skillsBreakdown.map((skill) => (
                <div key={skill.skill} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">{skill.skill}</span>
                    <div className="flex items-center gap-2">
                      <span className="text-sm font-bold">{skill.score}%</span>
                      {skill.trend === "up" && <TrendingUp className="h-4 w-4 text-green-600" />}
                      {skill.trend === "down" && <TrendingDown className="h-4 w-4 text-red-600" />}
                    </div>
                  </div>
                  <Progress value={skill.score} />
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Recent Activity */}
          <Card>
            <CardHeader>
              <CardTitle>Actividad Reciente</CardTitle>
              <CardDescription>Últimas lecciones completadas</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {recentActivity.map((activity, index) => (
                  <div key={index} className="flex items-center justify-between border-b pb-3 last:border-0">
                    <div className="flex-1">
                      <p className="font-medium">{activity.lesson}</p>
                      <p className="text-sm text-muted-foreground">
                        {activity.date} • {activity.time}
                      </p>
                    </div>
                    <Badge
                      variant={activity.score >= 90 ? "default" : activity.score >= 70 ? "secondary" : "destructive"}
                    >
                      {activity.score}%
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Areas to Improve */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Áreas de Mejora</CardTitle>
            <CardDescription>Recomendaciones basadas en el desempeño</CardDescription>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2">
              {areasToImprove.map((area, index) => (
                <li key={index} className="flex items-start gap-2">
                  <span className="text-primary mt-1">•</span>
                  <span>{area}</span>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/profesor/estadisticas/loading.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/profesor/estadisticas/loading.tsx
================================================================================

export default function Loading() {
  return null
}



================================================================================
# ARCHIVO: front-end/app/profesor/estadisticas/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/profesor/estadisticas/page.tsx
================================================================================

"use client"

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Search, Download } from "lucide-react"
import Link from "next/link"
import { useToast } from "@/hooks/use-toast"

export default function TeacherStatisticsPage() {
  const { toast } = useToast()

  const students = [
    {
      id: 1,
      name: "María García",
      initials: "MG",
      level: "B1",
      lessonsCompleted: 15,
      totalLessons: 20,
      averageScore: 92,
      lastActivity: "Hace 2 horas",
    },
    {
      id: 2,
      name: "Carlos Rodríguez",
      initials: "CR",
      level: "A2",
      lessonsCompleted: 8,
      totalLessons: 15,
      averageScore: 78,
      lastActivity: "Hace 1 día",
    },
    {
      id: 3,
      name: "Ana Martínez",
      initials: "AM",
      level: "B1",
      lessonsCompleted: 12,
      totalLessons: 20,
      averageScore: 65,
      lastActivity: "Hace 3 horas",
    },
  ]

  const handleExport = () => {
    toast({
      title: "Exportando reporte",
      description: "El archivo CSV se descargará en breve",
    })

    const csvContent = [
      ["Nombre", "Nivel", "Lecciones Completadas", "Total Lecciones", "Promedio", "Última Actividad"],
      ...students.map((s) => [
        s.name,
        s.level,
        s.lessonsCompleted,
        s.totalLessons,
        `${s.averageScore}%`,
        s.lastActivity,
      ]),
    ]
      .map((row) => row.join(","))
      .join("\n")

    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `estadisticas-estudiantes-${new Date().toISOString().split("T")[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-balance">Estadísticas de Estudiantes</h1>
            <p className="mt-1 text-muted-foreground">Analiza el rendimiento de tus estudiantes</p>
          </div>
          <Button onClick={handleExport}>
            <Download className="mr-2 h-4 w-4" />
            Exportar Reporte
          </Button>
        </div>

        <Card className="mb-6 p-6">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input placeholder="Buscar estudiante..." className="pl-10" />
          </div>
        </Card>

        <Card className="p-6">
          <div className="space-y-4">
            {students.map((student) => (
              <Link key={student.id} href={`/profesor/estadisticas/${student.id}`}>
                <div className="rounded-xl border-2 border-border bg-card p-4 transition-all hover:border-primary hover:bg-primary/5">
                  <div className="flex items-start gap-4">
                    <Avatar className="h-12 w-12">
                      <AvatarFallback className="bg-primary text-primary-foreground">{student.initials}</AvatarFallback>
                    </Avatar>

                    <div className="flex-1">
                      <div className="mb-3 flex items-start justify-between">
                        <div>
                          <h3 className="font-semibold">{student.name}</h3>
                          <p className="text-sm text-muted-foreground">Nivel {student.level}</p>
                        </div>
                        <Badge variant="secondary">{student.lastActivity}</Badge>
                      </div>

                      <div className="grid gap-4 sm:grid-cols-3">
                        <div>
                          <p className="mb-1 text-xs text-muted-foreground">Progreso</p>
                          <Progress value={(student.lessonsCompleted / student.totalLessons) * 100} className="h-2" />
                          <p className="mt-1 text-xs font-medium">
                            {student.lessonsCompleted} / {student.totalLessons}
                          </p>
                        </div>
                        <div>
                          <p className="mb-1 text-xs text-muted-foreground">Promedio</p>
                          <p className="text-2xl font-bold text-primary">{student.averageScore}%</p>
                        </div>
                        <div>
                          <p className="mb-1 text-xs text-muted-foreground">Estado</p>
                          <Badge className="bg-success text-success-foreground">Activo</Badge>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Link>
            ))}
          </div>
        </Card>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/profesor/planificacion/nuevo/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/profesor/planificacion/nuevo/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { CreatePlanningForm } from "@/components/teacher/create-planning-form"

export default function NewPlanningPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Nueva Planificación</h1>
          <p className="mt-1 text-muted-foreground">Crea un nuevo plan de contenido educativo en 3 pasos</p>
        </div>

        <CreatePlanningForm />
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/profesor/planificacion/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/profesor/planificacion/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Plus, Calendar, Target, BookOpen, Clock } from "lucide-react"
import Link from "next/link"

export default function PlanningPage() {
  const plans = [
    {
      id: 1,
      title: "Unidad 5: Tiempos Verbales",
      course: "Inglés Intermedio",
      level: "B1",
      objectives: 3,
      resources: 8,
      status: "en_progreso",
      dueDate: "15 Feb 2025",
    },
    {
      id: 2,
      title: "Módulo de Conversación",
      course: "Inglés Avanzado",
      level: "C1",
      objectives: 5,
      resources: 12,
      status: "planificado",
      dueDate: "28 Feb 2025",
    },
    {
      id: 3,
      title: "Gramática Básica",
      course: "Inglés Principiante",
      level: "A1",
      objectives: 4,
      resources: 10,
      status: "completado",
      dueDate: "10 Ene 2025",
    },
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-balance">Planificación de Contenidos</h1>
            <p className="mt-1 text-muted-foreground">Organiza y planifica nuevos contenidos educativos</p>
          </div>
          <Link href="/profesor/planificacion/nuevo">
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Nueva Planificación
            </Button>
          </Link>
        </div>

        {/* Stats */}
        <div className="mb-6 grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Planes</CardTitle>
              <BookOpen className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">12</div>
              <p className="text-xs text-muted-foreground">Este semestre</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">En Progreso</CardTitle>
              <Clock className="h-4 w-4 text-blue-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">5</div>
              <p className="text-xs text-muted-foreground">Activos</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Completados</CardTitle>
              <Target className="h-4 w-4 text-green-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">7</div>
              <p className="text-xs text-muted-foreground">Finalizados</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Próximos</CardTitle>
              <Calendar className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">3</div>
              <p className="text-xs text-muted-foreground">Este mes</p>
            </CardContent>
          </Card>
        </div>

        {/* Plans List */}
        <Card>
          <CardHeader>
            <CardTitle>Planes de Contenido</CardTitle>
            <CardDescription>Gestiona tus planificaciones de contenido educativo</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {plans.map((plan) => (
                <Card key={plan.id}>
                  <CardContent className="pt-6">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="mb-2 flex items-center gap-2">
                          <h3 className="font-semibold">{plan.title}</h3>
                          <Badge
                            variant={
                              plan.status === "completado"
                                ? "default"
                                : plan.status === "en_progreso"
                                  ? "secondary"
                                  : "outline"
                            }
                            className={
                              plan.status === "en_progreso"
                                ? "bg-blue-100 text-blue-700"
                                : plan.status === "completado"
                                  ? "bg-green-100 text-green-700"
                                  : ""
                            }
                          >
                            {plan.status.replace("_", " ")}
                          </Badge>
                        </div>
                        <div className="mb-3 flex items-center gap-4 text-sm text-muted-foreground">
                          <span>
                            {plan.course} - {plan.level}
                          </span>
                          <span className="flex items-center gap-1">
                            <Target className="h-3 w-3" />
                            {plan.objectives} objetivos
                          </span>
                          <span className="flex items-center gap-1">
                            <BookOpen className="h-3 w-3" />
                            {plan.resources} recursos
                          </span>
                          <span className="flex items-center gap-1">
                            <Calendar className="h-3 w-3" />
                            {plan.dueDate}
                          </span>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button size="sm" variant="outline">
                          Ver Detalles
                        </Button>
                        {plan.status !== "completado" && (
                          <Button size="sm" variant="default">
                            Continuar
                          </Button>
                        )}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/profesor/retroalimentacion/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/profesor/retroalimentacion/page.tsx
================================================================================

"use client"

import { useState } from "react"
import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { MessageSquare, ThumbsUp, AlertCircle, Clock, User } from "lucide-react"
import { ResponseModal } from "@/components/teacher/response-modal"

export default function FeedbackPage() {
  const [selectedFeedback, setSelectedFeedback] = useState<number | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)

  const feedbackItems = [
    {
      id: 1,
      student: "Juan Pérez",
      type: "sugerencia",
      message: "Sería genial tener más ejercicios de conversación",
      date: "Hace 2 horas",
      status: "pendiente",
      response: null,
    },
    {
      id: 2,
      student: "María García",
      type: "problema",
      message: "No puedo acceder a la lección de gramática avanzada",
      date: "Hace 5 horas",
      status: "en_revision",
      response: null,
    },
    {
      id: 3,
      student: "Carlos López",
      type: "felicitacion",
      message: "Excelente explicación en la última clase, muy clara",
      date: "Hace 1 día",
      status: "respondido",
      response: "¡Muchas gracias por tu comentario! Me alegra que la explicación haya sido útil.",
    },
  ]

  const handleRespond = (feedbackId: number) => {
    setSelectedFeedback(feedbackId)
    setIsModalOpen(true)
  }

  const selectedItem = feedbackItems.find((item) => item.id === selectedFeedback)

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-balance">Retroalimentación</h1>
          <p className="mt-1 text-muted-foreground">Revisa y responde la retroalimentación de tus estudiantes</p>
        </div>

        {/* Stats */}
        <div className="mb-6 grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Recibida</CardTitle>
              <MessageSquare className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">24</div>
              <p className="text-xs text-muted-foreground">Este mes</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Pendientes</CardTitle>
              <Clock className="h-4 w-4 text-orange-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">8</div>
              <p className="text-xs text-muted-foreground">Por responder</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Felicitaciones</CardTitle>
              <ThumbsUp className="h-4 w-4 text-green-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">15</div>
              <p className="text-xs text-muted-foreground">Feedback positivo</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Problemas</CardTitle>
              <AlertCircle className="h-4 w-4 text-red-500" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">3</div>
              <p className="text-xs text-muted-foreground">Requieren atención</p>
            </CardContent>
          </Card>
        </div>

        {/* Feedback List */}
        <Card>
          <CardHeader>
            <CardTitle>Retroalimentación Recibida</CardTitle>
            <CardDescription>Filtra y responde la retroalimentación de tus estudiantes</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="todas" className="w-full">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="todas">Todas</TabsTrigger>
                <TabsTrigger value="pendientes">Pendientes</TabsTrigger>
                <TabsTrigger value="revision">En Revisión</TabsTrigger>
                <TabsTrigger value="respondidas">Respondidas</TabsTrigger>
              </TabsList>

              <TabsContent value="todas" className="mt-6 space-y-4">
                {feedbackItems.map((item) => (
                  <Card key={item.id}>
                    <CardContent className="pt-6">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="mb-2 flex items-center gap-2">
                            <User className="h-4 w-4 text-muted-foreground" />
                            <span className="font-medium">{item.student}</span>
                            <Badge
                              variant={
                                item.type === "problema"
                                  ? "destructive"
                                  : item.type === "felicitacion"
                                    ? "default"
                                    : "secondary"
                              }
                            >
                              {item.type}
                            </Badge>
                            <Badge
                              variant="outline"
                              className={
                                item.status === "pendiente"
                                  ? "border-orange-500 text-orange-500"
                                  : item.status === "en_revision"
                                    ? "border-blue-500 text-blue-500"
                                    : "border-green-500 text-green-500"
                              }
                            >
                              {item.status.replace("_", " ")}
                            </Badge>
                          </div>
                          <p className="mb-2 text-sm text-muted-foreground">{item.message}</p>
                          <p className="text-xs text-muted-foreground">{item.date}</p>
                        </div>
                        <Button
                          size="sm"
                          variant={item.status === "respondido" ? "outline" : "default"}
                          onClick={() => handleRespond(item.id)}
                        >
                          {item.status === "respondido" ? "Ver Respuesta" : "Responder"}
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </TabsContent>

              <TabsContent value="pendientes" className="mt-6">
                <p className="text-center text-muted-foreground">Filtrando retroalimentación pendiente...</p>
              </TabsContent>

              <TabsContent value="revision" className="mt-6">
                <p className="text-center text-muted-foreground">Filtrando retroalimentación en revisión...</p>
              </TabsContent>

              <TabsContent value="respondidas" className="mt-6">
                <p className="text-center text-muted-foreground">Filtrando retroalimentación respondida...</p>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </main>

      <ResponseModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} feedback={selectedItem} />
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/progreso/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/progreso/page.tsx
================================================================================

import { DashboardHeader } from "@/components/dashboard/dashboard-header"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { BookOpen, Clock, Target, TrendingUp, Calendar, Award } from "lucide-react"

export default function ProgresoPage() {
  // Mock data
  const weeklyProgress = [
    { day: "Lun", minutes: 45, lessons: 3 },
    { day: "Mar", minutes: 30, lessons: 2 },
    { day: "Mié", minutes: 60, lessons: 4 },
    { day: "Jue", minutes: 20, lessons: 1 },
    { day: "Vie", minutes: 50, lessons: 3 },
    { day: "Sáb", minutes: 0, lessons: 0 },
    { day: "Dom", minutes: 40, lessons: 2 },
  ]

  const courseProgress = [
    { course: "Inglés Básico", progress: 75, lessons: 45, completed: 34 },
    { course: "Inglés Intermedio", progress: 30, lessons: 60, completed: 18 },
    { course: "Conversación", progress: 50, lessons: 30, completed: 15 },
  ]

  const skillsProgress = [
    { skill: "Vocabulario", level: 85, xp: 850 },
    { skill: "Gramática", level: 70, xp: 700 },
    { skill: "Pronunciación", level: 60, xp: 600 },
    { skill: "Comprensión Auditiva", level: 75, xp: 750 },
    { skill: "Escritura", level: 55, xp: 550 },
  ]

  return (
    <div className="min-h-screen bg-background">
      <DashboardHeader />

      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-2">Mi Progreso</h1>
          <p className="text-muted-foreground">Visualiza tu avance y estadísticas de aprendizaje</p>
        </div>

        <Tabs defaultValue="general" className="space-y-6">
          <TabsList>
            <TabsTrigger value="general">General</TabsTrigger>
            <TabsTrigger value="cursos">Por Curso</TabsTrigger>
            <TabsTrigger value="habilidades">Habilidades</TabsTrigger>
          </TabsList>

          <TabsContent value="general" className="space-y-6">
            {/* Weekly Activity */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="h-5 w-5" />
                  Actividad Semanal
                </CardTitle>
                <CardDescription>Tu progreso en los últimos 7 días</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex items-end justify-between gap-2 h-48">
                  {weeklyProgress.map((day) => (
                    <div key={day.day} className="flex flex-col items-center gap-2 flex-1">
                      <div className="flex flex-col items-center gap-1 text-xs text-muted-foreground">
                        <span className="font-medium">{day.minutes}m</span>
                        <span>{day.lessons} lec</span>
                      </div>
                      <div
                        className="w-full bg-primary rounded-t-md transition-all hover:bg-primary/80"
                        style={{ height: `${(day.minutes / 60) * 100}%`, minHeight: day.minutes > 0 ? "20px" : "0" }}
                      />
                      <span className="text-sm font-medium">{day.day}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Stats Grid */}
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Total Lecciones</CardTitle>
                  <BookOpen className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">67</div>
                  <p className="text-xs text-muted-foreground">+12 esta semana</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Tiempo Total</CardTitle>
                  <Clock className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">24.5h</div>
                  <p className="text-xs text-muted-foreground">+3.5h esta semana</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">Racha Actual</CardTitle>
                  <Target className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">15 días</div>
                  <p className="text-xs text-muted-foreground">¡Sigue así!</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">XP Total</CardTitle>
                  <TrendingUp className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">3,450</div>
                  <p className="text-xs text-muted-foreground">+450 esta semana</p>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="cursos" className="space-y-6">
            {courseProgress.map((course) => (
              <Card key={course.course}>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle>{course.course}</CardTitle>
                      <CardDescription>
                        {course.completed} de {course.lessons} lecciones completadas
                      </CardDescription>
                    </div>
                    <Badge variant="secondary">{course.progress}%</Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <Progress value={course.progress} className="h-3" />
                </CardContent>
              </Card>
            ))}
          </TabsContent>

          <TabsContent value="habilidades" className="space-y-6">
            {skillsProgress.map((skill) => (
              <Card key={skill.skill}>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className="flex h-12 w-12 items-center justify-center rounded-full bg-primary/10">
                        <Award className="h-6 w-6 text-primary" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{skill.skill}</CardTitle>
                        <CardDescription>{skill.xp} XP ganados</CardDescription>
                      </div>
                    </div>
                    <Badge variant="secondary" className="text-lg">
                      Nivel {Math.floor(skill.level / 10)}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">Progreso al siguiente nivel</span>
                      <span className="font-medium">{skill.level % 10}/10</span>
                    </div>
                    <Progress value={(skill.level % 10) * 10} className="h-2" />
                  </div>
                </CardContent>
              </Card>
            ))}
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/recuperar-contrasena/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/recuperar-contrasena/page.tsx
================================================================================

"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Mail, Loader2, CheckCircle2, ArrowLeft, AlertCircle } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import Link from "next/link"

export default function RecuperarContrasenaPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [email, setEmail] = useState("")
  const [emailEnviado, setEmailEnviado] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")

    if (!email) {
      setError("Por favor ingresa tu correo electrónico")
      return
    }

    // Validar formato de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      setError("Por favor ingresa un correo válido")
      return
    }

    setLoading(true)

    try {
      const res = await fetch("http://localhost:5000/api/auth/recuperar-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ correo: email }),
      })

      const data = await res.json()

      if (!res.ok) {
        throw new Error(data.error || "Error al enviar el correo")
      }

      setEmailEnviado(true)
      toast({
        title: "¡Correo enviado!",
        description: "Revisa tu bandeja de entrada para continuar",
      })

    } catch (error: any) {
      setError(error.message || "Error al enviar el correo")
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            {emailEnviado ? (
              <CheckCircle2 className="h-12 w-12 text-green-500" />
            ) : (
              <Mail className="h-12 w-12 text-primary" />
            )}
          </div>
          <CardTitle>
            {emailEnviado ? "¡Correo Enviado!" : "Recuperar Contraseña"}
          </CardTitle>
          <CardDescription>
            {emailEnviado
              ? "Revisa tu correo para continuar"
              : "Ingresa tu correo y te enviaremos instrucciones"}
          </CardDescription>
        </CardHeader>

        <CardContent>
          {emailEnviado ? (
            <div className="space-y-4">
              <Alert>
                <Mail className="h-4 w-4" />
                <AlertDescription>
                  <strong>Correo enviado a:</strong> {email}
                  <p className="mt-2 text-sm">
                    Hemos enviado un enlace de recuperación a tu correo. 
                    El enlace expira en 1 hora.
                  </p>
                </AlertDescription>
              </Alert>

              <div className="bg-muted/50 rounded-lg p-4 space-y-2">
                <p className="text-sm font-semibold">¿No recibiste el correo?</p>
                <ul className="text-sm text-muted-foreground space-y-1 ml-4">
                  <li>• Revisa tu carpeta de spam</li>
                  <li>• Verifica que el correo sea correcto</li>
                  <li>• Espera unos minutos e intenta de nuevo</li>
                </ul>
              </div>

              <div className="flex flex-col gap-3">
                <Button
                  variant="outline"
                  onClick={() => {
                    setEmailEnviado(false)
                    setEmail("")
                  }}
                  className="w-full"
                >
                  Enviar a otro correo
                </Button>
                <Button
                  variant="ghost"
                  onClick={() => router.push("/login")}
                  className="w-full"
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Volver al inicio de sesión
                </Button>
              </div>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <Alert>
                <AlertDescription className="text-sm">
                  Te enviaremos un enlace seguro a tu correo electrónico para 
                  que puedas restablecer tu contraseña.
                </AlertDescription>
              </Alert>

              <div className="space-y-2">
                <Label htmlFor="email">Correo Electrónico</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="tu@email.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  disabled={loading}
                  autoFocus
                />
              </div>

              <Button type="submit" className="w-full" disabled={loading}>
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Enviando...
                  </>
                ) : (
                  <>
                    <Mail className="mr-2 h-4 w-4" />
                    Enviar instrucciones
                  </>
                )}
              </Button>

              <div className="text-center">
                <Link href="/login" className="text-sm text-primary hover:underline">
                  <ArrowLeft className="inline mr-1 h-3 w-3" />
                  Volver al inicio de sesión
                </Link>
              </div>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/registro/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/registro/page.tsx
================================================================================

"use client"

import {RegisterForm} from "../../components/auth/register-form" // ✅ Import corregido
import { BookOpen } from "lucide-react"
import Link from "next/link"

export default function RegisterPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10">
      <div className="container mx-auto flex min-h-screen flex-col items-center justify-center px-4 py-8">
        <div className="w-full max-w-md">
          {/* Logo */}
          <Link href="/" className="mb-8 flex items-center justify-center gap-2">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary text-primary-foreground">
              <BookOpen className="h-7 w-7" />
            </div>
            <span className="text-3xl font-bold">SpeakLexi</span>
          </Link>

          {/* Register Card */}
          <div className="rounded-2xl bg-card p-8 shadow-lg">
            <div className="mb-6 text-center">
              <h1 className="text-2xl font-bold text-balance">Crea tu Cuenta</h1>
              <p className="mt-2 text-muted-foreground">
                Comienza tu viaje de aprendizaje hoy
              </p>
            </div>

            <RegisterForm />

            <div className="mt-6 text-center text-sm">
              <span className="text-muted-foreground">¿Ya tienes cuenta? </span>
              <Link href="/login" className="font-medium text-primary hover:underline">
                Inicia sesión aquí
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/app/restablecer-contrasena/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/restablecer-contrasena/page.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Eye, EyeOff, Loader2, CheckCircle2, AlertCircle, Lock, Shield } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { Progress } from "@/components/ui/progress"

export default function RestablecerContrasenaPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { toast } = useToast()
  
  const [loading, setLoading] = useState(false)
  const [validandoToken, setValidandoToken] = useState(true)
  const [tokenValido, setTokenValido] = useState(false)
  const [error, setError] = useState("")
  const [success, setSuccess] = useState(false)
  
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  
  const token = searchParams.get("token")

  useEffect(() => {
    if (token) {
      validarToken()
    } else {
      setValidandoToken(false)
      setError("Token no proporcionado")
    }
  }, [token])

  const validarToken = async () => {
    try {
      const res = await fetch("http://localhost:5000/api/auth/validar-token-recuperacion", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ token }),
      })

      const data = await res.json()

      if (res.ok) {
        setTokenValido(true)
      } else {
        setError(data.error || "Token inválido o expirado")
      }
    } catch (error: any) {
      setError("Error al validar el token")
    } finally {
      setValidandoToken(false)
    }
  }

  const calcularFuerzaPassword = (pass: string): number => {
    let fuerza = 0
    if (pass.length >= 8) fuerza += 25
    if (pass.length >= 12) fuerza += 15
    if (/[a-z]/.test(pass)) fuerza += 15
    if (/[A-Z]/.test(pass)) fuerza += 15
    if (/[0-9]/.test(pass)) fuerza += 15
    if (/[^a-zA-Z0-9]/.test(pass)) fuerza += 15
    return Math.min(fuerza, 100)
  }

  const getFuerzaColor = (fuerza: number): string => {
    if (fuerza < 40) return "bg-red-500"
    if (fuerza < 70) return "bg-yellow-500"
    return "bg-green-500"
  }

  const getFuerzaTexto = (fuerza: number): string => {
    if (fuerza < 40) return "Débil"
    if (fuerza < 70) return "Media"
    return "Fuerte"
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")

    // Validaciones
    if (!password || !confirmPassword) {
      setError("Por favor completa todos los campos")
      return
    }

    if (password.length < 8) {
      setError("La contraseña debe tener al menos 8 caracteres")
      return
    }

    if (password !== confirmPassword) {
      setError("Las contraseñas no coinciden")
      return
    }

    setLoading(true)

    try {
      const res = await fetch("http://localhost:5000/api/auth/restablecer-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          token,
          nueva_password: password 
        }),
      })

      const data = await res.json()

      if (!res.ok) {
        throw new Error(data.error || "Error al restablecer la contraseña")
      }

      setSuccess(true)
      toast({
        title: "¡Contraseña actualizada!",
        description: "Tu contraseña ha sido restablecida exitosamente",
      })

      // Redirigir al login después de 3 segundos
      setTimeout(() => {
        router.push("/login")
      }, 3000)

    } catch (error: any) {
      setError(error.message || "Error al restablecer la contraseña")
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  // Mientras valida el token
  if (validandoToken) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="flex flex-col items-center justify-center p-8">
            <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
            <p className="text-muted-foreground">Validando token...</p>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Token inválido
  if (!tokenValido && !validandoToken) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted">
        <Card className="w-full max-w-md border-destructive">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <AlertCircle className="h-12 w-12 text-destructive" />
            </div>
            <CardTitle className="text-destructive">Token Inválido</CardTitle>
            <CardDescription>{error}</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert variant="destructive">
              <AlertDescription>
                El enlace de recuperación es inválido o ha expirado. 
                Por favor solicita uno nuevo.
              </AlertDescription>
            </Alert>
            <Button
              onClick={() => router.push("/recuperar-contrasena")}
              className="w-full"
            >
              Solicitar nuevo enlace
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Éxito
  if (success) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <CheckCircle2 className="h-16 w-16 text-green-500" />
            </div>
            <CardTitle className="text-2xl">¡Contraseña Actualizada!</CardTitle>
            <CardDescription>
              Tu contraseña ha sido restablecida exitosamente
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert>
              <Shield className="h-4 w-4" />
              <AlertDescription>
                Ahora puedes iniciar sesión con tu nueva contraseña.
                Serás redirigido automáticamente...
              </AlertDescription>
            </Alert>
            <Button
              onClick={() => router.push("/login")}
              className="w-full"
            >
              Ir al inicio de sesión
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  const fuerzaPassword = calcularFuerzaPassword(password)

  // Formulario de nueva contraseña
  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <Lock className="h-12 w-12 text-primary" />
          </div>
          <CardTitle>Nueva Contraseña</CardTitle>
          <CardDescription>
            Ingresa tu nueva contraseña segura
          </CardDescription>
        </CardHeader>

        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            {/* Nueva Contraseña */}
            <div className="space-y-2">
              <Label htmlFor="password">Nueva Contraseña</Label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Mínimo 8 caracteres"
                  disabled={loading}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>

              {/* Indicador de fuerza */}
              {password && (
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-xs">
                    <span className="text-muted-foreground">Seguridad:</span>
                    <span className={`font-semibold ${
                      fuerzaPassword < 40 ? "text-red-500" :
                      fuerzaPassword < 70 ? "text-yellow-500" :
                      "text-green-500"
                    }`}>
                      {getFuerzaTexto(fuerzaPassword)}
                    </span>
                  </div>
                  <div className="h-2 bg-muted rounded-full overflow-hidden">
                    <div 
                      className={`h-full transition-all ${getFuerzaColor(fuerzaPassword)}`}
                      style={{ width: `${fuerzaPassword}%` }}
                    />
                  </div>
                </div>
              )}
            </div>

            {/* Confirmar Contraseña */}
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirmar Contraseña</Label>
              <div className="relative">
                <Input
                  id="confirmPassword"
                  type={showConfirmPassword ? "text" : "password"}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  placeholder="Repite tu contraseña"
                  disabled={loading}
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
                >
                  {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </button>
              </div>
              {confirmPassword && password !== confirmPassword && (
                <p className="text-xs text-destructive">Las contraseñas no coinciden</p>
              )}
              {confirmPassword && password === confirmPassword && (
                <p className="text-xs text-green-500 flex items-center gap-1">
                  <CheckCircle2 className="h-3 w-3" />
                  Las contraseñas coinciden
                </p>
              )}
            </div>

            {/* Requisitos */}
            <div className="bg-muted/50 rounded-lg p-3">
              <p className="text-xs font-semibold mb-2">Requisitos de la contraseña:</p>
              <ul className="text-xs text-muted-foreground space-y-1">
                <li className={password.length >= 8 ? "text-green-500" : ""}>
                  • Al menos 8 caracteres
                </li>
                <li className={/[A-Z]/.test(password) ? "text-green-500" : ""}>
                  • Una letra mayúscula
                </li>
                <li className={/[a-z]/.test(password) ? "text-green-500" : ""}>
                  • Una letra minúscula
                </li>
                <li className={/[0-9]/.test(password) ? "text-green-500" : ""}>
                  • Un número
                </li>
              </ul>
            </div>

            <Button type="submit" className="w-full" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Actualizando...
                </>
              ) : (
                <>
                  <Shield className="mr-2 h-4 w-4" />
                  Restablecer Contraseña
                </>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/app/restablecer-contrasena/reset-password-content.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/restablecer-contrasena/reset-password-content.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { Loader2, Lock, Eye, EyeOff, CheckCircle, AlertCircle } from "lucide-react"
import { authAPI } from "@/lib/api"

export default function ResetPasswordContent() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { toast } = useToast()
  
  const [token, setToken] = useState<string | null>(null)
  const [isValidating, setIsValidating] = useState(true)
  const [isValidToken, setIsValidToken] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  
  const [newPassword, setNewPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [email, setEmail] = useState("")

  // Validar token al cargar
  useEffect(() => {
    const tokenParam = searchParams.get("token")
    
    if (!tokenParam) {
      toast({
        title: "Error",
        description: "Token no encontrado",
        variant: "destructive",
      })
      setTimeout(() => router.push("/recuperar-contrasena"), 2000)
      return
    }

    setToken(tokenParam)
    validateToken(tokenParam)
  }, [searchParams])

  const validateToken = async (tokenToValidate: string) => {
    try {
      const data = await authAPI.validarToken(tokenToValidate)
      setIsValidToken(true)
      setEmail(data.correo)
      toast({
        title: "Token válido",
        description: "Puedes proceder a cambiar tu contraseña",
      })
    } catch (error: any) {
      setIsValidToken(false)
      toast({
        title: "Token inválido",
        description: error.message || "El enlace ha expirado o es inválido",
        variant: "destructive",
      })
      setTimeout(() => router.push("/recuperar-contrasena"), 3000)
    } finally {
      setIsValidating(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    // Validaciones
    if (newPassword.length < 8) {
      toast({
        title: "Error",
        description: "La contraseña debe tener al menos 8 caracteres",
        variant: "destructive",
      })
      return
    }

    if (newPassword !== confirmPassword) {
      toast({
        title: "Error",
        description: "Las contraseñas no coinciden",
        variant: "destructive",
      })
      return
    }

    if (!token) {
      toast({
        title: "Error",
        description: "Token no encontrado",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)

    try {
      const data = await authAPI.restablecerPassword(token, newPassword)
      
      toast({
        title: "¡Éxito!",
        description: data.mensaje || "Tu contraseña ha sido actualizada",
      })
      
      setTimeout(() => {
        router.push("/login")
      }, 2000)
      
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "No se pudo restablecer la contraseña",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  // Indicador de fortaleza de contraseña
  const getPasswordStrength = (password: string) => {
    if (password.length === 0) return { strength: 0, label: "", color: "" }
    if (password.length < 6) return { strength: 1, label: "Débil", color: "text-red-500" }
    if (password.length < 10) return { strength: 2, label: "Media", color: "text-yellow-500" }
    if (password.length >= 10 && /[A-Z]/.test(password) && /[0-9]/.test(password)) {
      return { strength: 3, label: "Fuerte", color: "text-green-500" }
    }
    return { strength: 2, label: "Media", color: "text-yellow-500" }
  }

  const passwordStrength = getPasswordStrength(newPassword)

  if (isValidating) {
    return (
      <div className="flex flex-col items-center justify-center space-y-4 py-8">
        <Loader2 className="h-8 w-8 animate-spin text-purple-600" />
        <p className="text-sm text-gray-600">Validando enlace...</p>
      </div>
    )
  }

  if (!isValidToken) {
    return (
      <div className="flex flex-col items-center justify-center space-y-4 py-8">
        <AlertCircle className="h-12 w-12 text-red-500" />
        <h3 className="text-lg font-semibold">Enlace inválido o expirado</h3>
        <p className="text-sm text-gray-600 text-center">
          Serás redirigido a la página de recuperación...
        </p>
      </div>
    )
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {email && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
          <p className="text-sm text-blue-800">
            Restableciendo contraseña para: <strong>{email}</strong>
          </p>
        </div>
      )}

      <div className="space-y-2">
        <Label htmlFor="newPassword">Nueva Contraseña</Label>
        <div className="relative">
          <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            id="newPassword"
            type={showPassword ? "text" : "password"}
            placeholder="••••••••"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            className="pl-10 pr-10"
            required
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-3 top-3 text-muted-foreground hover:text-gray-700"
          >
            {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
          </button>
        </div>
        
        {newPassword && (
          <div className="space-y-1">
            <div className="flex gap-1">
              {[1, 2, 3].map((level) => (
                <div
                  key={level}
                  className={`h-1 flex-1 rounded-full transition-colors ${
                    level <= passwordStrength.strength
                      ? passwordStrength.strength === 1
                        ? "bg-red-500"
                        : passwordStrength.strength === 2
                        ? "bg-yellow-500"
                        : "bg-green-500"
                      : "bg-gray-200"
                  }`}
                />
              ))}
            </div>
            <p className={`text-xs ${passwordStrength.color}`}>
              Fortaleza: {passwordStrength.label}
            </p>
          </div>
        )}
        
        <p className="text-xs text-muted-foreground">
          Mínimo 8 caracteres. Recomendado: incluir mayúsculas, números y símbolos
        </p>
      </div>

      <div className="space-y-2">
        <Label htmlFor="confirmPassword">Confirmar Contraseña</Label>
        <div className="relative">
          <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            id="confirmPassword"
            type={showConfirmPassword ? "text" : "password"}
            placeholder="••••••••"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            className="pl-10 pr-10"
            required
          />
          <button
            type="button"
            onClick={() => setShowConfirmPassword(!showConfirmPassword)}
            className="absolute right-3 top-3 text-muted-foreground hover:text-gray-700"
          >
            {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
          </button>
        </div>
        
        {confirmPassword && (
          <div className="flex items-center gap-2">
            {newPassword === confirmPassword ? (
              <>
                <CheckCircle className="h-4 w-4 text-green-500" />
                <p className="text-xs text-green-600">Las contraseñas coinciden</p>
              </>
            ) : (
              <>
                <AlertCircle className="h-4 w-4 text-red-500" />
                <p className="text-xs text-red-600">Las contraseñas no coinciden</p>
              </>
            )}
          </div>
        )}
      </div>

      <Button 
        type="submit" 
        className="w-full" 
        disabled={isLoading || newPassword !== confirmPassword || newPassword.length < 8}
      >
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Guardando...
          </>
        ) : (
          "Restablecer Contraseña"
        )}
      </Button>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/app/verificar-email/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/verificar-email/page.tsx
================================================================================

import { VerifyEmailForm } from "@/components/auth/verify-email-form"
import { BookOpen } from "lucide-react"
import Link from "next/link"

export default function VerifyEmailPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10">
      <div className="container mx-auto flex min-h-screen flex-col items-center justify-center px-4 py-8">
        <div className="w-full max-w-md">
          {/* Logo */}
          <Link href="/" className="mb-8 flex items-center justify-center gap-2">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary text-primary-foreground">
              <BookOpen className="h-7 w-7" />
            </div>
            <span className="text-3xl font-bold">SpeakLexi</span>
          </Link>

          {/* Verify Email Card */}
          <div className="rounded-2xl bg-card p-8 shadow-lg">
            <div className="mb-6 text-center">
              <div className="mx-auto mb-4 flex h-16 w-16 items-center justify-center rounded-full bg-primary/10">
                <svg className="h-8 w-8 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                  />
                </svg>
              </div>
              <h1 className="text-2xl font-bold text-balance">Verifica tu Email</h1>
              <p className="mt-2 text-muted-foreground leading-relaxed">
                Hemos enviado un código de 6 dígitos a tu correo electrónico
              </p>
            </div>

            <VerifyEmailForm />
          </div>
        </div>
      </div>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components.json
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components.json
================================================================================

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}



================================================================================
# ARCHIVO: front-end/components/admin/activity-forms/fill-blank-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/fill-blank-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Save, X, Plus, Trash2, Eye, EyeOff } from "lucide-react"
import { toast } from "sonner"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Switch } from "@/components/ui/switch"
import { type Actividad } from "@/lib/api"

interface ActivityFormProps {
  onGuardar: (actividad: Actividad) => void
  onCancelar: () => void
  actividadEditar?: Actividad | null
}

interface Hueco {
  id: string
  posicion: number
  respuesta: string
  respuestasAlternativas: string[]
  pistaEspecifica?: string
}

export function FillBlankForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [instrucciones, setInstrucciones] = useState("Completa los espacios en blanco con las palabras correctas.")
  const [oracion, setOracion] = useState("")
  const [huecos, setHuecos] = useState<Hueco[]>([])
  const [palabraHueco, setPalabraHueco] = useState("")
  const [respuestaAlternativa, setRespuestaAlternativa] = useState("")
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(10)
  const [huecoEditando, setHuecoEditando] = useState<Hueco | null>(null)
  const [mostrarPrevisualizacion, setMostrarPrevisualizacion] = useState(false)
  const [permiteMayusculas, setPermiteMayusculas] = useState(true)
  const [permiteAcentos, setPermiteAcentos] = useState(true)

  useEffect(() => {
    if (actividadEditar) {
      setInstrucciones(actividadEditar.instrucciones || "Completa los espacios en blanco con las palabras correctas.")
      setOracion(actividadEditar.pregunta || "")
      setHuecos(actividadEditar.opciones?.huecos || [])
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 10)
      setPermiteMayusculas(actividadEditar.opciones?.permiteMayusculas ?? true)
      setPermiteAcentos(actividadEditar.opciones?.permiteAcentos ?? true)
    }
  }, [actividadEditar])

  const generarId = () => Math.random().toString(36).substr(2, 9)

  const agregarHueco = () => {
    if (!palabraHueco.trim()) {
      toast.error("Escribe la palabra correcta para el hueco")
      return
    }

    const nuevoHueco: Hueco = {
      id: generarId(),
      posicion: huecos.length,
      respuesta: palabraHueco.trim(),
      respuestasAlternativas: []
    }

    setHuecos([...huecos, nuevoHueco])
    setPalabraHueco("")
    toast.success(`Hueco #${huecos.length + 1} agregado`)
  }

  const agregarRespuestaAlternativa = (huecoId: string) => {
    if (!respuestaAlternativa.trim()) {
      toast.error("Escribe una respuesta alternativa")
      return
    }

    setHuecos(huecos.map(hueco => 
      hueco.id === huecoId 
        ? { ...hueco, respuestasAlternativas: [...hueco.respuestasAlternativas, respuestaAlternativa.trim()] }
        : hueco
    ))
    setRespuestaAlternativa("")
    toast.success("Respuesta alternativa agregada")
  }

  const eliminarHueco = (id: string) => {
    setHuecos(huecos.filter(hueco => hueco.id !== id))
    if (huecoEditando?.id === id) {
      setHuecoEditando(null)
    }
  }

  const eliminarRespuestaAlternativa = (huecoId: string, index: number) => {
    setHuecos(huecos.map(hueco => 
      hueco.id === huecoId 
        ? { ...hueco, respuestasAlternativas: hueco.respuestasAlternativas.filter((_, i) => i !== index) }
        : hueco
    ))
  }

  const actualizarPistaEspecifica = (huecoId: string, pista: string) => {
    setHuecos(huecos.map(hueco => 
      hueco.id === huecoId 
        ? { ...hueco, pistaEspecifica: pista }
        : hueco
    ))
  }

  const generarPrevisualizacion = () => {
    let oracionConHuecos = oracion
    huecos.forEach((hueco, index) => {
      oracionConHuecos = oracionConHuecos.replace(`____`, `[${index + 1}]`)
    })
    return oracionConHuecos
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!oracion.trim()) {
      toast.error("Escribe la oración con espacios en blanco")
      return
    }

    if (huecos.length === 0) {
      toast.error("Debes agregar al menos un hueco")
      return
    }

    // Validar que la oración tenga suficientes espacios para los huecos
    const espaciosEnBlanco = (oracion.match(/____/g) || []).length
    if (espaciosEnBlanco !== huecos.length) {
      toast.error(`La oración tiene ${espaciosEnBlanco} espacios, pero has definido ${huecos.length} huecos`)
      return
    }

    const actividad: Actividad = {
      tipo: 'fill_blank',
      pregunta: oracion.trim(),
      instrucciones: instrucciones.trim(),
      opciones: {
        huecos: huecos,
        permiteMayusculas,
        permiteAcentos,
        formato: 'texto'
      },
      respuesta_correcta: huecos.map(h => ({
        respuesta: h.respuesta,
        alternativas: h.respuestasAlternativas,
        pista: h.pistaEspecifica
      })),
      retroalimentacion: {
        correcto: "¡Excelente! Has completado correctamente todos los espacios.",
        incorrecto: "Revisa tus respuestas. Algunos espacios no están correctos."
      },
      pista: pista.trim() || undefined,
      puntos: puntos,
      orden: actividadEditar?.orden || 0,
      tiempo_limite: undefined,
      multimedia_id: undefined
    }

    onGuardar(actividad)
    toast.success(actividadEditar ? "Actividad actualizada" : "Actividad creada")
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Previsualización */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg">Previsualización</CardTitle>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setMostrarPrevisualizacion(!mostrarPrevisualizacion)}
            >
              {mostrarPrevisualizacion ? <EyeOff className="h-4 w-4 mr-2" /> : <Eye className="h-4 w-4 mr-2" />}
              {mostrarPrevisualizacion ? "Ocultar" : "Mostrar"}
            </Button>
          </div>
        </CardHeader>
        {mostrarPrevisualizacion && (
          <CardContent>
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm font-medium mb-2">Así verá el estudiante:</p>
              <p className="text-lg">{generarPrevisualizacion()}</p>
              <div className="mt-2 text-xs text-muted-foreground">
                {huecos.length} espacio{huecos.length !== 1 ? 's' : ''} en blanco
              </div>
            </div>
          </CardContent>
        )}
      </Card>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Columna Izquierda */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="oracion">Oración con espacios en blanco *</Label>
            <Textarea
              id="oracion"
              placeholder="Ej: El ____ es un animal muy ____ que vive en la ____."
              value={oracion}
              onChange={(e) => setOracion(e.target.value)}
              rows={3}
              required
            />
            <p className="text-xs text-muted-foreground">
              💡 Usa <strong>____</strong> (cuatro guiones bajos) para cada espacio en blanco
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="instrucciones">Instrucciones *</Label>
            <Textarea
              id="instrucciones"
              placeholder="Instrucciones para el estudiante..."
              value={instrucciones}
              onChange={(e) => setInstrucciones(e.target.value)}
              rows={2}
              required
            />
          </div>

          <div className="space-y-2">
            <Label>Configuración de evaluación</Label>
            <div className="space-y-3 p-3 border rounded-lg">
              <div className="flex items-center justify-between">
                <Label htmlFor="mayusculas" className="text-sm">Permitir mayúsculas/minúsculas</Label>
                <Switch
                  id="mayusculas"
                  checked={permiteMayusculas}
                  onCheckedChange={setPermiteMayusculas}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="acentos" className="text-sm">Permitir acentos</Label>
                <Switch
                  id="acentos"
                  checked={permiteAcentos}
                  onCheckedChange={setPermiteAcentos}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Columna Derecha */}
        <div className="space-y-4">
          <div className="space-y-3">
            <Label>Gestión de Huecos</Label>
            
            {/* Agregar nuevo hueco */}
            <div className="space-y-2">
              <Label>Agregar nuevo hueco</Label>
              <div className="flex gap-2">
                <Input
                  placeholder="Palabra correcta para el hueco"
                  value={palabraHueco}
                  onChange={(e) => setPalabraHueco(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), agregarHueco())}
                />
                <Button type="button" onClick={agregarHueco} size="icon">
                  <Plus className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Lista de huecos */}
            {huecos.length > 0 && (
              <div className="space-y-3 mt-4">
                <Label>Huecos definidos ({huecos.length})</Label>
                {huecos.map((hueco, index) => (
                  <Card key={hueco.id} className={`${huecoEditando?.id === hueco.id ? 'border-primary' : ''}`}>
                    <CardContent className="p-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-2">
                            <Badge variant="secondary">Hueco #{index + 1}</Badge>
                            <span className="font-mono text-sm bg-primary/10 px-2 py-1 rounded">
                              {hueco.respuesta}
                            </span>
                          </div>
                          
                          {/* Respuestas alternativas */}
                          <div className="space-y-2 mt-2">
                            <Label className="text-xs">Respuestas alternativas:</Label>
                            <div className="flex gap-2">
                              <Input
                                placeholder="Agregar respuesta alternativa"
                                value={huecoEditando?.id === hueco.id ? respuestaAlternativa : ''}
                                onChange={(e) => setRespuestaAlternativa(e.target.value)}
                                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), agregarRespuestaAlternativa(hueco.id))}
                              />
                              <Button
                                type="button"
                                onClick={() => agregarRespuestaAlternativa(hueco.id)}
                                size="sm"
                                variant="outline"
                              >
                                <Plus className="h-3 w-3" />
                              </Button>
                            </div>
                            
                            {hueco.respuestasAlternativas.length > 0 && (
                              <div className="flex flex-wrap gap-1">
                                {hueco.respuestasAlternativas.map((alt, altIndex) => (
                                  <Badge key={altIndex} variant="outline" className="text-xs">
                                    {alt}
                                    <button
                                      type="button"
                                      onClick={() => eliminarRespuestaAlternativa(hueco.id, altIndex)}
                                      className="ml-1"
                                    >
                                      <X className="h-3 w-3" />
                                    </button>
                                  </Badge>
                                ))}
                              </div>
                            )}
                          </div>

                          {/* Pista específica */}
                          <div className="space-y-1 mt-2">
                            <Label className="text-xs">Pista para este hueco:</Label>
                            <Input
                              placeholder="Pista específica..."
                              value={hueco.pistaEspecifica || ''}
                              onChange={(e) => actualizarPistaEspecifica(hueco.id, e.target.value)}
                            />
                          </div>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => eliminarHueco(hueco.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="pista">Pista general (Opcional)</Label>
            <Input
              id="pista"
              placeholder="Pista general para toda la actividad..."
              value={pista}
              onChange={(e) => setPista(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="puntos">Puntos</Label>
            <Input
              id="puntos"
              type="number"
              min="1"
              max="100"
              value={puntos}
              onChange={(e) => setPuntos(parseInt(e.target.value) || 10)}
            />
          </div>
        </div>
      </div>

      <div className="flex gap-3 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button type="submit" className="flex-1" disabled={huecos.length === 0}>
          <Save className="mr-2 h-4 w-4" />
          {actividadEditar ? 'Actualizar' : 'Crear'} Actividad
        </Button>
      </div>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/activity-forms/matching-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/matching-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Save, X, Plus, Trash2, Eye, EyeOff, Shuffle } from "lucide-react"
import { toast } from "sonner"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { type Actividad } from "@/lib/api"

interface ActivityFormProps {
  onGuardar: (actividad: Actividad) => void
  onCancelar: () => void
  actividadEditar?: Actividad | null
}

interface Par {
  id: string
  izquierda: string
  derecha: string
  pista?: string
  grupo?: string
}

export function MatchingForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [titulo, setTitulo] = useState("")
  const [instrucciones, setInstrucciones] = useState("Empareja los elementos de la columna izquierda con los de la derecha.")
  const [pares, setPares] = useState<Par[]>([])
  const [izquierda, setIzquierda] = useState("")
  const [derecha, setDerecha] = useState("")
  const [grupo, setGrupo] = useState("")
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(10)
  const [mostrarPrevisualizacion, setMostrarPrevisualizacion] = useState(false)
  const [mezclarOpciones, setMezclarOpciones] = useState(true)
  const [permiteArrastrar, setPermiteArrastrar] = useState(true)
  const [modoGrupos, setModoGrupos] = useState(false)

  useEffect(() => {
    if (actividadEditar) {
      setTitulo(actividadEditar.pregunta || "")
      setInstrucciones(actividadEditar.instrucciones || "Empareja los elementos de la columna izquierda con los de la derecha.")
      setPares(actividadEditar.opciones?.pares || [])
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 10)
      setMezclarOpciones(actividadEditar.opciones?.mezclarOpciones ?? true)
      setPermiteArrastrar(actividadEditar.opciones?.permiteArrastrar ?? true)
      setModoGrupos(actividadEditar.opciones?.modoGrupos ?? false)
    }
  }, [actividadEditar])

  const generarId = () => Math.random().toString(36).substr(2, 9)

  const agregarPar = () => {
    if (!izquierda.trim() || !derecha.trim()) {
      toast.error("Completa ambos campos del par")
      return
    }

    const nuevoPar: Par = {
      id: generarId(),
      izquierda: izquierda.trim(),
      derecha: derecha.trim(),
      pista: pista.trim() || undefined,
      grupo: grupo.trim() || undefined
    }

    setPares([...pares, nuevoPar])
    setIzquierda("")
    setDerecha("")
    setPista("")
    setGrupo("")
    toast.success("Par agregado")
  }

  const eliminarPar = (id: string) => {
    setPares(pares.filter(par => par.id !== id))
  }

  const mezclarPares = () => {
    const paresMezclados = [...pares]
      .map(par => ({ ...par, id: generarId() })) // Nuevos IDs al mezclar
      .sort(() => Math.random() - 0.5)
    setPares(paresMezclados)
    toast.success("Pares mezclados")
  }

  const gruposUnicos = [...new Set(pares.map(par => par.grupo).filter(Boolean))]

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!titulo.trim()) {
      toast.error("Agrega un título para la actividad")
      return
    }

    if (pares.length < 2) {
      toast.error("Debes agregar al menos 2 pares")
      return
    }

    if (modoGrupos && gruposUnicos.length < 2) {
      toast.error("En modo grupos, debes tener al menos 2 grupos diferentes")
      return
    }

    const actividad: Actividad = {
      tipo: 'matching',
      pregunta: titulo.trim(),
      instrucciones: instrucciones.trim(),
      opciones: {
        pares: pares,
        mezclarOpciones,
        permiteArrastrar,
        modoGrupos,
        grupos: modoGrupos ? gruposUnicos : undefined
      },
      respuesta_correcta: pares.map((par, index) => ({
        izquierda: par.izquierda,
        derecha: par.derecha,
        grupo: par.grupo,
        id: par.id
      })),
      retroalimentacion: {
        correcto: "¡Excelente! Has emparejado correctamente todos los elementos.",
        incorrecto: "Algunos emparejamientos no son correctos. Revísalos nuevamente."
      },
      pista: pista.trim() || undefined,
      puntos: puntos,
      orden: actividadEditar?.orden || 0,
      tiempo_limite: undefined,
      multimedia_id: undefined
    }

    onGuardar(actividad)
    toast.success(actividadEditar ? "Actividad actualizada" : "Actividad creada")
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Previsualización */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg">Previsualización</CardTitle>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setMostrarPrevisualizacion(!mostrarPrevisualizacion)}
            >
              {mostrarPrevisualizacion ? <EyeOff className="h-4 w-4 mr-2" /> : <Eye className="h-4 w-4 mr-2" />}
              {mostrarPrevisualizacion ? "Ocultar" : "Mostrar"}
            </Button>
          </div>
        </CardHeader>
        {mostrarPrevisualizacion && (
          <CardContent>
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm font-medium mb-2">Así verá el estudiante:</p>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <div className="font-semibold mb-2">Columna A</div>
                  {pares.slice(0, 3).map((par, i) => (
                    <div key={i} className="p-2 border-b">{par.izquierda}</div>
                  ))}
                  {pares.length > 3 && <div className="p-2 text-muted-foreground">... y {pares.length - 3} más</div>}
                </div>
                <div>
                  <div className="font-semibold mb-2">Columna B</div>
                  {pares.slice(0, 3).map((par, i) => (
                    <div key={i} className="p-2 border-b">{mezclarOpciones ? "¿?" : par.derecha}</div>
                  ))}
                  {pares.length > 3 && <div className="p-2 text-muted-foreground">... y {pares.length - 3} más</div>}
                </div>
              </div>
            </div>
          </CardContent>
        )}
      </Card>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Columna Izquierda */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="titulo">Título de la actividad *</Label>
            <Input
              id="titulo"
              placeholder="Ej: Empareja países con sus capitales"
              value={titulo}
              onChange={(e) => setTitulo(e.target.value)}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="instrucciones">Instrucciones *</Label>
            <Textarea
              id="instrucciones"
              placeholder="Instrucciones detalladas para el estudiante..."
              value={instrucciones}
              onChange={(e) => setInstrucciones(e.target.value)}
              rows={3}
              required
            />
          </div>

          <div className="space-y-2">
            <Label>Configuración de la actividad</Label>
            <div className="space-y-3 p-3 border rounded-lg">
              <div className="flex items-center justify-between">
                <Label htmlFor="mezclar" className="text-sm">Mezclar opciones</Label>
                <Switch
                  id="mezclar"
                  checked={mezclarOpciones}
                  onCheckedChange={setMezclarOpciones}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="arrastrar" className="text-sm">Permitir arrastrar</Label>
                <Switch
                  id="arrastrar"
                  checked={permiteArrastrar}
                  onCheckedChange={setPermiteArrastrar}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="grupos" className="text-sm">Modo grupos</Label>
                <Switch
                  id="grupos"
                  checked={modoGrupos}
                  onCheckedChange={setModoGrupos}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Columna Derecha */}
        <div className="space-y-4">
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label>Pares a emparejar ({pares.length})</Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={mezclarPares}
                disabled={pares.length < 2}
              >
                <Shuffle className="h-4 w-4 mr-2" />
                Mezclar
              </Button>
            </div>

            {/* Formulario para agregar nuevo par */}
            <Card>
              <CardContent className="p-4 space-y-3">
                <div className="grid grid-cols-2 gap-2">
                  <div className="space-y-2">
                    <Label className="text-xs">Columna izquierda *</Label>
                    <Input
                      placeholder="Ej: Francia"
                      value={izquierda}
                      onChange={(e) => setIzquierda(e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label className="text-xs">Columna derecha *</Label>
                    <Input
                      placeholder="Ej: París"
                      value={derecha}
                      onChange={(e) => setDerecha(e.target.value)}
                    />
                  </div>
                </div>
                
                {modoGrupos && (
                  <div className="space-y-2">
                    <Label className="text-xs">Grupo (opcional)</Label>
                    <Input
                      placeholder="Ej: Europa"
                      value={grupo}
                      onChange={(e) => setGrupo(e.target.value)}
                    />
                  </div>
                )}

                <div className="space-y-2">
                  <Label className="text-xs">Pista específica (opcional)</Label>
                  <Input
                    placeholder="Pista para este par específico..."
                    value={pista}
                    onChange={(e) => setPista(e.target.value)}
                  />
                </div>

                <Button type="button" onClick={agregarPar} className="w-full" variant="outline">
                  <Plus className="h-4 w-4 mr-2" />
                  Agregar Par
                </Button>
              </CardContent>
            </Card>

            {/* Lista de pares existentes */}
            {pares.length > 0 && (
              <div className="space-y-3">
                <Label>Pares agregados:</Label>
                {pares.map((par, index) => (
                  <Card key={par.id}>
                    <CardContent className="p-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <Badge variant="secondary">#{index + 1}</Badge>
                            <div className="grid grid-cols-2 gap-4 flex-1">
                              <div className="font-medium">{par.izquierda}</div>
                              <div className="text-muted-foreground">↔ {par.derecha}</div>
                            </div>
                          </div>
                          
                          <div className="flex gap-2 text-xs">
                            {par.grupo && (
                              <Badge variant="outline">Grupo: {par.grupo}</Badge>
                            )}
                            {par.pista && (
                              <Badge variant="outline">💡 {par.pista}</Badge>
                            )}
                          </div>
                        </div>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => eliminarPar(par.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </div>

          {modoGrupos && gruposUnicos.length > 0 && (
            <div className="space-y-2">
              <Label>Grupos definidos:</Label>
              <div className="flex flex-wrap gap-2">
                {gruposUnicos.map((grupo, index) => (
                  <Badge key={index} variant="secondary">
                    {grupo}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="pistaGeneral">Pista general (Opcional)</Label>
            <Input
              id="pistaGeneral"
              placeholder="Pista general para toda la actividad..."
              value={pista}
              onChange={(e) => setPista(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="puntos">Puntos</Label>
            <Input
              id="puntos"
              type="number"
              min="1"
              max="100"
              value={puntos}
              onChange={(e) => setPuntos(parseInt(e.target.value) || 10)}
            />
          </div>
        </div>
      </div>

      <div className="flex gap-3 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button type="submit" className="flex-1" disabled={pares.length < 2}>
          <Save className="mr-2 h-4 w-4" />
          {actividadEditar ? 'Actualizar' : 'Crear'} Actividad
        </Button>
      </div>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/activity-forms/multiple-choice-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/multiple-choice-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Save, X, Plus, Trash2, Eye, EyeOff, Shuffle } from "lucide-react"
import { toast } from "sonner"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { type Actividad } from "@/lib/api"

interface ActivityFormProps {
  onGuardar: (actividad: Actividad) => void
  onCancelar: () => void
  actividadEditar?: Actividad | null
}

interface Opcion {
  id: string
  texto: string
  retroalimentacion?: string
  esCorrecta: boolean
}

export function MultipleChoiceForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [pregunta, setPregunta] = useState("")
  const [instrucciones, setInstrucciones] = useState("Selecciona la respuesta correcta.")
  const [opciones, setOpciones] = useState<Opcion[]>([
    { id: '1', texto: "", retroalimentacion: "", esCorrecta: false },
    { id: '2', texto: "", retroalimentacion: "", esCorrecta: false },
    { id: '3', texto: "", retroalimentacion: "", esCorrecta: false },
    { id: '4', texto: "", retroalimentacion: "", esCorrecta: false }
  ])
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(10)
  const [mostrarPrevisualizacion, setMostrarPrevisualizacion] = useState(false)
  const [mezclarOpciones, setMezclarOpciones] = useState(true)
  const [permiteMultiple, setPermiteMultiple] = useState(false)
  const [explicacion, setExplicacion] = useState("")

  useEffect(() => {
    if (actividadEditar) {
      setPregunta(actividadEditar.pregunta || "")
      setInstrucciones(actividadEditar.instrucciones || "Selecciona la respuesta correcta.")
      
      // Procesar opciones existentes
      if (actividadEditar.opciones?.opciones) {
        const opcionesExistentes = actividadEditar.opciones.opciones.map((op: string, index: number) => ({
          id: (index + 1).toString(),
          texto: op,
          retroalimentacion: "",
          esCorrecta: index === actividadEditar.respuesta_correcta
        }))
        setOpciones(opcionesExistentes)
      }
      
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 10)
      setMezclarOpciones(actividadEditar.opciones?.mezclarOpciones ?? true)
      setPermiteMultiple(actividadEditar.opciones?.permiteMultiple ?? false)
      setExplicacion(actividadEditar.retroalimentacion?.explicacion || "")
    }
  }, [actividadEditar])

  const generarId = () => Math.random().toString(36).substr(2, 9)

  const agregarOpcion = () => {
    if (opciones.length >= 6) {
      toast.error("Máximo 6 opciones permitidas")
      return
    }
    
    const nuevaOpcion: Opcion = {
      id: generarId(),
      texto: "",
      retroalimentacion: "",
      esCorrecta: false
    }
    
    setOpciones([...opciones, nuevaOpcion])
  }

  const eliminarOpcion = (id: string) => {
    if (opciones.length <= 2) {
      toast.error("Debe haber al menos 2 opciones")
      return
    }
    
    const opcionAEliminar = opciones.find(op => op.id === id)
    if (opcionAEliminar?.esCorrecta) {
      toast.error("No puedes eliminar la opción correcta. Cambia primero la respuesta correcta.")
      return
    }
    
    setOpciones(opciones.filter(op => op.id !== id))
  }

  const actualizarOpcion = (id: string, campo: keyof Opcion, valor: string | boolean) => {
    setOpciones(opciones.map(op => 
      op.id === id ? { ...op, [campo]: valor } : op
    ))
  }

  const marcarComoCorrecta = (id: string) => {
    setOpciones(opciones.map(op => ({
      ...op,
      esCorrecta: op.id === id
    })))
  }

  const mezclarOpcionesLista = () => {
    const opcionesMezcladas = [...opciones]
      .map(op => ({ ...op, id: generarId() }))
      .sort(() => Math.random() - 0.5)
    setOpciones(opcionesMezcladas)
    toast.success("Opciones mezcladas")
  }

  const opcionesValidas = opciones.filter(op => op.texto.trim())
  const opcionCorrecta = opciones.find(op => op.esCorrecta)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!pregunta.trim()) {
      toast.error("La pregunta es obligatoria")
      return
    }

    if (opcionesValidas.length < 2) {
      toast.error("Debes agregar al menos 2 opciones válidas")
      return
    }

    if (!opcionCorrecta) {
      toast.error("Debes seleccionar una respuesta correcta")
      return
    }

    const indiceCorrecto = opciones.findIndex(op => op.id === opcionCorrecta.id)

    const actividad: Actividad = {
      tipo: 'multiple_choice',
      pregunta: pregunta.trim(),
      instrucciones: instrucciones.trim(),
      opciones: {
        opciones: opcionesValidas.map(op => op.texto),
        mezclarOpciones,
        permiteMultiple,
        retroalimentaciones: opcionesValidas.reduce((acc, op, index) => {
          if (op.retroalimentacion) {
            acc[index] = op.retroalimentacion
          }
          return acc
        }, {} as Record<number, string>)
      },
      respuesta_correcta: indiceCorrecto,
      retroalimentacion: {
        correcto: "¡Correcto! Has seleccionado la respuesta adecuada.",
        incorrecto: "La respuesta seleccionada no es correcta.",
        explicacion: explicacion.trim() || undefined
      },
      pista: pista.trim() || undefined,
      puntos: puntos,
      orden: actividadEditar?.orden || 0,
      tiempo_limite: undefined,
      multimedia_id: undefined
    }

    onGuardar(actividad)
    toast.success(actividadEditar ? "Actividad actualizada" : "Actividad creada")
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Previsualización */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg">Previsualización</CardTitle>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setMostrarPrevisualizacion(!mostrarPrevisualizacion)}
            >
              {mostrarPrevisualizacion ? <EyeOff className="h-4 w-4 mr-2" /> : <Eye className="h-4 w-4 mr-2" />}
              {mostrarPrevisualizacion ? "Ocultar" : "Mostrar"}
            </Button>
          </div>
        </CardHeader>
        {mostrarPrevisualizacion && (
          <CardContent>
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm font-medium mb-2">Así verá el estudiante:</p>
              <p className="font-medium mb-3">{pregunta || "¿Pregunta?"}</p>
              <div className="space-y-2">
                {opcionesValidas.slice(0, 4).map((opcion, i) => (
                  <div key={i} className="flex items-center gap-2 p-2 border rounded">
                    <input 
                      type={permiteMultiple ? "checkbox" : "radio"} 
                      name="preview" 
                      disabled 
                      checked={opcion.esCorrecta}
                      onChange={() => {}}
                    />
                    <label className="flex-1">{opcion.texto}</label>
                    {opcion.esCorrecta && (
                      <Badge variant="default" className="text-xs">Correcta</Badge>
                    )}
                  </div>
                ))}
                {opcionesValidas.length > 4 && (
                  <div className="text-center text-muted-foreground text-sm">
                    ... y {opcionesValidas.length - 4} opciones más
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        )}
      </Card>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Columna Izquierda */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="pregunta">Pregunta *</Label>
            <Textarea
              id="pregunta"
              placeholder="Ej: ¿Cuál es la capital de Francia?"
              value={pregunta}
              onChange={(e) => setPregunta(e.target.value)}
              rows={3}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="instrucciones">Instrucciones *</Label>
            <Textarea
              id="instrucciones"
              placeholder="Instrucciones detalladas para el estudiante..."
              value={instrucciones}
              onChange={(e) => setInstrucciones(e.target.value)}
              rows={2}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="explicacion">Explicación (Opcional)</Label>
            <Textarea
              id="explicacion"
              placeholder="Explicación que verá el estudiante después de responder..."
              value={explicacion}
              onChange={(e) => setExplicacion(e.target.value)}
              rows={2}
            />
          </div>

          <div className="space-y-2">
            <Label>Configuración</Label>
            <div className="space-y-3 p-3 border rounded-lg">
              <div className="flex items-center justify-between">
                <Label htmlFor="mezclar" className="text-sm">Mezclar opciones</Label>
                <Switch
                  id="mezclar"
                  checked={mezclarOpciones}
                  onCheckedChange={setMezclarOpciones}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="multiple" className="text-sm">Permitir múltiple selección</Label>
                <Switch
                  id="multiple"
                  checked={permiteMultiple}
                  onCheckedChange={setPermiteMultiple}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Columna Derecha */}
        <div className="space-y-4">
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label>
                Opciones de respuesta ({opcionesValidas.length})
                {opcionCorrecta && (
                  <Badge variant="default" className="ml-2">
                    ✓ Correcta seleccionada
                  </Badge>
                )}
              </Label>
              <div className="flex gap-2">
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={mezclarOpcionesLista}
                  disabled={opcionesValidas.length < 2}
                >
                  <Shuffle className="h-4 w-4 mr-2" />
                  Mezclar
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={agregarOpcion}
                  disabled={opciones.length >= 6}
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Agregar
                </Button>
              </div>
            </div>

            <div className="space-y-3">
              {opciones.map((opcion, index) => (
                <Card key={opcion.id} className={opcion.esCorrecta ? "border-green-500 bg-green-50 dark:bg-green-950/20" : ""}>
                  <CardContent className="p-3">
                    <div className="flex items-start gap-3">
                      <div className="flex items-center gap-2 mt-1">
                        <input
                          type={permiteMultiple ? "checkbox" : "radio"}
                          checked={opcion.esCorrecta}
                          onChange={() => marcarComoCorrecta(opcion.id)}
                          className="text-green-600"
                        />
                      </div>
                      <div className="flex-1 space-y-2">
                        <Input
                          placeholder={`Opción ${index + 1}`}
                          value={opcion.texto}
                          onChange={(e) => actualizarOpcion(opcion.id, 'texto', e.target.value)}
                          className="flex-1"
                        />
                        <Input
                          placeholder="Retroalimentación específica (opcional)"
                          value={opcion.retroalimentacion || ''}
                          onChange={(e) => actualizarOpcion(opcion.id, 'retroalimentacion', e.target.value)}
                          className="flex-1 text-xs"
                        />
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => eliminarOpcion(opcion.id)}
                        disabled={opciones.length <= 2 || opcion.esCorrecta}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                    {opcion.esCorrecta && (
                      <div className="mt-2 flex items-center gap-2 text-green-600 text-xs">
                        <Badge variant="default">Respuesta correcta</Badge>
                        <span>Esta opción se marcará como la respuesta correcta</span>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="pista">Pista general (Opcional)</Label>
            <Input
              id="pista"
              placeholder="Pista para ayudar al estudiante..."
              value={pista}
              onChange={(e) => setPista(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="puntos">Puntos</Label>
            <Input
              id="puntos"
              type="number"
              min="1"
              max="100"
              value={puntos}
              onChange={(e) => setPuntos(parseInt(e.target.value) || 10)}
            />
          </div>
        </div>
      </div>

      <div className="flex gap-3 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button 
          type="submit" 
          className="flex-1" 
          disabled={opcionesValidas.length < 2 || !opcionCorrecta}
        >
          <Save className="mr-2 h-4 w-4" />
          {actividadEditar ? 'Actualizar' : 'Crear'} Actividad
        </Button>
      </div>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/activity-forms/translation-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/translation-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Save, X, Plus, Trash2, Eye, EyeOff, ArrowRight, Languages } from "lucide-react"
import { toast } from "sonner"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { type Actividad } from "@/lib/api"

interface ActivityFormProps {
  onGuardar: (actividad: Actividad) => void
  onCancelar: () => void
  actividadEditar?: Actividad | null
}

interface TraduccionAceptada {
  id: string
  texto: string
  variante?: string
}

const IDIOMAS = [
  { value: "ingles", label: "🇬🇧 Inglés", nativo: "English" },
  { value: "espanol", label: "🇪🇸 Español", nativo: "Español" },
  { value: "frances", label: "🇫🇷 Francés", nativo: "Français" },
  { value: "aleman", label: "🇩🇪 Alemán", nativo: "Deutsch" },
  { value: "italiano", label: "🇮🇹 Italiano", nativo: "Italiano" },
  { value: "portugues", label: "🇵🇹 Portugués", nativo: "Português" },
  { value: "chino", label: "🇨🇳 Chino", nativo: "中文" },
  { value: "japones", label: "🇯🇵 Japonés", nativo: "日本語" },
  { value: "ruso", label: "🇷🇺 Ruso", nativo: "Русский" },
  { value: "arabe", label: "🇸🇦 Árabe", nativo: "العربية" }
]

export function TranslationForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [textoOrigen, setTextoOrigen] = useState("")
  const [idiomaOrigen, setIdiomaOrigen] = useState("ingles")
  const [traduccionesAceptadas, setTraduccionesAceptadas] = useState<TraduccionAceptada[]>([
    { id: '1', texto: "", variante: "principal" }
  ])
  const [idiomaDestino, setIdiomaDestino] = useState("espanol")
  const [instrucciones, setInstrucciones] = useState("Traduce la siguiente frase.")
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(15)
  const [mostrarPrevisualizacion, setMostrarPrevisualizacion] = useState(false)
  const [permiteMayusculas, setPermiteMayusculas] = useState(true)
  const [permiteAcentos, setPermiteAcentos] = useState(true)
  const [permitePuntuacion, setPermitePuntuacion] = useState(true)
  const [dificultad, setDificultad] = useState<"facil" | "medio" | "dificil">("medio")
  const [contexto, setContexto] = useState("")

  useEffect(() => {
    if (actividadEditar) {
      setTextoOrigen(actividadEditar.pregunta || "")
      setIdiomaOrigen(actividadEditar.opciones?.idioma_origen || "ingles")
      
      // Procesar traducciones aceptadas
      if (actividadEditar.opciones?.traducciones_aceptadas) {
        setTraduccionesAceptadas(actividadEditar.opciones.traducciones_aceptadas)
      } else if (actividadEditar.respuesta_correcta) {
        setTraduccionesAceptadas([{ id: '1', texto: actividadEditar.respuesta_correcta, variante: "principal" }])
      }
      
      setIdiomaDestino(actividadEditar.opciones?.idioma_destino || "espanol")
      setInstrucciones(actividadEditar.instrucciones || "Traduce la siguiente frase.")
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 15)
      setPermiteMayusculas(actividadEditar.opciones?.permiteMayusculas ?? true)
      setPermiteAcentos(actividadEditar.opciones?.permiteAcentos ?? true)
      setPermitePuntuacion(actividadEditar.opciones?.permitePuntuacion ?? true)
      setDificultad(actividadEditar.opciones?.dificultad || "medio")
      setContexto(actividadEditar.opciones?.contexto || "")
    }
  }, [actividadEditar])

  const generarId = () => Math.random().toString(36).substr(2, 9)

  const agregarTraduccion = () => {
    if (traduccionesAceptadas.length >= 5) {
      toast.error("Máximo 5 traducciones aceptadas")
      return
    }
    
    setTraduccionesAceptadas([
      ...traduccionesAceptadas, 
      { id: generarId(), texto: "", variante: "alternativa" }
    ])
  }

  const eliminarTraduccion = (id: string) => {
    if (traduccionesAceptadas.length <= 1) {
      toast.error("Debe haber al menos una traducción aceptada")
      return
    }
    
    setTraduccionesAceptadas(traduccionesAceptadas.filter(t => t.id !== id))
  }

  const actualizarTraduccion = (id: string, campo: keyof TraduccionAceptada, valor: string) => {
    setTraduccionesAceptadas(traduccionesAceptadas.map(t => 
      t.id === id ? { ...t, [campo]: valor } : t
    ))
  }

  const traduccionesValidas = traduccionesAceptadas.filter(t => t.texto.trim())

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!textoOrigen.trim()) {
      toast.error("Escribe el texto a traducir")
      return
    }

    if (traduccionesValidas.length === 0) {
      toast.error("Debes agregar al menos una traducción aceptada")
      return
    }

    if (idiomaOrigen === idiomaDestino) {
      toast.error("Los idiomas deben ser diferentes")
      return
    }

    const actividad: Actividad = {
      tipo: 'translation',
      pregunta: textoOrigen.trim(),
      instrucciones: instrucciones.trim(),
      opciones: {
        idioma_origen: idiomaOrigen,
        idioma_destino: idiomaDestino,
        traducciones_aceptadas: traduccionesValidas,
        permiteMayusculas,
        permiteAcentos,
        permitePuntuacion,
        dificultad,
        contexto: contexto.trim() || undefined
      },
      respuesta_correcta: traduccionesValidas[0].texto.trim(),
      retroalimentacion: {
        correcto: "¡Traducción correcta!",
        incorrecto: "La traducción no coincide con ninguna de las respuestas aceptadas.",
        explicacion: `Traducción correcta: "${traduccionesValidas[0].texto}"`
      },
      pista: pista.trim() || undefined,
      puntos: puntos,
      orden: actividadEditar?.orden || 0,
      tiempo_limite: undefined,
      multimedia_id: undefined
    }

    onGuardar(actividad)
    toast.success(actividadEditar ? "Actividad actualizada" : "Actividad creada")
  }

  const idiomaOrigenInfo = IDIOMAS.find(i => i.value === idiomaOrigen)
  const idiomaDestinoInfo = IDIOMAS.find(i => i.value === idiomaDestino)

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Previsualización */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg">Previsualización</CardTitle>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setMostrarPrevisualizacion(!mostrarPrevisualizacion)}
            >
              {mostrarPrevisualizacion ? <EyeOff className="h-4 w-4 mr-2" /> : <Eye className="h-4 w-4 mr-2" />}
              {mostrarPrevisualizacion ? "Ocultar" : "Mostrar"}
            </Button>
          </div>
        </CardHeader>
        {mostrarPrevisualizacion && (
          <CardContent>
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm font-medium mb-2">Así verá el estudiante:</p>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Languages className="h-4 w-4" />
                    <span className="font-medium">{idiomaOrigenInfo?.label} → {idiomaDestinoInfo?.label}</span>
                  </div>
                  <Badge variant={dificultad === "facil" ? "default" : dificultad === "medio" ? "secondary" : "destructive"}>
                    {dificultad}
                  </Badge>
                </div>
                <div className="p-3 bg-background rounded border">
                  <p className="font-medium mb-1">Texto a traducir:</p>
                  <p>{textoOrigen || "Texto de ejemplo"}</p>
                </div>
                {contexto && (
                  <div className="p-2 bg-blue-50 dark:bg-blue-950/20 rounded text-sm">
                    <p className="font-medium mb-1">📝 Contexto:</p>
                    <p>{contexto}</p>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        )}
      </Card>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Columna Izquierda */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="instrucciones">Instrucciones *</Label>
            <Textarea
              id="instrucciones"
              placeholder="Instrucciones detalladas para el estudiante..."
              value={instrucciones}
              onChange={(e) => setInstrucciones(e.target.value)}
              rows={2}
              required
            />
          </div>

          <div className="grid grid-cols-2 gap-3">
            <div className="space-y-2">
              <Label>Idioma Origen</Label>
              <Select value={idiomaOrigen} onValueChange={setIdiomaOrigen}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {IDIOMAS.map(idioma => (
                    <SelectItem key={idioma.value} value={idioma.value}>
                      {idioma.label} ({idioma.nativo})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Idioma Destino</Label>
              <Select value={idiomaDestino} onValueChange={setIdiomaDestino}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {IDIOMAS.map(idioma => (
                    <SelectItem key={idioma.value} value={idioma.value}>
                      {idioma.label} ({idioma.nativo})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="textoOrigen">Texto a traducir *</Label>
            <Textarea
              id="textoOrigen"
              placeholder="Ej: Hello, how are you today?"
              value={textoOrigen}
              onChange={(e) => setTextoOrigen(e.target.value)}
              rows={3}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="contexto">Contexto (Opcional)</Label>
            <Textarea
              id="contexto"
              placeholder="Ej: Esta frase se usa en un contexto formal..."
              value={contexto}
              onChange={(e) => setContexto(e.target.value)}
              rows={2}
            />
          </div>
        </div>

        {/* Columna Derecha */}
        <div className="space-y-4">
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label>
                Traducciones aceptadas ({traduccionesValidas.length})
                <Badge variant="secondary" className="ml-2">
                  {permiteMayusculas ? "May/Min" : "Sens. May"} | 
                  {permiteAcentos ? " Acentos" : " Sin acentos"} |
                  {permitePuntuacion ? " Puntuación" : " Sin punt."}
                </Badge>
              </Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={agregarTraduccion}
                disabled={traduccionesAceptadas.length >= 5}
              >
                <Plus className="h-4 w-4 mr-2" />
                Agregar
              </Button>
            </div>

            {traduccionesAceptadas.map((traduccion, index) => (
              <Card key={traduccion.id}>
                <CardContent className="p-3">
                  <div className="flex items-start gap-2">
                    <Badge 
                      variant={index === 0 ? "default" : "outline"} 
                      className="mt-2"
                    >
                      {index === 0 ? "Principal" : `Alt. ${index}`}
                    </Badge>
                    <div className="flex-1">
                      <Input
                        placeholder="Traducción aceptada"
                        value={traduccion.texto}
                        onChange={(e) => actualizarTraduccion(traduccion.id, 'texto', e.target.value)}
                      />
                    </div>
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => eliminarTraduccion(traduccion.id)}
                      disabled={traduccionesAceptadas.length <= 1}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                  {index === 0 && (
                    <p className="text-xs text-muted-foreground mt-1">
                      Esta será la traducción principal mostrada como correcta
                    </p>
                  )}
                </CardContent>
              </Card>
            ))}
            <p className="text-xs text-muted-foreground">
              💡 El estudiante podrá escribir cualquiera de estas traducciones y se considerará correcta.
            </p>
          </div>

          <div className="space-y-2">
            <Label>Configuración de evaluación</Label>
            <div className="space-y-3 p-3 border rounded-lg">
              <div className="flex items-center justify-between">
                <Label htmlFor="mayusculas" className="text-sm">Permitir mayúsculas/minúsculas</Label>
                <Switch
                  id="mayusculas"
                  checked={permiteMayusculas}
                  onCheckedChange={setPermiteMayusculas}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="acentos" className="text-sm">Permitir acentos</Label>
                <Switch
                  id="acentos"
                  checked={permiteAcentos}
                  onCheckedChange={setPermiteAcentos}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="puntuacion" className="text-sm">Permitir puntuación diferente</Label>
                <Switch
                  id="puntuacion"
                  checked={permitePuntuacion}
                  onCheckedChange={setPermitePuntuacion}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="dificultad" className="text-sm">Dificultad</Label>
                <Select value={dificultad} onValueChange={(v: "facil" | "medio" | "dificil") => setDificultad(v)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="facil">Fácil</SelectItem>
                    <SelectItem value="medio">Medio</SelectItem>
                    <SelectItem value="dificil">Difícil</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="pista">Pista (Opcional)</Label>
            <Input
              id="pista"
              placeholder="Ej: Recuerda usar el pronombre correcto..."
              value={pista}
              onChange={(e) => setPista(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="puntos">Puntos</Label>
            <Input
              id="puntos"
              type="number"
              min="1"
              max="100"
              value={puntos}
              onChange={(e) => setPuntos(parseInt(e.target.value) || 15)}
            />
          </div>
        </div>
      </div>

      <div className="flex gap-3 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button 
          type="submit" 
          className="flex-1" 
          disabled={traduccionesValidas.length === 0}
        >
          <Save className="mr-2 h-4 w-4" />
          {actividadEditar ? 'Actualizar' : 'Crear'} Actividad
        </Button>
      </div>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/activity-forms/true-false-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/true-false-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Save, X, Eye, EyeOff, Check, X as XIcon } from "lucide-react"
import { toast } from "sonner"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { 
  Select, 
  SelectTrigger, 
  SelectValue, 
  SelectContent, 
  SelectItem 
} from "@/components/ui/select"
import { type Actividad } from "@/lib/api"

interface ActivityFormProps {
  onGuardar: (actividad: Actividad) => void
  onCancelar: () => void
  actividadEditar?: Actividad | null
}

export function TrueFalseForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [afirmacion, setAfirmacion] = useState("")
  const [instrucciones, setInstrucciones] = useState("Determina si la afirmación es verdadera o falsa.")
  const [respuestaCorrecta, setRespuestaCorrecta] = useState<boolean>(true)
  const [explicacionVerdadero, setExplicacionVerdadero] = useState("")
  const [explicacionFalso, setExplicacionFalso] = useState("")
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(10)
  const [mostrarPrevisualizacion, setMostrarPrevisualizacion] = useState(false)
  const [dificultad, setDificultad] = useState<"facil" | "medio" | "dificil">("medio")
  const [tema, setTema] = useState("")
  const [contexto, setContexto] = useState("")

  useEffect(() => {
    if (actividadEditar) {
      setAfirmacion(actividadEditar.pregunta || "")
      setInstrucciones(actividadEditar.instrucciones || "Determina si la afirmación es verdadera o falsa.")
      setRespuestaCorrecta(actividadEditar.respuesta_correcta || true)
      
      // Procesar retroalimentación
      if (actividadEditar.retroalimentacion) {
        if (typeof actividadEditar.retroalimentacion === 'object') {
          setExplicacionVerdadero(actividadEditar.retroalimentacion.explicacionVerdadero || "")
          setExplicacionFalso(actividadEditar.retroalimentacion.explicacionFalso || "")
        } else {
          // Para compatibilidad con versiones anteriores
          setExplicacionVerdadero(actividadEditar.retroalimentacion || "")
        }
      }
      
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 10)
      setDificultad(actividadEditar.opciones?.dificultad || "medio")
      setTema(actividadEditar.opciones?.tema || "")
      setContexto(actividadEditar.opciones?.contexto || "")
    }
  }, [actividadEditar])

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!afirmacion.trim()) {
      toast.error("La afirmación es obligatoria")
      return
    }

    const actividad: Actividad = {
      tipo: 'true_false',
      pregunta: afirmacion.trim(),
      instrucciones: instrucciones.trim(),
      opciones: {
        dificultad,
        tema: tema.trim() || undefined,
        contexto: contexto.trim() || undefined
      },
      respuesta_correcta: respuestaCorrecta,
      retroalimentacion: {
        correcto: respuestaCorrecta
          ? "¡Correcto! La afirmación es verdadera."
          : "¡Correcto! La afirmación es falsa.",
        incorrecto: respuestaCorrecta
          ? "Incorrecto. La afirmación es verdadera."
          : "Incorrecto. La afirmación es falsa.",
        explicacionVerdadero: explicacionVerdadero || undefined,
        explicacionFalso: explicacionFalso || undefined
      },
      pista: pista.trim() || undefined,
      puntos: puntos,
      orden: actividadEditar?.orden || 0,
      tiempo_limite: undefined,
      multimedia_id: undefined
    }

    onGuardar(actividad)
    toast.success(actividadEditar ? "Actividad actualizada" : "Actividad creada")
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Previsualización */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg">Previsualización</CardTitle>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setMostrarPrevisualizacion(!mostrarPrevisualizacion)}
            >
              {mostrarPrevisualizacion ? <EyeOff className="h-4 w-4 mr-2" /> : <Eye className="h-4 w-4 mr-2" />}
              {mostrarPrevisualizacion ? "Ocultar" : "Mostrar"}
            </Button>
          </div>
        </CardHeader>
        {mostrarPrevisualizacion && (
          <CardContent>
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm font-medium mb-2">Así verá el estudiante:</p>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <Badge variant={dificultad === "facil" ? "default" : dificultad === "medio" ? "secondary" : "destructive"}>
                    {dificultad}
                  </Badge>
                  {tema && <Badge variant="outline">{tema}</Badge>}
                </div>
                <p className="font-medium text-lg">{afirmacion || "Afirmación de ejemplo"}</p>
                {contexto && (
                  <div className="p-2 bg-blue-50 dark:bg-blue-950/20 rounded text-sm">
                    <p className="font-medium mb-1">📝 Contexto:</p>
                    <p>{contexto}</p>
                  </div>
                )}
                <div className="grid grid-cols-2 gap-2">
                  <div className={`p-3 border rounded-lg text-center ${
                    respuestaCorrecta ? 'border-green-500 bg-green-50 dark:bg-green-950/20' : ''
                  }`}>
                    <Check className="h-6 w-6 text-green-600 mx-auto mb-1" />
                    <span className="font-medium">Verdadero</span>
                  </div>
                  <div className={`p-3 border rounded-lg text-center ${
                    !respuestaCorrecta ? 'border-red-500 bg-red-50 dark:bg-red-950/20' : ''
                  }`}>
                    <XIcon className="h-6 w-6 text-red-600 mx-auto mb-1" />
                    <span className="font-medium">Falso</span>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        )}
      </Card>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Columna Izquierda */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="afirmacion">Afirmación *</Label>
            <Textarea
              id="afirmacion"
              placeholder="Ej: París es la capital de Francia."
              value={afirmacion}
              onChange={(e) => setAfirmacion(e.target.value)}
              rows={3}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="instrucciones">Instrucciones *</Label>
            <Textarea
              id="instrucciones"
              placeholder="Instrucciones detalladas para el estudiante..."
              value={instrucciones}
              onChange={(e) => setInstrucciones(e.target.value)}
              rows={2}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="contexto">Contexto (Opcional)</Label>
            <Textarea
              id="contexto"
              placeholder="Contexto adicional para entender la afirmación..."
              value={contexto}
              onChange={(e) => setContexto(e.target.value)}
              rows={2}
            />
          </div>

          <div className="space-y-2">
            <Label>Configuración</Label>
            <div className="space-y-3 p-3 border rounded-lg">
              <div className="space-y-2">
                <Label htmlFor="dificultad" className="text-sm">Dificultad</Label>
                <Select value={dificultad} onValueChange={(v: "facil" | "medio" | "dificil") => setDificultad(v)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="facil">Fácil</SelectItem>
                    <SelectItem value="medio">Medio</SelectItem>
                    <SelectItem value="dificil">Difícil</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="tema" className="text-sm">Tema (Opcional)</Label>
                <Input
                  id="tema"
                  placeholder="Ej: Geografía, Historia, Ciencia..."
                  value={tema}
                  onChange={(e) => setTema(e.target.value)}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Columna Derecha */}
        <div className="space-y-4">
          <div className="space-y-3">
            <Label>Respuesta Correcta *</Label>
            <RadioGroup 
              value={respuestaCorrecta.toString()} 
              onValueChange={(v) => setRespuestaCorrecta(v === 'true')}
              className="space-y-3"
            >
              <Card className={respuestaCorrecta ? "border-green-500 bg-green-50 dark:bg-green-950/20" : ""}>
                <CardContent className="p-4">
                  <div className="flex items-center space-x-3">
                    <RadioGroupItem value="true" id="verdadero" />
                    <div className="flex-1">
                      <Label htmlFor="verdadero" className="font-medium cursor-pointer flex items-center gap-2">
                        <Check className="h-4 w-4 text-green-600" />
                        Verdadero
                      </Label>
                      <p className="text-sm text-muted-foreground mt-1">
                        La afirmación es correcta y precisa.
                      </p>
                    </div>
                    {respuestaCorrecta && (
                      <Badge variant="default" className="ml-2">
                        Correcta
                      </Badge>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card className={!respuestaCorrecta ? "border-red-500 bg-red-50 dark:bg-red-950/20" : ""}>
                <CardContent className="p-4">
                  <div className="flex items-center space-x-3">
                    <RadioGroupItem value="false" id="falso" />
                    <div className="flex-1">
                      <Label htmlFor="falso" className="font-medium cursor-pointer flex items-center gap-2">
                        <XIcon className="h-4 w-4 text-red-600" />
                        Falso
                      </Label>
                      <p className="text-sm text-muted-foreground mt-1">
                        La afirmación contiene errores o es incorrecta.
                      </p>
                    </div>
                    {!respuestaCorrecta && (
                      <Badge variant="default" className="ml-2">
                        Correcta
                      </Badge>
                    )}
                  </div>
                </CardContent>
              </Card>
            </RadioGroup>
          </div>

          <div className="space-y-3">
            <Label>Explicaciones (Opcional)</Label>
            
            <div className="space-y-2">
              <Label htmlFor="explicacionVerdadero" className="text-sm">Explicación si es Verdadero</Label>
              <Textarea
                id="explicacionVerdadero"
                placeholder="Explica por qué la afirmación es verdadera..."
                value={explicacionVerdadero}
                onChange={(e) => setExplicacionVerdadero(e.target.value)}
                rows={2}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="explicacionFalso" className="text-sm">Explicación si es Falso</Label>
              <Textarea
                id="explicacionFalso"
                placeholder="Explica por qué la afirmación es falsa..."
                value={explicacionFalso}
                onChange={(e) => setExplicacionFalso(e.target.value)}
                rows={2}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="pista">Pista (Opcional)</Label>
            <Input
              id="pista"
              placeholder="Pista para ayudar al estudiante a decidir..."
              value={pista}
              onChange={(e) => setPista(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="puntos">Puntos</Label>
            <Input
              id="puntos"
              type="number"
              min="1"
              max="100"
              value={puntos}
              onChange={(e) => setPuntos(parseInt(e.target.value) || 10)}
            />
          </div>
        </div>
      </div>

      <div className="flex gap-3 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button type="submit" className="flex-1">
          <Save className="mr-2 h-4 w-4" />
          {actividadEditar ? 'Actualizar' : 'Crear'} Actividad
        </Button>
      </div>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/activity-forms/word-order-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/word-order-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Save, X, Eye, EyeOff, Shuffle, Plus, Trash2, GripVertical } from "lucide-react"
import { toast } from "sonner"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Switch } from "@/components/ui/switch"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { type Actividad } from "@/lib/api"

interface ActivityFormProps {
  onGuardar: (actividad: Actividad) => void
  onCancelar: () => void
  actividadEditar?: Actividad | null
}

interface Palabra {
  id: string
  texto: string
  tipo: 'normal' | 'distractora'
  categoria?: string
}

export function WordOrderForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [instruccion, setInstruccion] = useState("")
  const [instrucciones, setInstrucciones] = useState("Ordena las palabras para formar una oración correcta.")
  const [palabras, setPalabras] = useState<Palabra[]>([])
  const [nuevaPalabra, setNuevaPalabra] = useState("")
  const [tipoNuevaPalabra, setTipoNuevaPalabra] = useState<'normal' | 'distractora'>('normal')
  const [categoriaPalabra, setCategoriaPalabra] = useState("")
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(10)
  const [mostrarPrevisualizacion, setMostrarPrevisualizacion] = useState(false)
  const [mezclarAutomatico, setMezclarAutomatico] = useState(true)
  const [permiteArrastrar, setPermiteArrastrar] = useState(true)
  const [mostrarNumeros, setMostrarNumeros] = useState(false)
  const [dificultad, setDificultad] = useState<"facil" | "medio" | "dificil">("medio")
  const [estructura, setEstructura] = useState("")

  useEffect(() => {
    if (actividadEditar) {
      setInstruccion(actividadEditar.pregunta || "")
      setInstrucciones(actividadEditar.instrucciones || "Ordena las palabras para formar una oración correcta.")
      
      // Procesar palabras existentes
      if (actividadEditar.opciones?.palabras) {
        const palabrasExistentes: Palabra[] = actividadEditar.opciones.palabras.map((palabra: string, index: number) => ({
          id: `palabra-${index}`,
          texto: palabra,
          tipo: 'normal'
        }))
        setPalabras(palabrasExistentes)
      }
      
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 10)
      setMezclarAutomatico(actividadEditar.opciones?.mezclarAutomatico ?? true)
      setPermiteArrastrar(actividadEditar.opciones?.permiteArrastrar ?? true)
      setMostrarNumeros(actividadEditar.opciones?.mostrarNumeros ?? false)
      setDificultad(actividadEditar.opciones?.dificultad || "medio")
      setEstructura(actividadEditar.opciones?.estructura || "")
    }
  }, [actividadEditar])

  const generarId = () => Math.random().toString(36).substr(2, 9)

  const agregarPalabra = () => {
    if (!nuevaPalabra.trim()) {
      toast.error("Escribe una palabra")
      return
    }

    if (palabras.some(p => p.texto.toLowerCase() === nuevaPalabra.toLowerCase())) {
      toast.error("Esta palabra ya existe")
      return
    }

    const nuevaPalabraObj: Palabra = {
      id: generarId(),
      texto: nuevaPalabra.trim(),
      tipo: tipoNuevaPalabra,
      categoria: categoriaPalabra.trim() || undefined
    }

    setPalabras([...palabras, nuevaPalabraObj])
    setNuevaPalabra("")
    setCategoriaPalabra("")
  }

  const eliminarPalabra = (id: string) => {
    if (palabras.filter(p => p.tipo === 'normal').length <= 2) {
      toast.error("Debe haber al menos 3 palabras normales")
      return
    }
    
    setPalabras(palabras.filter(p => p.id !== id))
  }

  const moverPalabra = (fromIndex: number, toIndex: number) => {
    const nuevasPalabras = [...palabras]
    const [movedItem] = nuevasPalabras.splice(fromIndex, 1)
    nuevasPalabras.splice(toIndex, 0, movedItem)
    setPalabras(nuevasPalabras)
  }

  const mezclarPalabras = () => {
    const palabrasMezcladas = [...palabras]
      .map(palabra => ({ ...palabra, id: generarId() }))
      .sort(() => Math.random() - 0.5)
    setPalabras(palabrasMezcladas)
    toast.success("Palabras mezcladas")
  }

  const palabrasNormales = palabras.filter(p => p.tipo === 'normal')
  const palabrasDistractoras = palabras.filter(p => p.tipo === 'distractora')
  const categoriasUnicas = [...new Set(palabras.map(p => p.categoria).filter(Boolean))]

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!instruccion.trim()) {
      toast.error("La instrucción es obligatoria")
      return
    }

    if (palabrasNormales.length < 3) {
      toast.error("Debe haber al menos 3 palabras normales")
      return
    }

    const actividad: Actividad = {
      tipo: 'word_order',
      pregunta: instruccion.trim(),
      instrucciones: instrucciones.trim(),
      opciones: {
        palabras: palabrasNormales.map(p => p.texto),
        palabrasDistractoras: palabrasDistractoras.map(p => p.texto),
        categorias: categoriasUnicas,
        estructura: estructura.trim() || undefined,
        mezclarAutomatico,
        permiteArrastrar,
        mostrarNumeros,
        dificultad
      },
      respuesta_correcta: palabrasNormales.map(p => p.texto),
      retroalimentacion: {
        correcto: "¡Excelente! Has ordenado la oración correctamente.",
        incorrecto: "El orden no es correcto. Intenta nuevamente.",
        explicacion: `La oración correcta es: "${palabrasNormales.map(p => p.texto).join(' ')}"`
      },
      pista: pista.trim() || undefined,
      puntos: puntos,
      orden: actividadEditar?.orden || 0,
      tiempo_limite: undefined,
      multimedia_id: undefined
    }

    onGuardar(actividad)
    toast.success(actividadEditar ? "Actividad actualizada" : "Actividad creada")
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Previsualización */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg">Previsualización</CardTitle>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setMostrarPrevisualizacion(!mostrarPrevisualizacion)}
            >
              {mostrarPrevisualizacion ? <EyeOff className="h-4 w-4 mr-2" /> : <Eye className="h-4 w-4 mr-2" />}
              {mostrarPrevisualizacion ? "Ocultar" : "Mostrar"}
            </Button>
          </div>
        </CardHeader>
        {mostrarPrevisualizacion && (
          <CardContent>
            <div className="p-4 bg-muted rounded-lg">
              <p className="text-sm font-medium mb-2">Así verá el estudiante:</p>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <Badge variant={dificultad === "facil" ? "default" : dificultad === "medio" ? "secondary" : "destructive"}>
                    {dificultad}
                  </Badge>
                  <div className="flex gap-1 text-xs text-muted-foreground">
                    <span>{palabrasNormales.length} palabras</span>
                    {palabrasDistractoras.length > 0 && (
                      <span>+ {palabrasDistractoras.length} distractoras</span>
                    )}
                  </div>
                </div>
                <p className="font-medium">{instruccion || "Instrucción de ejemplo"}</p>
                <div className="flex flex-wrap gap-2 p-3 bg-background rounded border min-h-[60px]">
                  {mezclarAutomatico ? (
                    <div className="text-center text-muted-foreground w-full">
                      Las palabras aparecerán mezcladas aquí
                    </div>
                  ) : (
                    palabrasNormales.slice(0, 6).map((palabra, i) => (
                      <Badge key={i} variant="outline" className="text-sm flex items-center gap-1">
                        {mostrarNumeros && <span className="text-xs">{i + 1}</span>}
                        {permiteArrastrar && <GripVertical className="h-3 w-3" />}
                        {palabra.texto}
                      </Badge>
                    ))
                  )}
                  {palabrasNormales.length > 6 && (
                    <div className="text-center text-muted-foreground w-full text-xs">
                      ... y {palabrasNormales.length - 6} palabras más
                    </div>
                  )}
                </div>
                {permiteArrastrar && (
                  <p className="text-xs text-muted-foreground text-center">
                    💡 Arrastra las palabras para ordenarlas
                  </p>
                )}
              </div>
            </div>
          </CardContent>
        )}
      </Card>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Columna Izquierda */}
        <div className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="instruccion">Instrucción/Contexto *</Label>
            <Textarea
              id="instruccion"
              placeholder="Ej: Ordena las palabras para formar una pregunta en inglés"
              value={instruccion}
              onChange={(e) => setInstruccion(e.target.value)}
              rows={2}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="instrucciones">Instrucciones adicionales *</Label>
            <Textarea
              id="instrucciones"
              placeholder="Instrucciones detalladas para el estudiante..."
              value={instrucciones}
              onChange={(e) => setInstrucciones(e.target.value)}
              rows={2}
              required
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="estructura">Estructura gramatical (Opcional)</Label>
            <Input
              id="estructura"
              placeholder="Ej: Sujeto + Verbo + Objeto, Pregunta WH..."
              value={estructura}
              onChange={(e) => setEstructura(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label>Configuración</Label>
            <div className="space-y-3 p-3 border rounded-lg">
              <div className="flex items-center justify-between">
                <Label htmlFor="mezclar" className="text-sm">Mezclar automáticamente</Label>
                <Switch
                  id="mezclar"
                  checked={mezclarAutomatico}
                  onCheckedChange={setMezclarAutomatico}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="arrastrar" className="text-sm">Permitir arrastrar</Label>
                <Switch
                  id="arrastrar"
                  checked={permiteArrastrar}
                  onCheckedChange={setPermiteArrastrar}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="numeros" className="text-sm">Mostrar números</Label>
                <Switch
                  id="numeros"
                  checked={mostrarNumeros}
                  onCheckedChange={setMostrarNumeros}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="dificultad" className="text-sm">Dificultad</Label>
                <Select value={dificultad} onValueChange={(v: "facil" | "medio" | "dificil") => setDificultad(v)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="facil">Fácil (3-5 palabras)</SelectItem>
                    <SelectItem value="medio">Medio (6-8 palabras)</SelectItem>
                    <SelectItem value="dificil">Difícil (9+ palabras)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        </div>

        {/* Columna Derecha */}
        <div className="space-y-4">
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label>
                Gestión de Palabras
                <div className="flex gap-2 mt-1 text-xs text-muted-foreground">
                  <Badge variant="outline">{palabrasNormales.length} normales</Badge>
                  {palabrasDistractoras.length > 0 && (
                    <Badge variant="secondary">{palabrasDistractoras.length} distractoras</Badge>
                  )}
                </div>
              </Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={mezclarPalabras}
                disabled={palabrasNormales.length < 2}
              >
                <Shuffle className="h-4 w-4 mr-2" />
                Mezclar
              </Button>
            </div>

            {/* Formulario para agregar nueva palabra */}
            <Card>
              <CardContent className="p-4 space-y-3">
                <div className="grid grid-cols-2 gap-2">
                  <div className="space-y-2">
                    <Label className="text-xs">Palabra *</Label>
                    <Input
                      placeholder="Nueva palabra..."
                      value={nuevaPalabra}
                      onChange={(e) => setNuevaPalabra(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), agregarPalabra())}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label className="text-xs">Tipo</Label>
                    <Select value={tipoNuevaPalabra} onValueChange={(v: 'normal' | 'distractora') => setTipoNuevaPalabra(v)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="normal">Normal</SelectItem>
                        <SelectItem value="distractora">Distractora</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label className="text-xs">Categoría (opcional)</Label>
                  <Input
                    placeholder="Ej: Verbo, Sustantivo, Adjetivo..."
                    value={categoriaPalabra}
                    onChange={(e) => setCategoriaPalabra(e.target.value)}
                  />
                </div>

                <Button type="button" onClick={agregarPalabra} className="w-full" variant="outline">
                  <Plus className="h-4 w-4 mr-2" />
                  Agregar Palabra
                </Button>
              </CardContent>
            </Card>

            {/* Lista de palabras */}
            {palabras.length > 0 && (
              <div className="space-y-3">
                <Label>Palabras agregadas:</Label>
                <div className="space-y-2 max-h-60 overflow-y-auto">
                  {palabras.map((palabra, index) => (
                    <Card key={palabra.id}>
                      <CardContent className="p-3">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3 flex-1">
                            {permiteArrastrar && (
                              <GripVertical className="h-4 w-4 text-muted-foreground cursor-move" />
                            )}
                            <div className="flex-1">
                              <div className="flex items-center gap-2">
                                <span className="font-medium">{palabra.texto}</span>
                                <Badge 
                                  variant={palabra.tipo === 'normal' ? 'default' : 'secondary'}
                                  className="text-xs"
                                >
                                  {palabra.tipo === 'normal' ? 'Normal' : 'Distractora'}
                                </Badge>
                                {palabra.categoria && (
                                  <Badge variant="outline" className="text-xs">
                                    {palabra.categoria}
                                  </Badge>
                                )}
                              </div>
                              {palabra.tipo === 'normal' && (
                                <div className="text-xs text-muted-foreground">
                                  Posición: {index + 1}
                                </div>
                              )}
                            </div>
                          </div>
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => eliminarPalabra(palabra.id)}
                            disabled={palabra.tipo === 'normal' && palabrasNormales.length <= 3}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            )}
          </div>

          {palabrasNormales.length > 0 && (
            <div className="space-y-2">
              <Label>Vista previa del orden correcto:</Label>
              <div className="p-3 bg-secondary rounded-lg">
                <div className="flex flex-wrap gap-2">
                  {palabrasNormales.map((palabra, i) => (
                    <Badge key={i} variant="default" className="text-sm">
                      {i + 1}. {palabra.texto}
                    </Badge>
                  ))}
                </div>
                <p className="text-sm mt-2">
                  <strong>Oración:</strong> {palabrasNormales.map(p => p.texto).join(' ')}
                </p>
              </div>
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="pista">Pista (Opcional)</Label>
            <Input
              id="pista"
              placeholder="Ej: Recuerda que las preguntas en inglés empiezan con..."
              value={pista}
              onChange={(e) => setPista(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="puntos">Puntos</Label>
            <Input
              id="puntos"
              type="number"
              min="1"
              max="100"
              value={puntos}
              onChange={(e) => setPuntos(parseInt(e.target.value) || 10)}
            />
          </div>
        </div>
      </div>

      <div className="flex gap-3 pt-4 border-t">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button type="submit" className="flex-1" disabled={palabrasNormales.length < 3}>
          <Save className="mr-2 h-4 w-4" />
          {actividadEditar ? 'Actualizar' : 'Crear'} Actividad
        </Button>
      </div>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/activity-modal.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-modal.tsx
================================================================================

"use client"

import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { MultipleChoiceForm } from "./activity-forms/multiple-choice-form"
import { FillBlankForm } from "./activity-forms/fill-blank-form"
import { MatchingForm } from "./activity-forms/matching-form"
import { TranslationForm } from "./activity-forms/translation-form"
import { TrueFalseForm } from "./activity-forms/true-false-form"
import { WordOrderForm } from "./activity-forms/word-order-form"
// ✅ IMPORTAR EL TIPO CORRECTO desde la API
import { type Actividad } from "@/lib/api"

// ✅ ELIMINAR la interfaz Actividad local duplicada
// interface Actividad {
//   tipo: string
//   pregunta: string
//   instrucciones?: string
//   opciones?: any
//   respuesta_correcta: any
//   retroalimentacion?: any
//   pista?: string
//   puntos: number
//   orden: number
//   multimedia_id?: number
// }

interface ActivityModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  tipoActividad: Actividad['tipo'] | null // ✅ Usar el tipo correcto
  onGuardar: (actividad: Actividad) => void // ✅ Usar el tipo correcto
  actividadEditar?: Actividad | null // ✅ Usar el tipo correcto
}

const TITULOS_ACTIVIDAD: Record<Actividad['tipo'], string> = {
  multiple_choice: "🎯 Opción Múltiple",
  fill_blank: "✏️ Completar Espacios",
  matching: "🔗 Emparejar",
  translation: "🌐 Traducción",
  listen_repeat: "🎤 Escuchar y Repetir",
  true_false: "✓✗ Verdadero/Falso",
  word_order: "📝 Ordenar Palabras"
}

export function ActivityModal({ 
  open, 
  onOpenChange, 
  tipoActividad, 
  onGuardar,
  actividadEditar 
}: ActivityModalProps) {
  
  if (!tipoActividad) return null

  const renderForm = () => {
    const props = {
      onGuardar,
      onCancelar: () => onOpenChange(false),
      actividadEditar
    }

    switch (tipoActividad) {
      case 'multiple_choice':
        return <MultipleChoiceForm {...props} />
      case 'fill_blank':
        return <FillBlankForm {...props} />
      case 'matching':
        return <MatchingForm {...props} />
      case 'translation':
        return <TranslationForm {...props} />
      case 'true_false':
        return <TrueFalseForm {...props} />
      case 'word_order':
        return <WordOrderForm {...props} />
      case 'listen_repeat':
        // Por ahora, placeholder hasta que implementes multimedia
        return (
          <div className="p-8 text-center text-muted-foreground">
            <p className="mb-4">🎤 Actividad de Escuchar y Repetir</p>
            <p className="text-sm">Esta actividad requiere funcionalidad de audio.</p>
            <p className="text-sm">Se implementará cuando esté lista la biblioteca multimedia.</p>
          </div>
        )
      default:
        // ✅ TypeScript ahora sabe que tipoActividad es uno de los valores válidos
        // pero por seguridad retornamos null para casos inesperados
        const _exhaustiveCheck: never = tipoActividad
        return null
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {actividadEditar ? "Editar" : "Crear"} Actividad: {TITULOS_ACTIVIDAD[tipoActividad]}
          </DialogTitle>
          <DialogDescription>
            Completa todos los campos para crear una actividad interactiva
          </DialogDescription>
        </DialogHeader>
        {renderForm()}
      </DialogContent>
    </Dialog>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/admin-stats.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/admin-stats.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { BookOpen, ImageIcon, Users, FileText } from "lucide-react"
import { useState, useEffect } from "react"
import { leccionesAPI, multimediaAPI } from "@/lib/api"

export function AdminStats() {
  const [stats, setStats] = useState({
    totalLecciones: 0,
    totalMultimedia: 0,
    totalUsuarios: 0,
    cursosActivos: 0,
    loading: true
  })

  useEffect(() => {
    cargarEstadisticas()
  }, [])

  const cargarEstadisticas = async () => {
    try {
      // Obtener estadísticas de lecciones
      const leccionesRes = await leccionesAPI.listar({ por_pagina: 1 })
      
      // Obtener estadísticas de multimedia
      const multimediaRes = await multimediaAPI.estadisticas()
      
      setStats({
        totalLecciones: leccionesRes.total || 0,
        totalMultimedia: multimediaRes.total_recursos || 0,
        totalUsuarios: 0, // TODO: Implementar endpoint de usuarios
        cursosActivos: 0, // TODO: Implementar endpoint de cursos
        loading: false
      })
    } catch (error) {
      console.error("Error al cargar estadísticas:", error)
      setStats(prev => ({ ...prev, loading: false }))
    }
  }

  const statsData = [
    {
      label: "Total Lecciones",
      value: stats.totalLecciones,
      change: stats.loading ? "Cargando..." : "Ver todas",
      icon: BookOpen,
      color: "text-primary",
    },
    {
      label: "Archivos Multimedia",
      value: stats.totalMultimedia,
      change: stats.loading ? "Cargando..." : "Ver biblioteca",
      icon: ImageIcon,
      color: "text-secondary",
    },
    {
      label: "Usuarios Totales",
      value: stats.totalUsuarios || "N/A",
      change: "Próximamente",
      icon: Users,
      color: "text-accent",
    },
    {
      label: "Cursos Activos",
      value: stats.cursosActivos || "N/A",
      change: "Próximamente",
      icon: FileText,
      color: "text-primary",
    },
  ]

  return (
    <Card className="p-6">
      <h2 className="mb-4 text-xl font-bold">Estadísticas de Contenido</h2>

      <div className="grid gap-4 sm:grid-cols-2">
        {statsData.map((stat, index) => {
          const Icon = stat.icon
          return (
            <div key={index} className="flex items-start gap-3 rounded-lg bg-muted/50 p-4">
              <div className={`flex h-10 w-10 items-center justify-center rounded-lg bg-background ${stat.color}`}>
                <Icon className="h-5 w-5" />
              </div>
              <div className="flex-1">
                <p className="text-sm text-muted-foreground">{stat.label}</p>
                <div className="mt-1 flex items-baseline gap-2">
                  <span className="text-2xl font-bold">
                    {stats.loading ? "..." : stat.value}
                  </span>
                </div>
                <p className="mt-1 text-xs text-muted-foreground">{stat.change}</p>
              </div>
            </div>
          )
        })}
      </div>
    </Card>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/create-lesson-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/create-lesson-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Save, Loader2, Plus, X, Edit, Trash2 } from "lucide-react"
import Link from "next/link"
import { toast } from "sonner"
// FIX 1: Se importa el 'type Actividad' desde la API
import { cursosAPI, leccionesAPI, actividadesAPI, type Actividad } from "@/lib/api"
import { ActivityModal } from "@/components/admin/activity-modal"

// Tipos de actividades gamificadas
const TIPOS_ACTIVIDAD = [
  { value: 'multiple_choice', label: '🎯 Opción múltiple', icon: '🎯' },
  { value: 'fill_blank', label: '✏️ Completar espacios', icon: '✏️' },
  { value: 'matching', label: '🔗 Emparejar', icon: '🔗' },
  { value: 'translation', label: '🌐 Traducción', icon: '🌐' },
  { value: 'true_false', label: '✓✗ Verdadero/Falso', icon: '✓' },
  { value: 'word_order', label: '📝 Ordenar palabras', icon: '📝' },
]

interface Curso {
  id: number
  nombre: string
  nivel: string
  codigo: string
  idioma: string
}

// FIX 2: Se elimina la interfaz 'Actividad' local duplicada.
// Ya no es necesaria porque la importamos desde 'lib/api'.

export function CreateLessonForm() {
  const router = useRouter()
  const [saving, setSaving] = useState(false)
  const [step, setStep] = useState(1)
  const [cursos, setCursos] = useState<Curso[]>([])
  const [loadingCursos, setLoadingCursos] = useState(false)
  
  // Estados para modal de actividades
  const [modalActividadOpen, setModalActividadOpen] = useState(false)
  // FIX 3: Se usa el tipo importado 'Actividad['tipo']' para el estado del modal
  const [tipoActividadModal, setTipoActividadModal] = useState<Actividad['tipo'] | null>(null)
  const [actividadEditando, setActividadEditando] = useState<Actividad | null>(null)
  const [indiceEditando, setIndiceEditando] = useState<number | null>(null)
  
  const [formData, setFormData] = useState({
    // Paso 1: Básico + Curso
    curso_id: null as number | null,
    titulo: "",
    descripcion: "",
    // Pequeña mejora: Usar los tipos exactos de la API de Leccion
    nivel: "principiante" as 'principiante' | 'intermedio' | 'avanzado', 
    idioma: "ingles",
    categoria: "",
    duracion_estimada: 10,
    puntos_xp: 50,
    orden: 0,
    
    // Paso 2: Contenido
    contenido: {
      objetivos: [] as string[],
      vocabulario_clave: [] as string[],
      introduccion: "",
      ejemplos: [] as string[]
    },
    etiquetas: [] as string[],
    
    // Paso 3: Actividades gamificadas
    // Este array ahora usa correctamente el tipo 'Actividad' importado
    actividades: [] as Actividad[],
    
    // Paso 4: Multimedia
    multimedia_ids: [] as number[]
  })

  // Estados temporales para agregar items
  const [objetivoTemp, setObjetivoTemp] = useState("")
  const [vocabularioTemp, setVocabularioTemp] = useState("")
  const [etiquetaTemp, setEtiquetaTemp] = useState("")

  // Cargar cursos disponibles
  useEffect(() => {
    cargarCursos()
  }, [])

  const cargarCursos = async () => {
    try {
      setLoadingCursos(true)
      const data = await cursosAPI.listar({ activo: true })
      setCursos(data.cursos || [])
      
      if (data.cursos && data.cursos.length > 0) {
        toast.success(`${data.cursos.length} cursos cargados`)
      } else {
        toast.warning('No hay cursos disponibles')
      }
    } catch (error: any) {
      console.error('Error al cargar cursos:', error)
      toast.error(error.message || 'Error al cargar cursos')
    } finally {
      setLoadingCursos(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!formData.curso_id) {
      toast.error("Debes seleccionar un curso")
      setStep(1)
      return
    }

    if (formData.actividades.length === 0) {
      toast.error("Debes agregar al menos una actividad gamificada")
      setStep(3)
      return
    }
    
    try {
      setSaving(true)
      
      // Preparar datos de la lección
      const leccionData = {
        curso_id: formData.curso_id,
        titulo: formData.titulo,
        descripcion: formData.descripcion,
        contenido: JSON.stringify(formData.contenido), // FIX: Convertir a string
        nivel: formData.nivel,
        idioma: formData.idioma,
        categoria: formData.categoria,
        etiquetas: formData.etiquetas,
        duracion_estimada: formData.duracion_estimada,
        puntos_xp: formData.puntos_xp,
        orden: formData.orden,
        estado: 'borrador' as const // Usar 'as const' para tipado estricto
      }
      
      console.log('📤 Enviando lección:', leccionData)
      
      // ✅ USAR LA API EN LUGAR DE FETCH DIRECTO
      const response = await leccionesAPI.crear(leccionData)
      
      console.log('✅ Lección creada:', response)
      
      const leccionId = response.leccion?.id || response.id
      
      if (!leccionId) {
        throw new Error('No se recibió el ID de la lección creada')
      }

      // Crear actividades una por una
      console.log(`📤 Creando ${formData.actividades.length} actividades...`)
      
      for (const actividad of formData.actividades) {
        try {
          // Esta línea ahora es funcional gracias a la corrección de tipos
          await actividadesAPI.agregar(leccionId, actividad)
          console.log(`✅ Actividad "${actividad.pregunta}" creada`)
        } catch (actError: any) {
          console.error('Error al crear actividad:', actError)
          toast.error(`Error al crear actividad: ${actError.message}`)
        }
      }
      
      toast.success("✅ Lección creada exitosamente")
      router.push(`/admin/lecciones/${leccionId}/editar`)
      
    } catch (error: any) {
      console.error("❌ Error al crear lección:", error)
      toast.error(error.message || "Error al crear lección")
    } finally {
      setSaving(false)
    }
  }

  // Funciones auxiliares
  const agregarObjetivo = () => {
    if (objetivoTemp.trim()) {
      setFormData({
        ...formData,
        contenido: {
          ...formData.contenido,
          objetivos: [...formData.contenido.objetivos, objetivoTemp.trim()]
        }
      })
      setObjetivoTemp("")
    }
  }

  const eliminarObjetivo = (index: number) => {
    setFormData({
      ...formData,
      contenido: {
        ...formData.contenido,
        objetivos: formData.contenido.objetivos.filter((_, i) => i !== index)
      }
    })
  }

  const agregarVocabulario = () => {
    if (vocabularioTemp.trim()) {
      setFormData({
        ...formData,
        contenido: {
          ...formData.contenido,
          vocabulario_clave: [...formData.contenido.vocabulario_clave, vocabularioTemp.trim()]
        }
      })
      setVocabularioTemp("")
    }
  }

  const agregarEtiqueta = () => {
    if (etiquetaTemp.trim() && !formData.etiquetas.includes(etiquetaTemp.trim())) {
      setFormData({
        ...formData,
        etiquetas: [...formData.etiquetas, etiquetaTemp.trim()]
      })
      setEtiquetaTemp("")
    }
  }

  const handleGuardarActividad = (actividad: Actividad) => {
    if (indiceEditando !== null) {
      // Editar existente
      const nuevasActividades = [...formData.actividades]
      nuevasActividades[indiceEditando] = { ...actividad, orden: indiceEditando }
      setFormData({ ...formData, actividades: nuevasActividades })
      toast.success("Actividad actualizada")
    } else {
      // Agregar nueva
      setFormData({
        ...formData,
        actividades: [...formData.actividades, { ...actividad, orden: formData.actividades.length }]
      })
      toast.success("Actividad agregada")
    }
    
    // Cerrar modal
    setModalActividadOpen(false)
    setTipoActividadModal(null)
    setActividadEditando(null)
    setIndiceEditando(null)
  }

  const handleEditarActividad = (actividad: Actividad, index: number) => {
    setActividadEditando(actividad)
    setIndiceEditando(index)
    setTipoActividadModal(actividad.tipo)
    setModalActividadOpen(true)
  }

  const handleEliminarActividad = (index: number) => {
    setFormData({
      ...formData,
      actividades: formData.actividades.filter((_, i) => i !== index)
    })
    toast.success("Actividad eliminada")
  }

  const cursoSeleccionado = cursos.find(c => c.id === formData.curso_id)

  return (
    <>
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Indicador de pasos */}
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              {[
                { num: 1, label: 'Información Básica' },
                { num: 2, label: 'Contenido' },
                { num: 3, label: 'Actividades' },
                { num: 4, label: 'Multimedia' }
              ].map((s, idx) => (
                <div key={s.num} className="flex items-center">
                  <div className={`flex h-10 w-10 items-center justify-center rounded-full ${
                    step >= s.num ? 'bg-primary text-primary-foreground' : 'bg-secondary'
                  }`}>
                    {s.num}
                  </div>
                  <span className="ml-2 hidden sm:inline">{s.label}</span>
                  {idx < 3 && <div className="mx-4 h-1 w-12 bg-secondary" />}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* PASO 1: Información Básica + Curso */}
        {step === 1 && (
          <Card>
            <CardHeader>
              <CardTitle>Paso 1: Información Básica</CardTitle>
              <CardDescription>Selecciona el curso y completa los datos principales</CardDescription>
            </CardHeader>

            <CardContent className="space-y-6">
              {/* Selector de Curso */}
              <div className="space-y-2 rounded-lg border-2 border-primary/50 bg-primary/5 p-4">
                <Label htmlFor="curso" className="text-lg font-semibold">
                  🎓 Curso de la Lección *
                </Label>
                <Select 
                  value={formData.curso_id?.toString() || ""}
                  onValueChange={(value) => {
                    const cursoId = parseInt(value)
                    const curso = cursos.find(c => c.id === cursoId)
                    setFormData({
                      ...formData, 
                      curso_id: cursoId,
                      idioma: curso?.idioma || formData.idioma,
                      nivel: curso?.nivel === 'A1' || curso?.nivel === 'A2' ? 'principiante' : 
                             curso?.nivel === 'B1' || curso?.nivel === 'B2' ? 'intermedio' : 'avanzado'
                    })
                  }}
                >
                  <SelectTrigger className="h-12">
                    <SelectValue placeholder="Selecciona el curso..." />
                  </SelectTrigger>
                  <SelectContent>
                    {loadingCursos ? (
                      <SelectItem value="loading" disabled>Cargando cursos...</SelectItem>
                    ) : cursos.length === 0 ? (
                      <SelectItem value="empty" disabled>No hay cursos disponibles</SelectItem>
                    ) : (
                      cursos.map((curso) => (
                        <SelectItem key={curso.id} value={curso.id.toString()}>
                          {curso.codigo} - {curso.nombre} ({curso.nivel})
                        </SelectItem>
                      ))
                    )}
                  </SelectContent>
                </Select>
                {cursoSeleccionado && (
                  <div className="mt-2 text-sm text-muted-foreground">
                    ℹ️ Esta lección será parte de: <strong>{cursoSeleccionado.nombre}</strong>
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="titulo">Título de la Lección *</Label>
                <Input 
                  id="titulo" 
                  placeholder="Ej: Saludos y Presentaciones"
                  value={formData.titulo}
                  onChange={(e) => setFormData({...formData, titulo: e.target.value})}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="descripcion">Descripción *</Label>
                <Textarea
                  id="descripcion"
                  placeholder="Describe brevemente de qué trata esta lección..."
                  value={formData.descripcion}
                  onChange={(e) => setFormData({...formData, descripcion: e.target.value})}
                  rows={3}
                  required
                />
              </div>

              <div className="grid gap-4 sm:grid-cols-2">
                <div className="space-y-2">
                  <Label>Nivel (según curso)</Label>
                  <Input value={formData.nivel} disabled className="bg-secondary" />
                </div>

                <div className="space-y-2">
                  <Label>Idioma (según curso)</Label>
                  <Input value={formData.idioma} disabled className="bg-secondary" />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="categoria">Categoría</Label>
                <Select 
                  value={formData.categoria}
                  onValueChange={(value) => setFormData({...formData, categoria: value})}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecciona una categoría..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="vocabulario">📚 Vocabulario</SelectItem>
                    <SelectItem value="gramatica">📖 Gramática</SelectItem>
                    <SelectItem value="pronunciacion">🗣️ Pronunciación</SelectItem>
                    <SelectItem value="conversacion">💬 Conversación</SelectItem>
                    <SelectItem value="lectura">📰 Lectura</SelectItem>
                    <SelectItem value="escritura">✍️ Escritura</SelectItem>
                    <SelectItem value="comprension_auditiva">👂 Comprensión Auditiva</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid gap-4 sm:grid-cols-3">
                <div className="space-y-2">
                  <Label htmlFor="duracion">⏱️ Duración (min) *</Label>
                  <Input 
                    id="duracion" 
                    type="number" 
                    min="1"
                    value={formData.duracion_estimada}
                    onChange={(e) => setFormData({...formData, duracion_estimada: parseInt(e.target.value) || 1})}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="xp">⭐ Puntos XP *</Label>
                  <Input 
                    id="xp" 
                    type="number"
                    min="0"
                    value={formData.puntos_xp}
                    onChange={(e) => setFormData({...formData, puntos_xp: parseInt(e.target.value) || 0})}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="orden">🔢 Orden</Label>
                  <Input 
                    id="orden" 
                    type="number"
                    min="0"
                    value={formData.orden}
                    onChange={(e) => setFormData({...formData, orden: parseInt(e.target.value) || 0})}
                  />
                </div>
              </div>

              <div className="flex gap-3">
                <Button 
                  type="button" 
                  onClick={() => setStep(2)} 
                  className="flex-1"
                  disabled={!formData.curso_id || !formData.titulo || !formData.descripcion}
                >
                  Siguiente
                </Button>
                <Button variant="outline" asChild>
                  <Link href="/admin/lecciones">Cancelar</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* PASO 2: Contenido Detallado */}
        {step === 2 && (
          <Card>
            <CardHeader>
              <CardTitle>Paso 2: Contenido Pedagógico</CardTitle>
              <CardDescription>Objetivos, vocabulario y estructura</CardDescription>
            </CardHeader>

            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label>📌 Objetivos de Aprendizaje</Label>
                <div className="flex gap-2">
                  <Input 
                    placeholder="Ej: Aprender saludos formales en inglés"
                    value={objetivoTemp}
                    onChange={(e) => setObjetivoTemp(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), agregarObjetivo())}
                  />
                  <Button type="button" onClick={agregarObjetivo} size="icon">
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
                {formData.contenido.objetivos.length > 0 && (
                  <div className="space-y-2 mt-2">
                    {formData.contenido.objetivos.map((obj, i) => (
                      <div key={i} className="flex items-center gap-2 p-2 bg-secondary rounded">
                        <span className="flex-1 text-sm">{obj}</span>
                        <Button type="button" variant="ghost" size="icon" onClick={() => eliminarObjetivo(i)}>
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label>📖 Vocabulario Clave</Label>
                <div className="flex gap-2">
                  <Input 
                    placeholder="Ej: Hello, Good morning, How are you?"
                    value={vocabularioTemp}
                    onChange={(e) => setVocabularioTemp(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), agregarVocabulario())}
                  />
                  <Button type="button" onClick={agregarVocabulario} size="icon">
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
                {formData.contenido.vocabulario_clave.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.contenido.vocabulario_clave.map((vocab, i) => (
                      <Badge key={i} variant="secondary">
                        {vocab}
                        <button type="button" onClick={() => {
                          setFormData({
                            ...formData,
                            contenido: {
                              ...formData.contenido,
                              vocabulario_clave: formData.contenido.vocabulario_clave.filter((_, idx) => idx !== i)
                            }
                          })
                        }} className="ml-1">
                          <X className="h-3 w-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="introduccion">💡 Introducción</Label>
                <Textarea
                  id="introduccion"
                  placeholder="Breve introducción al tema de la lección..."
                  value={formData.contenido.introduccion}
                  onChange={(e) => setFormData({
                    ...formData,
                    contenido: {...formData.contenido, introduccion: e.target.value}
                  })}
                  rows={3}
                />
              </div>

              <div className="space-y-2">
                <Label>🏷️ Etiquetas</Label>
                <div className="flex gap-2">
                  <Input 
                    placeholder="Ej: saludos, presentaciones, básico"
                    value={etiquetaTemp}
                    onChange={(e) => setEtiquetaTemp(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), agregarEtiqueta())}
                  />
                  <Button type="button" onClick={agregarEtiqueta} size="icon">
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
                {formData.etiquetas.length > 0 && (
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.etiquetas.map((tag, i) => (
                      <Badge key={i} variant="outline">
                        {tag}
                        <button type="button" onClick={() => {
                          setFormData({...formData, etiquetas: formData.etiquetas.filter((_, idx) => idx !== i)})
                        }} className="ml-1">
                          <X className="h-3 w-3" />
                        </button>
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              <div className="flex gap-3">
                <Button type="button" variant="outline" onClick={() => setStep(1)}>
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Anterior
                </Button>
                <Button type="button" onClick={() => setStep(3)} className="flex-1">
                  Siguiente: Agregar Actividades
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* PASO 3: Actividades Gamificadas */}
        {step === 3 && (
          <Card>
            <CardHeader>
              <CardTitle>Paso 3: Actividades Gamificadas 🎮</CardTitle>
              <CardDescription>
                Agrega juegos y ejercicios interactivos (mínimo 1 requerido)
              </CardDescription>
            </CardHeader>

            <CardContent className="space-y-6">
              <div className="rounded-lg border-2 border-dashed border-primary/30 p-6">
                <h3 className="mb-4 font-semibold">Tipos de Actividades Disponibles</h3>
                <div className="grid gap-3 sm:grid-cols-2">
                  {TIPOS_ACTIVIDAD.map((tipo) => (
                    <Button
                      key={tipo.value}
                      type="button"
                      variant="outline"
                      className="justify-start h-auto p-4"
                      onClick={() => {
                        // El tipo 'tipo.value' ahora se valida contra 'Actividad['tipo']'
                        setTipoActividadModal(tipo.value as Actividad['tipo']) 
                        setActividadEditando(null)
                        setIndiceEditando(null)
                        setModalActividadOpen(true)
                      }}
                    >
                      <span className="text-2xl mr-3">{tipo.icon}</span>
                      <span>{tipo.label}</span>
                    </Button>
                  ))}
                </div>
              </div>

              {formData.actividades.length > 0 && (
                <div className="space-y-3">
                  <h3 className="font-semibold">Actividades Agregadas ({formData.actividades.length})</h3>
                  {formData.actividades.map((act, idx) => (
                    <div key={idx} className="flex items-center gap-3 rounded-lg border p-3">
                      <span className="text-2xl">
                        {TIPOS_ACTIVIDAD.find(t => t.value === act.tipo)?.icon || '🎮'}
                      </span>
                      <div className="flex-1">
                        <p className="font-medium">{act.pregunta}</p>
                        <p className="text-sm text-muted-foreground">
                          {TIPOS_ACTIVIDAD.find(t => t.value === act.tipo)?.label} • {act.puntos} pts
                        </p>
                      </div>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => handleEditarActividad(act, idx)}
                        title="Editar actividad"
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => handleEliminarActividad(idx)}
                        title="Eliminar actividad"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              )}

              {formData.actividades.length === 0 && (
                <div className="rounded-lg bg-yellow-50 p-4 text-yellow-900 dark:bg-yellow-900/20 dark:text-yellow-200">
                  ⚠️ Debes agregar al menos una actividad para continuar
                </div>
              )}

              <div className="flex gap-3">
                <Button type="button" variant="outline" onClick={() => setStep(2)}>
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Anterior
                </Button>
                <Button 
                  type="button" 
                  onClick={() => setStep(4)} 
                  className="flex-1"
                  disabled={formData.actividades.length === 0}
                >
                  Siguiente: Multimedia
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* PASO 4: Multimedia */}
        {step === 4 && (
          <Card>
            <CardHeader>
              <CardTitle>Paso 4: Recursos Multimedia 📸🎵 (Opcional)</CardTitle>
              <CardDescription>Próximamente: subir imágenes, audios o videos</CardDescription>
            </CardHeader>

            <CardContent className="space-y-6">
              <div className="text-center p-8 border-2 border-dashed rounded-lg">
                <p className="text-muted-foreground">
                  💡 La funcionalidad de multimedia se implementará próximamente
                </p>
              </div>

              <div className="flex gap-3">
                <Button type="button" variant="outline" onClick={() => setStep(3)}>
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Anterior
                </Button>
                <Button type="submit" className="flex-1" disabled={saving}>
                  {saving ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Creando lección...
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      Crear Lección Completa
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </form>

      {/* Modal de Actividades */}
      <ActivityModal
        open={modalActividadOpen}
        onOpenChange={setModalActividadOpen}
        tipoActividad={tipoActividadModal}
        onGuardar={handleGuardarActividad}
        actividadEditar={actividadEditando}
      />
    </>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/media-library-preview.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/media-library-preview.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { ImageIcon, Music, Video, FileText } from "lucide-react"
import { useState, useEffect } from "react"
import { multimediaAPI } from "@/lib/api"

export function MediaLibraryPreview() {
  const [mediaStats, setMediaStats] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    cargarEstadisticas()
  }, [])

  const cargarEstadisticas = async () => {
    try {
      const stats = await multimediaAPI.estadisticas()
      setMediaStats(stats)
    } catch (error) {
      console.error("Error al cargar estadísticas multimedia:", error)
    } finally {
      setLoading(false)
    }
  }

  const getMediaData = () => {
    if (!mediaStats?.por_tipo) {
      return [
        { type: "Imágenes", count: 0, icon: ImageIcon, color: "text-primary" },
        { type: "Audio", count: 0, icon: Music, color: "text-secondary" },
        { type: "Videos", count: 0, icon: Video, color: "text-accent" },
        { type: "Documentos", count: 0, icon: FileText, color: "text-muted-foreground" },
      ]
    }

    return [
      { 
        type: "Imágenes", 
        count: mediaStats.por_tipo.imagen || 0, 
        icon: ImageIcon, 
        color: "text-primary" 
      },
      { 
        type: "Audio", 
        count: mediaStats.por_tipo.audio || 0, 
        icon: Music, 
        color: "text-secondary" 
      },
      { 
        type: "Videos", 
        count: mediaStats.por_tipo.video || 0, 
        icon: Video, 
        color: "text-accent" 
      },
      { 
        type: "Documentos", 
        count: mediaStats.por_tipo.documento || 0, 
        icon: FileText, 
        color: "text-muted-foreground" 
      },
    ]
  }

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h3 className="font-bold">Biblioteca Multimedia</h3>
        <Link href="/admin/multimedia" className="text-sm text-primary hover:underline">
          Ver Todo
        </Link>
      </div>

      {loading ? (
        <div className="py-8 text-center text-sm text-muted-foreground">
          Cargando estadísticas...
        </div>
      ) : (
        <div className="space-y-3">
          {getMediaData().map((stat, index) => {
            const Icon = stat.icon
            return (
              <div key={index} className="flex items-center justify-between rounded-lg bg-muted/50 p-3">
                <div className="flex items-center gap-3">
                  <div className={`flex h-10 w-10 items-center justify-center rounded-lg bg-background ${stat.color}`}>
                    <Icon className="h-5 w-5" />
                  </div>
                  <span className="font-medium">{stat.type}</span>
                </div>
                <Badge variant="secondary">{stat.count}</Badge>
              </div>
            )
          })}
          
          {mediaStats && (
            <div className="mt-4 rounded-lg bg-primary/5 p-3">
              <p className="text-xs text-muted-foreground">
                Espacio total: <span className="font-semibold">{mediaStats.tamano_total_mb || 0} MB</span>
              </p>
            </div>
          )}
        </div>
      )}
    </Card>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/quick-admin-actions.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/quick-admin-actions.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { Plus, Upload, FileText, Settings, Users, BookOpen } from "lucide-react"

export function QuickAdminActions() {
  const actions = [
    {
      label: "Crear Lección",
      href: "/admin/lecciones/crear",
      icon: Plus,
      color: "bg-primary/10 text-primary",
      description: "Nueva lección educativa"
    },
    {
      label: "Ver Lecciones",
      href: "/admin/lecciones",
      icon: BookOpen,
      color: "bg-blue-500/10 text-blue-600",
      description: "Gestionar contenido"
    },
    {
      label: "Biblioteca Multimedia",
      href: "/admin/multimedia",
      icon: Upload,
      color: "bg-secondary/10 text-secondary",
      description: "Archivos y recursos"
    },
    {
      label: "Gestionar Usuarios",
      href: "/admin/usuarios",
      icon: Users,
      color: "bg-green-500/10 text-green-600",
      description: "Administrar usuarios"
    },
    {
      label: "Reportes",
      href: "/admin/reportes",
      icon: FileText,
      color: "bg-accent/10 text-accent",
      description: "Estadísticas y análisis"
    },
    {
      label: "Configuración",
      href: "/admin/configuracion",
      icon: Settings,
      color: "bg-muted text-muted-foreground",
      description: "Ajustes del sistema"
    },
  ]

  return (
    <Card className="p-6">
      <h3 className="mb-4 font-bold">Acciones Rápidas</h3>
      <div className="space-y-2">
        {actions.map((action, index) => {
          const Icon = action.icon
          return (
            <Link key={index} href={action.href}>
              <Button variant="ghost" className="w-full justify-start gap-3 h-auto py-3">
                <div className={`flex h-10 w-10 shrink-0 items-center justify-center rounded-lg ${action.color}`}>
                  <Icon className="h-5 w-5" />
                </div>
                <div className="flex flex-col items-start">
                  <span className="font-medium">{action.label}</span>
                  <span className="text-xs text-muted-foreground">{action.description}</span>
                </div>
              </Button>
            </Link>
          )
        })}
      </div>
    </Card>
  )
}


================================================================================
# ARCHIVO: front-end/components/admin/recent-lessons.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/recent-lessons.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { Edit, Eye, Trash2, Loader2 } from "lucide-react"
import { useState, useEffect } from "react"
import { leccionesAPI, type Leccion } from "@/lib/api"
import { toast } from "sonner"
import { formatDistanceToNow } from "date-fns"
import { es } from "date-fns/locale"

export function RecentLessons() {
  const [lessons, setLessons] = useState<Leccion[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    cargarLecciones()
  }, [])

  const cargarLecciones = async () => {
    try {
      setLoading(true)
      const response = await leccionesAPI.listar({ 
        por_pagina: 5,
        pagina: 1
      })
      setLessons(response.lecciones || [])
    } catch (error: any) {
      console.error("Error al cargar lecciones:", error)
      toast.error("Error al cargar lecciones recientes")
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id: number, titulo: string) => {
    if (!confirm(`¿Archivar la lección "${titulo}"?`)) return

    try {
      await leccionesAPI.eliminar(id)
      toast.success("Lección archivada")
      cargarLecciones()
    } catch (error: any) {
      toast.error(error.message || "Error al archivar")
    }
  }

  const formatearFecha = (fecha: string) => {
    try {
      return formatDistanceToNow(new Date(fecha), { 
        addSuffix: true,
        locale: es 
      })
    } catch {
      return "Fecha no disponible"
    }
  }

  const getEstadoBadge = (estado: string) => {
    const variants = {
      publicada: "default",
      borrador: "secondary",
      archivada: "outline"
    }
    
    const labels = {
      publicada: "Publicada",
      borrador: "Borrador",
      archivada: "Archivada"
    }
    
    return (
      <Badge variant={variants[estado as keyof typeof variants] as any}>
        {labels[estado as keyof typeof labels] || estado}
      </Badge>
    )
  }

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-xl font-bold">Lecciones Recientes</h2>
        <Link href="/admin/lecciones/crear">
          <Button>Crear Lección</Button>
        </Link>
      </div>

      {loading ? (
        <div className="flex items-center justify-center py-8">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
        </div>
      ) : lessons.length === 0 ? (
        <div className="py-8 text-center">
          <p className="text-sm text-muted-foreground mb-4">
            No hay lecciones aún
          </p>
          <Link href="/admin/lecciones/crear">
            <Button variant="outline">Crear primera lección</Button>
          </Link>
        </div>
      ) : (
        <div className="space-y-3">
          {lessons.map((lesson) => (
            <div
              key={lesson.id}
              className="rounded-xl border-2 border-border bg-card p-4 transition-all hover:border-primary/50"
            >
              <div className="flex items-start justify-between gap-4">
                <div className="flex-1">
                  <div className="mb-2 flex items-center gap-2">
                    <h3 className="font-semibold">{lesson.titulo}</h3>
                    {getEstadoBadge(lesson.estado || 'borrador')}
                  </div>
                  <div className="flex items-center gap-3 text-sm text-muted-foreground">
                    <span>Nivel: {lesson.nivel}</span>
                    <span>•</span>
                    <span>{lesson.idioma}</span>
                    <span>•</span>
                    <span>{lesson.duracion_estimada} min</span>
                  </div>
                  {lesson.actualizado_en && (
                    <p className="mt-2 text-xs text-muted-foreground">
                      {formatearFecha(lesson.actualizado_en)}
                    </p>
                  )}
                </div>

                <div className="flex gap-2">
                  <Link href={`/lecciones/${lesson.id}`}>
                    <Button variant="ghost" size="icon" title="Vista previa">
                      <Eye className="h-4 w-4" />
                    </Button>
                  </Link>
                  <Link href={`/admin/lecciones/${lesson.id}/editar`}>
                    <Button variant="ghost" size="icon" title="Editar">
                      <Edit className="h-4 w-4" />
                    </Button>
                  </Link>
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    title="Archivar"
                    onClick={() => handleDelete(lesson.id!, lesson.titulo)}
                  >
                    <Trash2 className="h-4 w-4 text-destructive" />
                  </Button>
                </div>
              </div>
            </div>
          ))}
          
          <div className="pt-2">
            <Link href="/admin/lecciones">
              <Button variant="outline" className="w-full">
                Ver todas las lecciones
              </Button>
            </Link>
          </div>
        </div>
      )}
    </Card>
  )
}


================================================================================
# ARCHIVO: front-end/components/auth/level-assignment-flow.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/auth/level-assignment-flow.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { useToast } from "@/hooks/use-toast"
import { BookOpen, Brain, CheckCircle2, Loader2 } from "lucide-react"

type Step = "choice" | "evaluation" | "manual" | "results"

const LEVELS = [
  { id: "A1", name: "Principiante", description: "Empezando desde cero" },
  { id: "A2", name: "Elemental", description: "Conocimientos básicos" },
  { id: "B1", name: "Intermedio", description: "Conversación cotidiana" },
  { id: "B2", name: "Intermedio Alto", description: "Fluidez en la mayoría de situaciones" },
  { id: "C1", name: "Avanzado", description: "Dominio del idioma" },
  { id: "C2", name: "Maestría", description: "Nivel nativo" },
]

const EVALUATION_QUESTIONS = [
  { question: "How do you say 'Hello' in English?", options: ["Hello", "Goodbye", "Thank you", "Please"], correct: 0 },
  { question: "What is the past tense of 'go'?", options: ["goed", "went", "gone", "going"], correct: 1 },
  { question: "Complete: 'I ___ to the store yesterday'", options: ["go", "goes", "went", "going"], correct: 2 },
  { question: "Which sentence is correct?", options: ["She don't like pizza", "She doesn't likes pizza", "She doesn't like pizza", "She not like pizza"], correct: 2 },
  { question: "What does 'although' mean?", options: ["because", "but/however", "therefore", "also"], correct: 1 },
  { question: "Choose the correct form: 'If I ___ rich, I would travel the world'", options: ["am", "was", "were", "be"], correct: 2 },
  { question: "What is a synonym for 'ubiquitous'?", options: ["rare", "everywhere", "beautiful", "difficult"], correct: 1 },
  { question: "Complete the idiom: 'It's raining cats and ___'", options: ["dogs", "birds", "fish", "mice"], correct: 0 },
  { question: "Which is the correct passive form: 'They built the house in 1990'", options: ["The house built in 1990", "The house was built in 1990", "The house is built in 1990", "The house has built in 1990"], correct: 1 },
  { question: "What does 'serendipity' mean?", options: ["A happy accident", "A sad moment", "A difficult situation", "A planned event"], correct: 0 },
]

export function LevelAssignmentFlow() {
  const router = useRouter()
  const { toast } = useToast()
  const [step, setStep] = useState<Step>("choice")
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<number[]>([])
  const [selectedLevel, setSelectedLevel] = useState<string>("")
  const [isLoading, setIsLoading] = useState(false)
  const [calculatedLevel, setCalculatedLevel] = useState<string>("")
  const [idioma, setIdioma] = useState<string>("")
  const [rol, setRol] = useState<string>("")

  // 🔹 Obtenemos datos desde localStorage
  useEffect(() => {
    const storedIdioma = localStorage.getItem("idioma")
    const storedRol = localStorage.getItem("rol")
    if (storedIdioma) setIdioma(storedIdioma)
    if (storedRol) setRol(storedRol)
  }, [])

  // 🚫 Bloqueo para roles no permitidos
  useEffect(() => {
    if (rol === "admin" || rol === "profesor" || rol === "mantenimiento") {
      toast({
        title: "Acceso restringido",
        description: "Esta página solo está disponible para estudiantes.",
        variant: "destructive",
      })
      router.push("/dashboard")
    }
  }, [rol, router, toast])

  const handleStartEvaluation = () => {
    if (idioma.toLowerCase() !== "inglés") {
      toast({
        title: "Curso en desarrollo",
        description: `El test para ${idioma} estará disponible próximamente.`,
      })
      return
    }
    setStep("evaluation")
  }

  const handleManualSelection = () => setStep("manual")

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...answers, answerIndex]
    setAnswers(newAnswers)

    if (currentQuestion < EVALUATION_QUESTIONS.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
    } else {
      const correctAnswers = newAnswers.filter(
        (answer, index) => answer === EVALUATION_QUESTIONS[index].correct
      ).length
      const percentage = (correctAnswers / EVALUATION_QUESTIONS.length) * 100

      let level = "A1"
      if (percentage >= 90) level = "C2"
      else if (percentage >= 75) level = "C1"
      else if (percentage >= 60) level = "B2"
      else if (percentage >= 45) level = "B1"
      else if (percentage >= 30) level = "A2"

      setCalculatedLevel(level)
      setStep("results")
    }
  }

  const handleLevelSelect = (levelId: string) => setSelectedLevel(levelId)

  const updateLevel = async (nivel: string) => {
    setIsLoading(true)
    const correo = localStorage.getItem("correo")

    if (!correo) {
      toast({
        title: "Error",
        description: "No se encontró el correo del usuario. Por favor inicia sesión o regístrate nuevamente.",
        variant: "destructive",
      })
      setIsLoading(false)
      return
    }

    try {
      const res = await fetch("http://localhost:5000/api/usuario/actualizar-nivel", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ correo, nivel }),
      })

      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Error al actualizar nivel")

      toast({
        title: "Nivel asignado exitosamente",
        description: `Tu nivel es ${nivel}`,
      })

      localStorage.removeItem("correo")
      localStorage.removeItem("idioma")
      localStorage.removeItem("rol")

      router.push("/dashboard")
    } catch (err: any) {
      toast({
        title: "Error",
        description: err.message,
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleConfirmLevel = () => updateLevel(selectedLevel)
  const handleConfirmEvaluationLevel = () => updateLevel(calculatedLevel)

  // ----- PANTALLAS -----
  if (step === "choice") {
    return (
      <Card className="p-8">
        <div className="mb-6 text-center">
          <h1 className="text-3xl font-bold">Asigna tu Nivel</h1>
          <p className="mt-2 text-muted-foreground">
            Elige cómo quieres determinar tu nivel {idioma ? `de ${idioma}` : ""}
          </p>
        </div>

        <div className="grid gap-4 md:grid-cols-2">
          <button
            onClick={handleStartEvaluation}
            className="group flex flex-col items-center gap-4 rounded-xl border-2 border-border bg-card p-6 hover:border-primary hover:bg-primary/5"
          >
            <div className="flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 text-primary group-hover:bg-primary group-hover:text-primary-foreground">
              <Brain className="h-8 w-8" />
            </div>
            <div>
              <h3 className="text-lg font-semibold">Realizar Evaluación</h3>
              <p className="mt-1 text-sm text-muted-foreground">
                Responde 10 preguntas para determinar tu nivel
              </p>
            </div>
          </button>

          <button
            onClick={handleManualSelection}
            className="group flex flex-col items-center gap-4 rounded-xl border-2 border-border bg-card p-6 hover:border-secondary hover:bg-secondary/5"
          >
            <div className="flex h-16 w-16 items-center justify-center rounded-full bg-secondary/10 text-secondary group-hover:bg-secondary group-hover:text-secondary-foreground">
              <BookOpen className="h-8 w-8" />
            </div>
            <div>
              <h3 className="text-lg font-semibold">Seleccionar Nivel</h3>
              <p className="mt-1 text-sm text-muted-foreground">
                Ya conozco mi nivel y quiero elegirlo manualmente
              </p>
            </div>
          </button>
        </div>
      </Card>
    )
  }

  if (step === "evaluation") {
    const question = EVALUATION_QUESTIONS[currentQuestion]
    const progress = ((currentQuestion + 1) / EVALUATION_QUESTIONS.length) * 100

    return (
      <Card className="p-8">
        <div className="mb-6">
          <div className="mb-2 flex justify-between text-sm">
            <span className="text-muted-foreground">
              Pregunta {currentQuestion + 1} de {EVALUATION_QUESTIONS.length}
            </span>
            <span className="font-medium">{Math.round(progress)}%</span>
          </div>
          <div className="h-2 rounded-full bg-muted">
            <div
              className="h-full bg-primary transition-all"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>

        <h2 className="mb-6 text-2xl font-bold">{question.question}</h2>

        <div className="grid gap-3">
          {question.options.map((option, index) => (
            <button
              key={index}
              onClick={() => handleAnswerSelect(index)}
              className="rounded-xl border-2 border-border bg-card p-4 text-left hover:border-primary hover:bg-primary/5"
            >
              {option}
            </button>
          ))}
        </div>
      </Card>
    )
  }

  if (step === "results") {
    const correctAnswers = answers.filter(
      (a, i) => a === EVALUATION_QUESTIONS[i].correct
    ).length
    const percentage = Math.round((correctAnswers / EVALUATION_QUESTIONS.length) * 100)
    const levelInfo = LEVELS.find((l) => l.id === calculatedLevel)

    return (
      <Card className="p-8 text-center">
        <div className="mx-auto mb-4 flex h-20 w-20 items-center justify-center rounded-full bg-success/10">
          <CheckCircle2 className="h-10 w-10 text-success" />
        </div>
        <h1 className="text-3xl font-bold mb-2">Evaluación Completada</h1>
        <p className="text-muted-foreground mb-4">
          Has respondido correctamente {correctAnswers} de {EVALUATION_QUESTIONS.length} preguntas
        </p>

        <div className="mb-6 rounded-xl bg-primary/10 p-6">
          <p className="text-sm font-medium text-primary">Tu nivel recomendado es</p>
          <h2 className="mt-2 text-4xl font-bold text-primary">{levelInfo?.id}</h2>
          <p className="text-lg font-medium">{levelInfo?.name}</p>
          <p className="text-sm text-muted-foreground mt-1">{levelInfo?.description}</p>
          <div className="mt-4">
            <div className="text-2xl font-bold">{percentage}%</div>
            <div className="text-sm text-muted-foreground">Precisión</div>
          </div>
        </div>

        <Button onClick={handleConfirmEvaluationLevel} disabled={isLoading} className="w-full">
          {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : "Confirmar y Continuar"}
        </Button>
      </Card>
    )
  }

  if (step === "manual") {
    return (
      <Card className="p-8">
        <h1 className="text-2xl font-bold text-center mb-4">Selecciona tu Nivel</h1>
        <div className="grid gap-3 mb-6">
          {LEVELS.map((level) => (
            <button
              key={level.id}
              onClick={() => handleLevelSelect(level.id)}
              className={`rounded-xl border-2 p-4 text-left ${
                selectedLevel === level.id
                  ? "border-primary bg-primary/5"
                  : "border-border hover:border-primary/50 hover:bg-primary/5"
              }`}
            >
              <div className="flex justify-between items-center">
                <div>
                  <span className="text-lg font-bold mr-2">{level.id}</span>
                  <span className="font-semibold">{level.name}</span>
                  <p className="text-sm text-muted-foreground">{level.description}</p>
                </div>
                {selectedLevel === level.id && <CheckCircle2 className="h-6 w-6 text-primary" />}
              </div>
            </button>
          ))}
        </div>

        <Button
          onClick={handleConfirmLevel}
          className="w-full"
          disabled={!selectedLevel || isLoading}
        >
          {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : "Confirmar Nivel"}
        </Button>

        <div className="mt-4 text-center">
          <button onClick={() => setStep("choice")} className="text-sm text-primary hover:underline">
            Volver atrás
          </button>
        </div>
      </Card>
    )
  }

  return null
}



================================================================================
# ARCHIVO: front-end/components/auth/login-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/auth/login-form.tsx
================================================================================

"use client"

import type React from "react"
import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/hooks/use-toast"
import Link from "next/link"
import { Eye, EyeOff, Loader2, ChevronDown, ChevronUp, User, AlertCircle, RefreshCw } from "lucide-react"
// Importa la función setAuthData de tu librería auth.ts
import { authStorage } from "@/lib/auth" 
// Importar authAPI (opcional, pero buena práctica)
// import { authAPI } from "@/lib/api" // No necesitas importar authAPI si usas fetch directo aquí

const TEST_USERS = [
  {
    name: "Estudiante Demo",
    email: "estudiante@speaklexi.com",
    password: "estudiante123",
    role: "estudiante",
    description: "Acceso completo al módulo de aprendizaje",
    dashboard: "/dashboard",
  },
  {
    name: "Profesor Demo",
    email: "profesor@speaklexi.com",
    password: "profesor123",
    role: "profesor",
    description: "Acceso a estadísticas y retroalimentación",
    dashboard: "/profesor/dashboard",
  },
  {
    name: "Admin Demo",
    email: "admin@speaklexi.com",
    password: "admin123",
    role: "admin",
    description: "Gestión de contenido y lecciones",
    dashboard: "/admin/dashboard",
  },
  {
    name: "Mantenimiento Demo",
    email: "mantenimiento@speaklexi.com",
    password: "mantenimiento123",
    role: "mantenimiento",
    description: "Reportes y tareas programadas",
    dashboard: "/mantenimiento/dashboard",
  },
]

export function LoginForm() {
  const router = useRouter()
  const { toast } = useToast()
  
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showTestUsers, setShowTestUsers] = useState(false)
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  })

  const [cuentaDesactivada, setCuentaDesactivada] = useState(false)
  const [diasRestantes, setDiasRestantes] = useState(0)
  const [userId, setUserId] = useState<string | null>(null) // Para reactivación
  const [error, setError] = useState("")

  const handleTestUserClick = (user: (typeof TEST_USERS)[0]) => {
    setFormData({
      email: user.email,
      password: user.password,
    })
    setShowTestUsers(false)
    setCuentaDesactivada(false)
    setError("")
    
    toast({
      title: "Credenciales cargadas",
      description: `Listo para iniciar sesión como ${user.role}`,
    })
  }

  const handleReactivar = async () => {
    if (!userId) {
      toast({
        title: "Error",
        description: "No se pudo identificar el usuario para reactivar",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)
    setError("")
    
    try {
      // Considera mover esta lógica a userAPI en api.ts si la usas en otro lugar
      const res = await fetch(`http://localhost:5000/api/usuario/reactivar/${userId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ password: formData.password }),
      })

      const data = await res.json() // Intenta parsear siempre

      if (!res.ok) {
        throw new Error(data.error || "Error al reactivar la cuenta")
      }

      toast({
        title: "¡Cuenta reactivada!",
        description: data.mensaje || "Tu cuenta ha sido reactivada exitosamente",
      })

      setCuentaDesactivada(false)
      setError("")
      
      // Intenta hacer login automáticamente después de reactivar
      setTimeout(() => {
        // Simula un evento submit para reusar la lógica de handleSubmit
        handleSubmit({ preventDefault: () => {} } as React.FormEvent) 
      }, 1000)

    } catch (error: any) {
      console.error("Error al reactivar:", error)
      let errorMessage = error.message || "Error desconocido al reactivar"
      if (error.message === "Failed to fetch") {
        errorMessage = "No se pudo conectar con el servidor."
      }
      setError(errorMessage)
      toast({ title: "Error", description: errorMessage, variant: "destructive" })
    } finally {
      setIsLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setCuentaDesactivada(false) // Resetea estado de cuenta desactivada
    setError("") // Limpia errores previos

    try {
      // Usa el fetch directo como lo tenías, ya que manejas errores específicos aquí
       const res = await fetch("http://localhost:5000/api/auth/login", {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify({
           correo: formData.email,
           password: formData.password,
         }),
       })

      const data = await res.json() // Intenta parsear la respuesta siempre
      console.log("📦 Respuesta completa del backend:", data)

      if (!res.ok) {
        // --- Manejo de errores específicos ---
        if (data.codigo === "CUENTA_DESACTIVADA") {
          setUserId(data.usuario_id?.toString() || null) // Guarda el ID para reactivar
          setCuentaDesactivada(true)
          setDiasRestantes(data.dias_restantes || 0)
          toast({
            title: "Cuenta desactivada",
            description: `Tienes ${data.dias_restantes || 0} días para reactivarla.`,
            variant: "destructive",
          })
          // No lances error aquí, muestra el botón de reactivar
        } else if (data.codigo === "CUENTA_ELIMINADA") {
          setError("Esta cuenta ha sido eliminada permanentemente.")
          toast({ title: "Cuenta eliminada", description: "Esta cuenta ya no existe.", variant: "destructive"})
        } else if (data.codigo === "EMAIL_NOT_VERIFIED") {
          toast({ title: "Email no verificado", description: "Revisa tu correo o reenvía el código.", variant: "destructive" })
          setTimeout(() => router.push(`/verificar-email?email=${encodeURIComponent(formData.email)}`), 1500)
        } else {
          // Error genérico de login (credenciales inválidas, etc.)
          throw new Error(data.error || `Error ${res.status}: ${res.statusText}`)
        }
         setIsLoading(false); // Detiene el loading en caso de error manejado
         return; // Detiene la ejecución si hubo un error manejado
      }

      // ✅ LOGIN EXITOSO
      const usuario = data.usuario
      const access_token = data.access_token 

      // Validar que ambos datos existen antes de proceder
      if (!usuario || typeof usuario !== 'object' || !access_token || typeof access_token !== 'string') {
        console.error("Respuesta inválida del servidor:", data); 
        throw new Error("Respuesta inválida del servidor tras login exitoso.");
      }

      console.log("✅ Usuario recibido:", usuario)
      console.log("🔑 Token recibido:", access_token ? 'Sí' : 'No') // Verifica si el token llegó

      // --- USA authStorage PARA GUARDAR TODO ---
      authStorage.setAuthData(usuario, access_token) 
      // Verifica que se guardó correctamente
      console.log("🔍 Verificando localStorage - Token:", localStorage.getItem('token') ? 'Guardado' : 'NO Guardado');
      console.log("🔍 Verificando localStorage - UserID:", localStorage.getItem('userId') ? 'Guardado' : 'NO Guardado');


      toast({ title: "✅ Inicio de sesión exitoso", description: `Bienvenido ${usuario.nombre}` })

      // --- Redirección ---
      const rol = usuario.rol?.toLowerCase() || 'estudiante' // Asegura que rol exista y sea string
      console.log("🔀 Rol detectado:", rol)
      
      let redirectPath = "/dashboard" // Default para estudiante
      if (rol === "profesor" || rol === "teacher") redirectPath = "/profesor/dashboard"
      else if (rol === "admin" || rol === "administrador") redirectPath = "/admin/dashboard"
      else if (rol === "mantenimiento" || rol === "maintenance") redirectPath = "/mantenimiento/dashboard"

      console.log("🚀 Redirigiendo a:", redirectPath)
      
      // Forzar recarga para que el middleware/layout detecte los nuevos datos de sesión
      window.location.href = redirectPath
      // No necesitas setIsLoading(false) aquí porque la página recargará

    } catch (error: any) {
      console.error("❌ Error en handleSubmit:", error)
      let errorMessage = error.message || "Ocurrió un error inesperado."
      if (error.message === "Failed to fetch") {
        errorMessage = "No se pudo conectar al servidor. Intenta más tarde."
      }
      setError(errorMessage)
      toast({ title: "Error de inicio de sesión", description: errorMessage, variant: "destructive" })
      setIsLoading(false); // Asegúrate de detener el loading en el catch
    } 
    // No necesitas finally si la redirección ocurre en el try
  }

  // --- El JSX (la parte visual del formulario) ---
  return (
    <div className="space-y-4">
      {/* ALERTA DE ERRORES GENERALES (excluyendo cuenta desactivada) */}
      {error && !cuentaDesactivada && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* ALERTA DE CUENTA DESACTIVADA */}
      {cuentaDesactivada && (
        <Alert className="border-orange-500 bg-orange-50 dark:bg-orange-950">
          <RefreshCw className="h-4 w-4 text-orange-600" />
          <AlertDescription>
            <strong className="text-orange-900 dark:text-orange-100">
              Tu cuenta está desactivada
            </strong>
            <p className="mt-2 text-sm text-orange-800 dark:text-orange-200">
              {diasRestantes > 0 ? (
                <>
                  Tienes <strong>{diasRestantes} días</strong> para reactivarla. 
                  Después será eliminada permanentemente.
                </>
              ) : (
                "El período de recuperación ha expirado. La cuenta será eliminada."
              )}
            </p>
            {/* Botón de reactivar solo si hay días restantes */}
            {diasRestantes > 0 && (
              <Button
                onClick={handleReactivar}
                disabled={isLoading}
                className="mt-3 w-full bg-orange-600 hover:bg-orange-700 text-white" // Estilo naranja
              >
                {isLoading ? (
                  <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Reactivando...</>
                ) : (
                  <><RefreshCw className="mr-2 h-4 w-4" /> Reactivar mi cuenta</>
                )}
              </Button>
            )}
          </AlertDescription>
        </Alert>
      )}

      {/* SECCIÓN USUARIOS DE PRUEBA */}
      <div className="rounded-lg border bg-muted/30 overflow-hidden">
        <button
          type="button"
          onClick={() => setShowTestUsers(!showTestUsers)}
          className="w-full flex items-center justify-between p-3 text-sm font-medium hover:bg-muted/50"
        >
          <span className="flex items-center gap-2"><User className="h-4 w-4" /> Usuarios de Prueba</span>
          {showTestUsers ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
        </button>
        {showTestUsers && (
          <div className="p-3 pt-0 space-y-2">
            {TEST_USERS.map((user) => (
              <button
                key={user.email}
                type="button"
                onClick={() => handleTestUserClick(user)}
                className="w-full text-left p-3 rounded-md border bg-background hover:bg-accent hover:border-primary"
              >
                <div className="flex items-start justify-between gap-2">
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-sm">{user.name}</p>
                    <p className="text-xs text-muted-foreground truncate">{user.email}</p>
                    <p className="text-xs text-muted-foreground mt-1">{user.description}</p>
                  </div>
                  <span className="text-xs font-medium px-2 py-1 rounded-full bg-primary/10 text-primary whitespace-nowrap">
                    {user.role}
                  </span>
                </div>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* FORMULARIO PRINCIPAL DE LOGIN */}
      {/* No mostrar si la cuenta está desactivada y no se puede reactivar */}
      {!(cuentaDesactivada && diasRestantes <= 0) && (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Correo Electrónico</Label>
            <Input
              id="email" type="email" placeholder="tu@email.com"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              required disabled={isLoading || cuentaDesactivada} // Deshabilitar si está desactivada
            />
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="password">Contraseña</Label>
              <Link href="/recuperar-contrasena" className="text-sm text-primary hover:underline" tabIndex={-1}>
                ¿Olvidaste tu contraseña?
              </Link>
            </div>
            <div className="relative">
              <Input
                id="password" type={showPassword ? "text" : "password"} placeholder="••••••••"
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                required disabled={isLoading || cuentaDesactivada} // Deshabilitar si está desactivada
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
                disabled={isLoading || cuentaDesactivada}
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </button>
            </div>
          </div>
          <Button type="submit" className="w-full" disabled={isLoading || cuentaDesactivada}>
            {isLoading ? (
              <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Iniciando sesión...</>
            ) : ( "Iniciar Sesión" )}
          </Button>
        </form>
      )}

      {/* ENLACE A REGISTRO */}
      <div className="text-center text-sm text-muted-foreground">
        ¿No tienes cuenta?{" "}
        <Link href="/registro" className="text-primary hover:underline font-medium">
          Regístrate aquí
        </Link>
      </div>
    </div>
  )
}




================================================================================
# ARCHIVO: front-end/components/auth/recover-password-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/auth/recover-password-form.tsx
================================================================================

"use client"

import type React from "react"
import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { Loader2, Mail, CheckCircle } from "lucide-react"
import { authAPI } from "@/lib/api"

export function RecoverPasswordForm() {
  const router = useRouter()
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(false)
  const [email, setEmail] = useState("")
  const [emailSent, setEmailSent] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      const data = await authAPI.recuperarPassword(email)
      
      toast({
        title: "Correo enviado",
        description: data.mensaje || "Revisa tu bandeja de entrada",
      })
      
      setEmailSent(true)
      
      // Redirigir después de 3 segundos
      setTimeout(() => {
        router.push("/correo-enviado")
      }, 3000)
      
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "No se pudo enviar el correo",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  if (emailSent) {
    return (
      <div className="space-y-4 text-center">
        <div className="flex justify-center">
          <div className="rounded-full bg-green-100 p-3">
            <CheckCircle className="h-12 w-12 text-green-600" />
          </div>
        </div>
        
        <div className="space-y-2">
          <h3 className="text-lg font-semibold">¡Correo enviado!</h3>
          <p className="text-sm text-muted-foreground">
            Revisa tu bandeja de entrada en <strong>{email}</strong>
          </p>
          <p className="text-xs text-muted-foreground">
            Haz clic en el enlace del correo para restablecer tu contraseña
          </p>
        </div>

        <Button
          variant="ghost"
          className="w-full"
          onClick={() => router.push("/login")}
        >
          Volver al inicio de sesión
        </Button>
      </div>
    )
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="email">Correo Electrónico</Label>
        <div className="relative">
          <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
          <Input
            id="email"
            type="email"
            placeholder="tu@email.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="pl-10"
            required
          />
        </div>
        <p className="text-xs text-muted-foreground">
          Te enviaremos un enlace para restablecer tu contraseña
        </p>
      </div>

      <Button type="submit" className="w-full" disabled={isLoading}>
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Enviando...
          </>
        ) : (
          "Enviar Enlace de Recuperación"
        )}
      </Button>

      <Button
        type="button"
        variant="ghost"
        className="w-full"
        onClick={() => router.push("/login")}
      >
        Volver al inicio de sesión
      </Button>
    </form>
  )
}


================================================================================
# ARCHIVO: front-end/components/auth/register-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/auth/register-form.tsx
================================================================================

"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { Eye, EyeOff, Loader2, Shield } from "lucide-react"

export function RegisterForm() {
  const router = useRouter()
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [formData, setFormData] = useState({
    nombre: "",
    primerApellido: "",
    segundoApellido: "",
    correo: "",
    password: "",
    confirmPassword: "",
    idioma: "",
    nivel: "",
    rol: "estudiante", // 👈 nuevo campo por defecto
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    if (formData.password !== formData.confirmPassword) {
      toast({
        title: "Error",
        description: "Las contraseñas no coinciden",
        variant: "destructive",
      })
      setIsLoading(false)
      return
    }

    if (formData.password.length < 8) {
      toast({
        title: "Error",
        description: "La contraseña debe tener al menos 8 caracteres",
        variant: "destructive",
      })
      setIsLoading(false)
      return
    }

    try {
      const res = await fetch("http://localhost:5000/api/auth/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          nombre: formData.nombre,
          primer_apellido: formData.primerApellido,
          segundo_apellido: formData.segundoApellido,
          correo: formData.correo,
          password: formData.password,
          idioma: formData.idioma,
          nivel_actual: formData.nivel,
          rol: formData.rol, // 👈 se envía el rol temporal
        }),
      })

      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Error al registrar usuario")

      localStorage.setItem("correo", formData.correo)
      localStorage.setItem("idioma", formData.idioma)

      toast({
        title: "Cuenta creada exitosamente",
        description:
          formData.rol === "admin"
            ? "✅ Usuario admin creado (modo desarrollo)"
            : "Verifica tu correo electrónico para continuar",
      })

      router.push("/verificar-email")
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* Nombre */}
      <div className="space-y-2">
        <Label htmlFor="nombre">Nombre</Label>
        <Input
          id="nombre"
          type="text"
          placeholder="Juan"
          value={formData.nombre}
          onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}
          required
        />
      </div>

      {/* Primer Apellido */}
      <div className="space-y-2">
        <Label htmlFor="primerApellido">Primer Apellido</Label>
        <Input
          id="primerApellido"
          type="text"
          placeholder="Pérez"
          value={formData.primerApellido}
          onChange={(e) =>
            setFormData({ ...formData, primerApellido: e.target.value })
          }
          required
        />
      </div>

      {/* Segundo Apellido */}
      <div className="space-y-2">
        <Label htmlFor="segundoApellido">Segundo Apellido (opcional)</Label>
        <Input
          id="segundoApellido"
          type="text"
          placeholder="Martínez"
          value={formData.segundoApellido}
          onChange={(e) =>
            setFormData({ ...formData, segundoApellido: e.target.value })
          }
        />
      </div>

      {/* Correo */}
      <div className="space-y-2">
        <Label htmlFor="correo">Correo Electrónico</Label>
        <Input
          id="correo"
          type="email"
          placeholder="tu@email.com"
          value={formData.correo}
          onChange={(e) =>
            setFormData({ ...formData, correo: e.target.value })
          }
          required
        />
      </div>

      {/* Contraseña */}
      <div className="space-y-2">
        <Label htmlFor="password">Contraseña</Label>
        <div className="relative">
          <Input
            id="password"
            type={showPassword ? "text" : "password"}
            placeholder="Mínimo 8 caracteres"
            value={formData.password}
            onChange={(e) =>
              setFormData({ ...formData, password: e.target.value })
            }
            required
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
          >
            {showPassword ? (
              <EyeOff className="h-4 w-4" />
            ) : (
              <Eye className="h-4 w-4" />
            )}
          </button>
        </div>
      </div>

      {/* Confirmar Contraseña */}
      <div className="space-y-2">
        <Label htmlFor="confirmPassword">Confirmar Contraseña</Label>
        <Input
          id="confirmPassword"
          type="password"
          placeholder="Repite tu contraseña"
          value={formData.confirmPassword}
          onChange={(e) =>
            setFormData({ ...formData, confirmPassword: e.target.value })
          }
          required
        />
      </div>

      {/* Idioma */}
      <div className="space-y-2">
        <Label htmlFor="idioma">Idioma de aprendizaje</Label>
        <select
          id="idioma"
          className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring"
          value={formData.idioma}
          onChange={(e) =>
            setFormData({ ...formData, idioma: e.target.value })
          }
          required
        >
          <option value="">Selecciona un idioma</option>
          <option value="inglés">Inglés</option>
          <option value="francés">Francés</option>
          <option value="alemán">Alemán</option>
          <option value="italiano">Italiano</option>
        </select>
      </div>

      {/* ⚙️ Rol temporal (solo desarrollo) */}
      <div className="space-y-2 border rounded-md p-3 bg-muted/30">
        <Label htmlFor="rol" className="flex items-center gap-2">
          <Shield className="h-4 w-4 text-primary" />
          Rol temporal (solo desarrollo)
        </Label>
        <select
          id="rol"
          className="w-full rounded-md border border-input bg-background px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary"
          value={formData.rol}
          onChange={(e) => setFormData({ ...formData, rol: e.target.value })}
        >
          <option value="estudiante">Estudiante</option>
          <option value="profesor">Profesor</option>
          <option value="admin">Admin</option>
          <option value="mantenimiento">Mantenimiento</option>
        </select>
        <p className="text-xs text-muted-foreground mt-1">
          🔐 Solo para pruebas locales. Este campo será removido en producción.
        </p>
      </div>

      {/* Botón */}
      <Button type="submit" className="w-full" disabled={isLoading}>
        {isLoading ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Creando cuenta...
          </>
        ) : (
          "Crear Cuenta"
        )}
      </Button>
    </form>
  )
}



================================================================================
# ARCHIVO: front-end/components/auth/verify-email-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/auth/verify-email-form.tsx
================================================================================

"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useToast } from "@/hooks/use-toast"
import { Loader2 } from "lucide-react"

export function VerifyEmailForm() {
  const router = useRouter()
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(false)
  const [isResending, setIsResending] = useState(false)
  const [code, setCode] = useState(["", "", "", "", "", ""])
  const [email, setEmail] = useState("")

  // ✅ Recuperamos correo y rol del localStorage
  useEffect(() => {
    const storedEmail = localStorage.getItem("correo")
    const storedRole = localStorage.getItem("rol") || "estudiante"

    // 🔒 Si el usuario es admin, profesor o mantenimiento → redirigir
    if (["admin", "profesor", "mantenimiento"].includes(storedRole)) {
      toast({
        title: "Acceso no requerido",
        description: "Tu cuenta no requiere verificación de correo.",
      })
      router.push("/dashboard") // o la ruta principal de admin
      return
    }

    if (storedEmail) {
      setEmail(storedEmail)
    } else {
      toast({
        title: "Error",
        description: "No se encontró el correo del usuario. Regístrate nuevamente.",
        variant: "destructive",
      })
      router.push("/registro")
    }
  }, [router, toast])

  const handleChange = (index: number, value: string) => {
    if (value.length > 1) return
    const newCode = [...code]
    newCode[index] = value
    setCode(newCode)
    if (value && index < 5) {
      const nextInput = document.getElementById(`code-${index + 1}`)
      nextInput?.focus()
    }
  }

  const handleKeyDown = (index: number, e: React.KeyboardEvent) => {
    if (e.key === "Backspace" && !code[index] && index > 0) {
      const prevInput = document.getElementById(`code-${index - 1}`)
      prevInput?.focus()
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const verificationCode = code.join("")

    if (verificationCode.length !== 6) {
      toast({
        title: "Error",
        description: "Por favor ingresa el código completo",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)
    try {
      const res = await fetch("http://localhost:5000/api/auth/verificar-email", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          correo: email,
          codigo: verificationCode,
        }),
      })

      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Error al verificar el correo")

      toast({
        title: "Correo verificado",
        description: "Tu cuenta ha sido activada correctamente",
      })

      router.push("/asignar-nivel")
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleResend = async () => {
    setIsResending(true)
    try {
      const res = await fetch("http://localhost:5000/api/auth/reenviar-codigo", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ correo: email }),
      })

      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Error al reenviar código")

      toast({
        title: "Código reenviado",
        description: "Revisa tu correo electrónico",
      })
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setIsResending(false)
    }
  }

  return (
    <div className="space-y-6">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="flex justify-center gap-2">
          {code.map((digit, index) => (
            <Input
              key={index}
              id={`code-${index}`}
              type="text"
              inputMode="numeric"
              maxLength={1}
              value={digit}
              onChange={(e) => handleChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              className="h-14 w-12 text-center text-lg font-semibold"
              required
            />
          ))}
        </div>

        <Button type="submit" className="w-full" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Verificando...
            </>
          ) : (
            "Verificar Email"
          )}
        </Button>
      </form>

      <div className="text-center">
        <p className="text-sm text-muted-foreground">
          ¿No recibiste el código?{" "}
          <button
            onClick={handleResend}
            disabled={isResending}
            className="font-medium text-primary hover:underline disabled:opacity-50"
          >
            {isResending ? "Reenviando..." : "Reenviar código"}
          </button>
        </p>
      </div>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/dashboard/dashboard-header.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/dashboard/dashboard-header.tsx
================================================================================

"use client"

import { useEffect, useState } from "react"
import { Bell, Settings, LogOut, Languages, Home } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { useRouter } from "next/navigation"
// --- IMPORTACIÓN AÑADIDA ---
import { userAPI } from "@/lib/api" // Importar la API centralizada

interface DashboardHeaderProps {
  nombre?: string
  primerApellido?: string
  showBackButton?: boolean // Nueva prop para mostrar botón de regreso
}

const IDIOMA_FLAGS: { [key: string]: string } = {
  "Inglés": "🇺🇸",
  "Francés": "🇫🇷",
  "Alemán": "🇩🇪",
  "Italiano": "🇮🇹",
  "Español": "🇪🇸", // <-- Añadido por si acaso
}

export function DashboardHeader({ 
  nombre = "Usuario", 
  primerApellido = "",
  showBackButton = false // Por defecto no se muestra
}: DashboardHeaderProps) {
  const router = useRouter()
  const [idioma, setIdioma] = useState("Inglés")
  const [nivel, setNivel] = useState("A1")
  const [nombreUsuario, setNombreUsuario] = useState(nombre)
  const [apellidoUsuario, setApellidoUsuario] = useState(primerApellido)

  useEffect(() => {
    cargarDatosUsuario()
  }, [])

  // --- FUNCIÓN 'handleLogout' MOVIDA ARRIBA ---
  // Para poder llamarla en caso de error 401
  const handleLogout = () => {
    localStorage.clear()
    router.push("/login")
  }

  const cargarDatosUsuario = async () => {
    try {
      // --- INICIO DE MODIFICACIÓN ---
      // const userId = localStorage.getItem("userId") // No es necesario, userAPI.getPerfilCompleto lo maneja
      // if (!userId) return

      // const res = await fetch(`http://localhost:5000/api/usuario/perfil/${userId}`) // <-- NO USAR FETCH DIRECTO
      // const data = await res.json()

      // Usar la función centralizada de la API
      // Esta función (getPerfilCompleto) ya usa el token gracias a la corrección en api.ts
      const data = await userAPI.getPerfilCompleto()
      // --- FIN DE MODIFICACIÓN ---


      // if (res.ok) { // fetchAPI ya maneja las respuestas no-ok
        // Actualizar nombre del usuario
        if (data.usuario) {
          setNombreUsuario(data.usuario.nombre)
          setApellidoUsuario(data.usuario.primer_apellido)
        }
        
        // Actualizar perfil
        if (data.perfil) {
          setIdioma(data.perfil.idioma || "Inglés")
          setNivel(data.perfil.nivel_actual || "A1")
        }
      // }
    } catch (error: any) {
      console.error("Error al cargar datos del usuario:", error)
      
      // --- MANEJO DE ERROR 401 ---
      // Si el token es inválido o expiró (error 401), desloguear al usuario
      if (error.status === 401) {
        console.warn("Token no válido o expirado. Deslogueando...")
        handleLogout()
      }
    }
  }

  const handleBackToDashboard = () => {
    router.push("/dashboard")
  }

  // Iniciales corregidas: Primer Apellido + Nombre (PH en lugar de HP)
  const iniciales = nombreUsuario && apellidoUsuario 
    ? `${apellidoUsuario[0]}${nombreUsuario[0]}`.toUpperCase()
    : "U"

  return (
    <header className="sticky top-0 z-50 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between px-4">
        {/* Logo / Título con botón de regreso opcional */}
        <div className="flex items-center gap-3">
          {showBackButton && (
            <Button
              variant="ghost"
              size="icon"
              onClick={handleBackToDashboard}
              title="Volver al dashboard"
            >
              <Home className="h-5 w-5" />
            </Button>
          )}
          <h1 className="text-2xl font-bold cursor-pointer" onClick={handleBackToDashboard}>
            SpeakLexi
          </h1>
        </div>

        {/* Idioma Actual */}
        <div className="flex items-center gap-2">
          <Badge variant="secondary" className="flex items-center gap-2 px-3 py-1.5 text-sm">
            <span className="text-xl">{IDIOMA_FLAGS[idioma] || "🌍"}</span>
            <span className="font-medium">{idioma}</span>
            <span className="text-muted-foreground">•</span>
            <span className="font-semibold">{nivel}</span>
          </Badge>
        </div>

        {/* Acciones */}
        <div className="flex items-center gap-3">
          {/* Notificaciones */}
          <Button variant="ghost" size="icon" className="relative">
            <Bell className="h-5 w-5" />
            <span className="absolute -right-1 -top-1 flex h-5 w-5 items-center justify-center rounded-full bg-primary text-[10px] text-primary-foreground">
              3
            </span>
          </Button>

          {/* Menú de Usuario */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-10 w-10 rounded-full">
                <Avatar>
                  <AvatarFallback className="bg-primary text-primary-foreground">
                    {iniciales}
                  </AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>
                <div className="flex flex-col space-y-1">
                  {/* Mostrar nombre completo del usuario */}
                  <p className="text-sm font-medium">
                    {nombreUsuario} {apellidoUsuario}
                  </p>
                  <p className="text-xs text-muted-foreground">Estudiante</p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              
              {/* Solo Perfil y Configuración */}
              <DropdownMenuItem onClick={() => router.push("/perfil")}>
                <Settings className="mr-2 h-4 w-4" />
                Perfil
              </DropdownMenuItem>
              
              <DropdownMenuItem onClick={() => router.push("/perfil")}>
                <Settings className="mr-2 h-4 w-4" />
                Configuración
              </DropdownMenuItem>
              
              <DropdownMenuSeparator />
              
              <DropdownMenuItem onClick={handleLogout} className="text-destructive">
                <LogOut className="mr-2 h-4 w-4" />
                Cerrar sesión
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  )
}



================================================================================
# ARCHIVO: front-end/components/dashboard/progress-overview.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/dashboard/progress-overview.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Skeleton } from "@/components/ui/skeleton"
import { BookOpen, Target, Trophy, Zap } from "lucide-react"
import { useUserData } from "@/hooks/use-user-data"

export function ProgressOverview() {
  const { userData, isLoading } = useUserData()

  if (isLoading) {
    return (
      <Card className="p-6">
        <Skeleton className="h-6 w-32 mb-4" />
        <div className="grid gap-4 sm:grid-cols-2">
          {[1, 2, 3, 4].map((i) => (
            <Skeleton key={i} className="h-24 rounded-lg" />
          ))}
        </div>
        <Skeleton className="h-32 mt-6 rounded-lg" />
      </Card>
    )
  }

  // Datos dinámicos del usuario
  const totalXP = userData?.perfil.total_xp || 0
  const diasRacha = userData?.perfil.dias_racha || 0
  const nivelActual = userData?.perfil.nivel_actual || "A1"
  const idioma = userData?.perfil.idioma || "Inglés"

  // Calcular estadísticas
  const leccionesCompletadas = Math.floor(totalXP / 100) // 100 XP por lección (ejemplo)
  const totalLecciones = 50 // Esto debería venir del backend
  const logrosDesbloqueados = Math.floor(totalXP / 500) // 1 logro cada 500 XP (ejemplo)
  const totalLogros = 20

  // Calcular XP para siguiente nivel
  const nivelesXP: { [key: string]: number } = {
    A1: 1000,
    A2: 2000,
    B1: 3500,
    B2: 5000,
    C1: 7000,
    C2: 10000,
  }

  const xpNivelActual = nivelesXP[nivelActual] || 1000
  const xpParaSiguienteNivel = xpNivelActual
  const progresoNivel = Math.min((totalXP / xpParaSiguienteNivel) * 100, 100)
  const xpRestante = Math.max(xpParaSiguienteNivel - totalXP, 0)

  // Obtener siguiente nivel
  const niveles = ["A1", "A2", "B1", "B2", "C1", "C2"]
  const indexActual = niveles.indexOf(nivelActual)
  const siguienteNivel = indexActual < niveles.length - 1 ? niveles[indexActual + 1] : nivelActual

  const stats = [
    { 
      label: "Lecciones Completadas", 
      value: leccionesCompletadas, 
      total: totalLecciones, 
      icon: BookOpen, 
      color: "text-primary" 
    },
    { 
      label: "XP Total", 
      value: totalXP, 
      icon: Zap, 
      color: "text-accent" 
    },
    { 
      label: "Racha Actual", 
      value: diasRacha, 
      unit: diasRacha === 1 ? "día" : "días", 
      icon: Target, 
      color: "text-secondary" 
    },
    { 
      label: "Logros Desbloqueados", 
      value: logrosDesbloqueados, 
      total: totalLogros, 
      icon: Trophy, 
      color: "text-primary" 
    },
  ]

  return (
    <Card className="p-6">
      <h2 className="mb-4 text-xl font-bold">Tu Progreso</h2>

      <div className="grid gap-4 sm:grid-cols-2">
        {stats.map((stat, index) => {
          const Icon = stat.icon
          return (
            <div key={index} className="flex items-start gap-3 rounded-lg bg-muted/50 p-4">
              <div className={`flex h-10 w-10 items-center justify-center rounded-lg bg-background ${stat.color}`}>
                <Icon className="h-5 w-5" />
              </div>
              <div className="flex-1">
                <p className="text-sm text-muted-foreground">{stat.label}</p>
                <div className="mt-1 flex items-baseline gap-1">
                  <span className="text-2xl font-bold">{stat.value}</span>
                  {stat.unit && <span className="text-sm text-muted-foreground">{stat.unit}</span>}
                  {stat.total && <span className="text-sm text-muted-foreground">/ {stat.total}</span>}
                </div>
                {stat.total && (
                  <Progress 
                    value={(stat.value / stat.total) * 100} 
                    className="mt-2 h-2" 
                  />
                )}
              </div>
            </div>
          )
        })}
      </div>

      {/* Level Progress */}
      <div className="mt-6 rounded-lg bg-gradient-to-r from-primary/10 to-secondary/10 p-4">
        <div className="mb-2 flex items-center justify-between">
          <span className="font-semibold">
            Nivel {nivelActual} - {idioma}
          </span>
          <span className="text-sm text-muted-foreground">
            {totalXP} / {xpParaSiguienteNivel} XP
          </span>
        </div>
        <Progress value={progresoNivel} className="h-3" />
        <p className="mt-2 text-sm text-muted-foreground">
          {totalXP >= xpParaSiguienteNivel 
            ? `¡Felicidades! Has alcanzado el nivel ${nivelActual}` 
            : `${xpRestante} XP para alcanzar el nivel ${siguienteNivel}`}
        </p>
      </div>
    </Card>
  )
}


================================================================================
# ARCHIVO: front-end/components/dashboard/quick-actions.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/dashboard/quick-actions.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { BookOpen, Trophy, Users, Settings } from "lucide-react"

export function QuickActions() {
  const actions = [
    { label: "Ver Lecciones", href: "/lecciones", icon: BookOpen, color: "bg-primary/10 text-primary" },
    { label: "Mis Logros", href: "/logros", icon: Trophy, color: "bg-secondary/10 text-secondary" },
    { label: "Clasificación", href: "/clasificacion", icon: Users, color: "bg-accent/10 text-accent" },
    { label: "Configuración", href: "/perfil", icon: Settings, color: "bg-muted text-muted-foreground" },
  ]

  return (
    <Card className="p-6">
      <h3 className="mb-4 font-bold">Acciones Rápidas</h3>
      <div className="space-y-2">
        {actions.map((action, index) => {
          const Icon = action.icon
          return (
            <Link key={index} href={action.href}>
              <Button variant="ghost" className="w-full justify-start gap-3">
                <div className={`flex h-8 w-8 items-center justify-center rounded-lg ${action.color}`}>
                  <Icon className="h-4 w-4" />
                </div>
                {action.label}
              </Button>
            </Link>
          )
        })}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/dashboard/recent-lessons.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/dashboard/recent-lessons.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import Link from "next/link"
import { ChevronRight, Lock } from "lucide-react"

export function RecentLessons() {
  const lessons = [
    {
      id: 1,
      title: "Greetings and Introductions",
      description: "Learn how to greet people and introduce yourself",
      progress: 100,
      completed: true,
      xp: 10,
    },
    {
      id: 2,
      title: "Numbers 1-20",
      description: "Learn to count from 1 to 20 in English",
      progress: 75,
      completed: false,
      xp: 10,
    },
    {
      id: 3,
      title: "Colors and Shapes",
      description: "Learn basic colors and shapes",
      progress: 0,
      completed: false,
      xp: 10,
      locked: false,
    },
    {
      id: 4,
      title: "Family Members",
      description: "Learn vocabulary about family",
      progress: 0,
      completed: false,
      xp: 15,
      locked: true,
    },
  ]

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-xl font-bold">Tus Lecciones</h2>
        <Link href="/lecciones">
          <Button variant="ghost" size="sm">
            Ver Todas
            <ChevronRight className="ml-1 h-4 w-4" />
          </Button>
        </Link>
      </div>

      <div className="space-y-3">
        {lessons.map((lesson) => (
          <Link
            key={lesson.id}
            href={lesson.locked ? "#" : `/lecciones/${lesson.id}`}
            className={`block ${lesson.locked ? "cursor-not-allowed" : ""}`}
          >
            <div
              className={`rounded-xl border-2 p-4 transition-all ${
                lesson.locked
                  ? "border-border bg-muted/50 opacity-60"
                  : lesson.completed
                    ? "border-success/30 bg-success/5 hover:border-success"
                    : "border-border bg-card hover:border-primary hover:bg-primary/5"
              }`}
            >
              <div className="flex items-start justify-between gap-4">
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <h3 className="font-semibold">{lesson.title}</h3>
                    {lesson.completed && (
                      <span className="rounded-full bg-success px-2 py-0.5 text-xs font-medium text-success-foreground">
                        Completada
                      </span>
                    )}
                    {lesson.locked && <Lock className="h-4 w-4 text-muted-foreground" />}
                  </div>
                  <p className="mt-1 text-sm text-muted-foreground">{lesson.description}</p>
                  {!lesson.locked && !lesson.completed && (
                    <div className="mt-3">
                      <div className="mb-1 flex items-center justify-between text-xs">
                        <span className="text-muted-foreground">Progreso</span>
                        <span className="font-medium">{lesson.progress}%</span>
                      </div>
                      <Progress value={lesson.progress} className="h-2" />
                    </div>
                  )}
                </div>
                <div className="flex flex-col items-end gap-2">
                  <div className="flex items-center gap-1 rounded-lg bg-accent/10 px-2 py-1 text-sm font-medium text-accent">
                    <span>+{lesson.xp}</span>
                    <span className="text-xs">XP</span>
                  </div>
                </div>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/dashboard/streak-card.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/dashboard/streak-card.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import { Flame } from "lucide-react"
import { useUserData } from "@/hooks/use-user-data"

export function StreakCard() {
  const { userData, isLoading } = useUserData()
  
  const weekDays = ["L", "M", "X", "J", "V", "S", "D"]
  
  // Obtener racha del backend o 0 si es nuevo
  const diasRacha = userData?.perfil.dias_racha || 0
  
  // Simular días completados basado en la racha
  const completedDays = weekDays.map((_, index) => index < diasRacha)

  if (isLoading) {
    return (
      <Card className="p-6">
        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <Skeleton className="h-10 w-10 rounded-lg" />
            <div className="space-y-2">
              <Skeleton className="h-5 w-32" />
              <Skeleton className="h-4 w-24" />
            </div>
          </div>
          <div className="flex justify-between gap-2">
            {weekDays.map((_, index) => (
              <Skeleton key={index} className="h-10 w-10 rounded-lg" />
            ))}
          </div>
        </div>
      </Card>
    )
  }

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center gap-2">
        <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-accent/10">
          <Flame className="h-6 w-6 text-accent" />
        </div>
        <div>
          <h3 className="font-bold">Racha de Fuego</h3>
          <p className="text-sm text-muted-foreground">
            {diasRacha === 0 
              ? "Comienza tu racha hoy" 
              : diasRacha === 1 
              ? "1 día consecutivo" 
              : `${diasRacha} días consecutivos`}
          </p>
        </div>
      </div>

      <div className="flex justify-between gap-2">
        {weekDays.map((day, index) => (
          <div key={index} className="flex flex-col items-center gap-1">
            <div
              className={`flex h-10 w-10 items-center justify-center rounded-lg text-sm font-medium transition-all ${
                completedDays[index]
                  ? "bg-accent text-accent-foreground"
                  : "border-2 border-dashed border-muted-foreground/30 text-muted-foreground"
              }`}
            >
              {day}
            </div>
          </div>
        ))}
      </div>

      <p className="mt-4 text-center text-sm text-muted-foreground leading-relaxed">
        {diasRacha === 0 
          ? "¡Completa tu primera lección para comenzar tu racha!" 
          : "Completa una lección hoy para mantener tu racha"}
      </p>
    </Card>
  )
}


================================================================================
# ARCHIVO: front-end/components/gamification/achievements-list.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/gamification/achievements-list.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Lock, CheckCircle2 } from "lucide-react"

export function AchievementsList() {
  const achievements = [
    {
      id: 1,
      name: "First Steps",
      description: "Complete your first lesson",
      icon: "🎯",
      unlocked: true,
      progress: 100,
      xpReward: 50,
      unlockedAt: "2024-01-15",
    },
    {
      id: 2,
      name: "Week Warrior",
      description: "Maintain a 7-day streak",
      icon: "🔥",
      unlocked: true,
      progress: 100,
      xpReward: 100,
      unlockedAt: "2024-01-20",
    },
    {
      id: 3,
      name: "Dedicated Learner",
      description: "Complete 10 lessons",
      icon: "📚",
      unlocked: false,
      progress: 50,
      current: 5,
      total: 10,
      xpReward: 200,
    },
    {
      id: 4,
      name: "Perfect Score",
      description: "Get 100% on any lesson",
      icon: "⭐",
      unlocked: false,
      progress: 0,
      current: 0,
      total: 1,
      xpReward: 75,
    },
    {
      id: 5,
      name: "Rising Star",
      description: "Reach 500 XP",
      icon: "🌟",
      unlocked: false,
      progress: 40,
      current: 200,
      total: 500,
      xpReward: 150,
    },
    {
      id: 6,
      name: "Social Butterfly",
      description: "Reach top 10 in leaderboard",
      icon: "🦋",
      unlocked: false,
      progress: 0,
      current: 0,
      total: 1,
      xpReward: 300,
    },
  ]

  return (
    <Card className="p-6">
      <div className="mb-6 flex items-center justify-between">
        <h2 className="text-xl font-bold">Tus Logros</h2>
        <Badge variant="secondary">
          {achievements.filter((a) => a.unlocked).length} / {achievements.length}
        </Badge>
      </div>

      <div className="grid gap-4 sm:grid-cols-2">
        {achievements.map((achievement) => (
          <div
            key={achievement.id}
            className={`rounded-xl border-2 p-4 transition-all ${
              achievement.unlocked ? "border-success/30 bg-success/5" : "border-border bg-card hover:border-primary/50"
            }`}
          >
            <div className="mb-3 flex items-start justify-between">
              <div
                className={`flex h-12 w-12 items-center justify-center rounded-xl text-2xl ${
                  achievement.unlocked ? "bg-success/10" : "bg-muted"
                }`}
              >
                {achievement.unlocked ? achievement.icon : <Lock className="h-5 w-5 text-muted-foreground" />}
              </div>
              {achievement.unlocked && <CheckCircle2 className="h-5 w-5 text-success" />}
            </div>

            <h3 className="font-bold">{achievement.name}</h3>
            <p className="mt-1 text-sm text-muted-foreground leading-relaxed">{achievement.description}</p>

            {achievement.unlocked ? (
              <div className="mt-3 flex items-center gap-2">
                <Badge className="bg-accent text-accent-foreground">+{achievement.xpReward} XP</Badge>
                <span className="text-xs text-muted-foreground">
                  Desbloqueado el {new Date(achievement.unlockedAt).toLocaleDateString()}
                </span>
              </div>
            ) : (
              <div className="mt-3">
                <div className="mb-1 flex items-center justify-between text-xs">
                  <span className="text-muted-foreground">
                    {achievement.current} / {achievement.total}
                  </span>
                  <span className="font-medium">{achievement.progress}%</span>
                </div>
                <Progress value={achievement.progress} className="h-2" />
              </div>
            )}
          </div>
        ))}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/gamification/leaderboard-filters.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/gamification/leaderboard-filters.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"

export function LeaderboardFilters() {
  return (
    <Card className="p-6">
      <h3 className="mb-4 font-bold">Filtros</h3>

      <div className="space-y-6">
        {/* Time Period */}
        <div>
          <Label className="mb-3 block text-sm font-semibold">Período</Label>
          <RadioGroup defaultValue="week">
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="week" id="week" />
              <Label htmlFor="week" className="font-normal">
                Esta Semana
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="month" id="month" />
              <Label htmlFor="month" className="font-normal">
                Este Mes
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="all" id="all" />
              <Label htmlFor="all" className="font-normal">
                Todo el Tiempo
              </Label>
            </div>
          </RadioGroup>
        </div>

        {/* Scope */}
        <div>
          <Label className="mb-3 block text-sm font-semibold">Alcance</Label>
          <RadioGroup defaultValue="global">
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="global" id="global" />
              <Label htmlFor="global" className="font-normal">
                Global
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="course" id="course" />
              <Label htmlFor="course" className="font-normal">
                Mi Curso
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="friends" id="friends" />
              <Label htmlFor="friends" className="font-normal">
                Amigos
              </Label>
            </div>
          </RadioGroup>
        </div>
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/gamification/leaderboard-table.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/gamification/leaderboard-table.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { Trophy, TrendingUp, TrendingDown, Minus } from "lucide-react"
import Link from "next/link"

export function LeaderboardTable() {
  const leaderboard = [
    {
      rank: 1,
      name: "María García",
      initials: "MG",
      xp: 5420,
      level: 12,
      streak: 45,
      change: "up",
    },
    {
      rank: 2,
      name: "Carlos Rodríguez",
      initials: "CR",
      xp: 4890,
      level: 11,
      streak: 32,
      change: "down",
    },
    {
      rank: 3,
      name: "Ana Martínez",
      initials: "AM",
      xp: 4560,
      level: 11,
      streak: 28,
      change: "up",
    },
    {
      rank: 4,
      name: "Luis Fernández",
      initials: "LF",
      xp: 3920,
      level: 10,
      streak: 21,
      change: "same",
    },
    {
      rank: 5,
      name: "Elena López",
      initials: "EL",
      xp: 3450,
      level: 9,
      streak: 18,
      change: "up",
    },
    {
      rank: 6,
      name: "Juan Pérez",
      initials: "JP",
      xp: 1250,
      level: 5,
      streak: 7,
      change: "up",
      isCurrentUser: true,
    },
    {
      rank: 7,
      name: "Sofia Torres",
      initials: "ST",
      xp: 980,
      level: 4,
      streak: 5,
      change: "down",
    },
  ]

  const getTrendIcon = (change: string) => {
    if (change === "up") return <TrendingUp className="h-4 w-4 text-success" />
    if (change === "down") return <TrendingDown className="h-4 w-4 text-destructive" />
    return <Minus className="h-4 w-4 text-muted-foreground" />
  }

  const getRankBadge = (rank: number) => {
    if (rank === 1) return "🥇"
    if (rank === 2) return "🥈"
    if (rank === 3) return "🥉"
    return null
  }

  return (
    <Card className="p-6">
      <div className="mb-6 flex items-center gap-2">
        <Trophy className="h-5 w-5 text-primary" />
        <h2 className="text-xl font-bold">Top Estudiantes</h2>
        <Badge variant="secondary" className="ml-auto">
          Esta Semana
        </Badge>
      </div>

      <div className="space-y-2">
        {leaderboard.map((user) => (
          <Link key={user.rank} href="/perfil">
            <div
              className={`flex items-center gap-4 rounded-xl border-2 p-4 transition-all cursor-pointer ${
                user.isCurrentUser
                  ? "border-primary bg-primary/5"
                  : user.rank <= 3
                    ? "border-accent/30 bg-accent/5"
                    : "border-border bg-card hover:border-primary/50"
              }`}
            >
              {/* Rank */}
              <div className="flex w-12 items-center justify-center">
                {getRankBadge(user.rank) ? (
                  <span className="text-2xl">{getRankBadge(user.rank)}</span>
                ) : (
                  <span className="text-lg font-bold text-muted-foreground">#{user.rank}</span>
                )}
              </div>

              {/* Avatar */}
              <Avatar className="h-12 w-12">
                <AvatarFallback className="bg-primary text-primary-foreground">{user.initials}</AvatarFallback>
              </Avatar>

              {/* User Info */}
              <div className="flex-1">
                <div className="flex items-center gap-2">
                  <p className="font-semibold">{user.name}</p>
                  {user.isCurrentUser && (
                    <Badge variant="secondary" className="text-xs">
                      Tú
                    </Badge>
                  )}
                </div>
                <div className="mt-1 flex items-center gap-3 text-sm text-muted-foreground">
                  <span>Nivel {user.level}</span>
                  <span>•</span>
                  <span className="flex items-center gap-1">
                    <span>🔥</span>
                    {user.streak} días
                  </span>
                </div>
              </div>

              {/* XP and Trend */}
              <div className="text-right">
                <p className="text-lg font-bold text-primary">{user.xp.toLocaleString()} XP</p>
                <div className="mt-1 flex items-center justify-end gap-1">{getTrendIcon(user.change)}</div>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/gamification/level-progress.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/gamification/level-progress.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Zap } from "lucide-react"

export function LevelProgress() {
  const currentLevel = 5
  const currentXP = 1250
  const nextLevelXP = 2000
  const progress = (currentXP / nextLevelXP) * 100

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center gap-3">
        <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-primary/10 text-primary">
          <Zap className="h-6 w-6" />
        </div>
        <div>
          <h3 className="font-bold">Nivel {currentLevel}</h3>
          <p className="text-sm text-muted-foreground">Estudiante Dedicado</p>
        </div>
      </div>

      <div className="mb-2 flex items-center justify-between text-sm">
        <span className="text-muted-foreground">Progreso al Nivel {currentLevel + 1}</span>
        <span className="font-medium">
          {currentXP} / {nextLevelXP} XP
        </span>
      </div>
      <Progress value={progress} className="h-3" />

      <p className="mt-3 text-center text-sm text-muted-foreground">
        {nextLevelXP - currentXP} XP para el siguiente nivel
      </p>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/gamification/rewards-inventory.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/gamification/rewards-inventory.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"

export function RewardsInventory() {
  const rewards = [
    { id: 1, name: "Racha de 7 días", icon: "🔥", rarity: "common" },
    { id: 2, name: "Primera Lección", icon: "🎯", rarity: "common" },
    { id: 3, name: "Guerrero Semanal", icon: "⚔️", rarity: "rare" },
  ]

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h3 className="font-bold">Recompensas</h3>
        <Badge variant="secondary">{rewards.length}</Badge>
      </div>

      <div className="space-y-2">
        {rewards.map((reward) => (
          <div key={reward.id} className="flex items-center gap-3 rounded-lg bg-muted/50 p-3">
            <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-background text-xl">
              {reward.icon}
            </div>
            <div className="flex-1">
              <p className="text-sm font-medium">{reward.name}</p>
              <Badge variant="outline" className="mt-1 text-xs">
                {reward.rarity}
              </Badge>
            </div>
          </div>
        ))}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/gamification/user-rank-card.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/gamification/user-rank-card.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { TrendingUp } from "lucide-react"

export function UserRankCard() {
  return (
    <Card className="p-6">
      <div className="mb-4 text-center">
        <Avatar className="mx-auto h-16 w-16">
          <AvatarFallback className="bg-primary text-lg text-primary-foreground">JP</AvatarFallback>
        </Avatar>
        <h3 className="mt-3 font-bold">Juan Pérez</h3>
        <p className="text-sm text-muted-foreground">Nivel 5</p>
      </div>

      <div className="space-y-3 rounded-xl bg-muted/50 p-4">
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">Tu Posición</span>
          <span className="text-2xl font-bold text-primary">#6</span>
        </div>
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">XP Total</span>
          <span className="font-bold">1,250</span>
        </div>
        <div className="flex items-center justify-between">
          <span className="text-sm text-muted-foreground">Cambio</span>
          <div className="flex items-center gap-1 text-success">
            <TrendingUp className="h-4 w-4" />
            <span className="font-bold">+2</span>
          </div>
        </div>
      </div>

      <p className="mt-4 text-center text-sm text-muted-foreground leading-relaxed">
        Gana 150 XP más para alcanzar el top 5
      </p>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/abandon-lesson-modal.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/abandon-lesson-modal.tsx
================================================================================

"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { AlertTriangle } from "lucide-react"

interface AbandonLessonModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  lessonTitle: string
  progress: number
}

export function AbandonLessonModal({ open, onOpenChange, lessonTitle, progress }: AbandonLessonModalProps) {
  const router = useRouter()
  const [isSaving, setIsSaving] = useState(false)

  const handleAbandon = async () => {
    setIsSaving(true)
    // Simulate saving progress
    await new Promise((resolve) => setTimeout(resolve, 1000))
    router.push("/lecciones")
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <div className="flex items-center gap-3 mb-2">
            <div className="flex h-12 w-12 items-center justify-center rounded-full bg-orange-100 dark:bg-orange-950">
              <AlertTriangle className="h-6 w-6 text-orange-600" />
            </div>
            <DialogTitle className="text-xl">¿Abandonar lección?</DialogTitle>
          </div>
          <DialogDescription className="text-base">
            Estás a punto de salir de <strong>{lessonTitle}</strong>. Has completado el <strong>{progress}%</strong> de
            la lección.
          </DialogDescription>
        </DialogHeader>

        <div className="rounded-lg bg-muted p-4">
          <p className="text-sm">
            <strong>Tu progreso se guardará automáticamente.</strong> Podrás continuar desde donde lo dejaste cuando
            regreses.
          </p>
        </div>

        <DialogFooter className="gap-2 sm:gap-0">
          <Button variant="outline" onClick={() => onOpenChange(false)} disabled={isSaving}>
            Continuar Lección
          </Button>
          <Button variant="destructive" onClick={handleAbandon} disabled={isSaving}>
            {isSaving ? "Guardando..." : "Salir de la Lección"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/activities/fill-blank-activity.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/activities/fill-blank-activity.tsx
================================================================================

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { CheckCircle2, XCircle } from "lucide-react"

interface FillBlankActivityProps {
  question: string
  correctAnswer: string
  onComplete: (correct: boolean) => void
}

export function FillBlankActivity({ question, correctAnswer, onComplete }: FillBlankActivityProps) {
  const [answer, setAnswer] = useState("")
  const [submitted, setSubmitted] = useState(false)
  const [isCorrect, setIsCorrect] = useState(false)

  const handleSubmit = () => {
    if (!answer.trim()) return

    const correct = answer.trim().toLowerCase() === correctAnswer.toLowerCase()
    setIsCorrect(correct)
    setSubmitted(true)

    setTimeout(() => {
      onComplete(correct)
      setAnswer("")
      setSubmitted(false)
    }, 1500)
  }

  return (
    <div>
      <h2 className="mb-8 text-2xl font-bold text-balance">{question}</h2>

      <div className="mb-8">
        <div className="relative">
          <Input
            type="text"
            value={answer}
            onChange={(e) => setAnswer(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSubmit()}
            placeholder="Escribe tu respuesta aquí..."
            disabled={submitted}
            className={`text-lg ${
              submitted ? (isCorrect ? "border-success bg-success/10" : "border-destructive bg-destructive/10") : ""
            }`}
          />
          {submitted && (
            <div className="absolute right-3 top-1/2 -translate-y-1/2">
              {isCorrect ? (
                <CheckCircle2 className="h-5 w-5 text-success" />
              ) : (
                <XCircle className="h-5 w-5 text-destructive" />
              )}
            </div>
          )}
        </div>

        {submitted && !isCorrect && (
          <p className="mt-2 text-sm text-destructive">La respuesta correcta es: {correctAnswer}</p>
        )}
      </div>

      <Button onClick={handleSubmit} disabled={!answer.trim() || submitted} className="w-full">
        {submitted ? "Verificando..." : "Verificar Respuesta"}
      </Button>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/activities/listen-repeat-activity.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/activities/listen-repeat-activity.tsx
================================================================================

"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Mic, Volume2, Check, X, Square } from "lucide-react"

interface ListenRepeatActivityProps {
  phrase: string
  audioUrl?: string
  onComplete: (correct: boolean) => void
}

export function ListenRepeatActivity({ phrase, audioUrl, onComplete }: ListenRepeatActivityProps) {
  const [isRecording, setIsRecording] = useState(false)
  const [hasRecorded, setHasRecorded] = useState(false)
  const [showFeedback, setShowFeedback] = useState(false)
  const [isCorrect, setIsCorrect] = useState(false)
  const mediaRecorderRef = useRef<MediaRecorder | null>(null)

  const handlePlayAudio = () => {
    // In a real implementation, this would play the audio file
    const utterance = new SpeechSynthesisUtterance(phrase)
    utterance.lang = "en-US"
    window.speechSynthesis.speak(utterance)
  }

  const handleStartRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      const mediaRecorder = new MediaRecorder(stream)
      mediaRecorderRef.current = mediaRecorder

      mediaRecorder.start()
      setIsRecording(true)

      mediaRecorder.addEventListener("stop", () => {
        setHasRecorded(true)
        stream.getTracks().forEach((track) => track.stop())
      })
    } catch (error) {
      console.error("Error accessing microphone:", error)
    }
  }

  const handleStopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop()
      setIsRecording(false)
    }
  }

  const handleCheck = () => {
    // In a real implementation, this would use speech recognition API
    // For now, we'll simulate a random result
    const correct = Math.random() > 0.3
    setIsCorrect(correct)
    setShowFeedback(true)
    setTimeout(() => {
      onComplete(correct)
    }, 2000)
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h3 className="text-2xl font-bold mb-2">Escucha y Repite</h3>
        <p className="text-lg text-muted-foreground">Escucha la frase y repítela en voz alta</p>
      </div>

      {/* Phrase Display */}
      <Card className="bg-primary/5">
        <CardContent className="p-8 text-center">
          <p className="text-2xl font-bold mb-4">{phrase}</p>
          <Button onClick={handlePlayAudio} variant="outline" size="lg">
            <Volume2 className="mr-2 h-5 w-5" />
            Escuchar Frase
          </Button>
        </CardContent>
      </Card>

      {/* Recording Controls */}
      <Card>
        <CardContent className="p-8">
          <div className="flex flex-col items-center gap-4">
            <div className="flex items-center gap-4">
              {!isRecording && !hasRecorded && (
                <Button onClick={handleStartRecording} size="lg" className="gap-2">
                  <Mic className="h-5 w-5" />
                  Comenzar Grabación
                </Button>
              )}

              {isRecording && (
                <Button onClick={handleStopRecording} size="lg" variant="destructive" className="gap-2">
                  <Square className="h-5 w-5" />
                  Detener Grabación
                </Button>
              )}

              {hasRecorded && !showFeedback && (
                <div className="flex gap-3">
                  <Button onClick={() => setHasRecorded(false)} variant="outline" size="lg">
                    Grabar de Nuevo
                  </Button>
                  <Button onClick={handleCheck} size="lg">
                    Verificar
                  </Button>
                </div>
              )}
            </div>

            {isRecording && (
              <div className="flex items-center gap-2 text-red-500">
                <div className="h-3 w-3 rounded-full bg-red-500 animate-pulse" />
                <span className="font-medium">Grabando...</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Feedback */}
      {showFeedback && (
        <Card
          className={
            isCorrect ? "border-green-500 bg-green-50 dark:bg-green-950" : "border-red-500 bg-red-50 dark:bg-red-950"
          }
        >
          <CardContent className="p-6">
            <div className="flex items-start gap-3">
              {isCorrect ? (
                <Check className="h-6 w-6 text-green-600 flex-shrink-0 mt-1" />
              ) : (
                <X className="h-6 w-6 text-red-600 flex-shrink-0 mt-1" />
              )}
              <div>
                <p className="font-semibold mb-1">{isCorrect ? "¡Excelente pronunciación!" : "Intenta de nuevo"}</p>
                <p className="text-sm text-muted-foreground">
                  {isCorrect
                    ? "Tu pronunciación es muy buena. ¡Sigue practicando!"
                    : "Escucha la frase de nuevo y presta atención a la pronunciación."}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/activities/matching-activity.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/activities/matching-activity.tsx
================================================================================

"use client"

import { useState } from "react"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Check, X, Shuffle } from "lucide-react"

interface MatchingPair {
  id: string
  left: string
  right: string
}

interface MatchingActivityProps {
  pairs: MatchingPair[]
  onComplete: (correct: boolean) => void
}

export function MatchingActivity({ pairs, onComplete }: MatchingActivityProps) {
  const [leftSelected, setLeftSelected] = useState<string | null>(null)
  const [matches, setMatches] = useState<Record<string, string>>({})
  const [feedback, setFeedback] = useState<Record<string, boolean>>({})
  const [shuffledRight, setShuffledRight] = useState(() =>
    [...pairs].map((p) => ({ id: p.id, text: p.right })).sort(() => Math.random() - 0.5),
  )

  const handleLeftClick = (id: string) => {
    if (feedback[id] !== undefined) return
    setLeftSelected(id)
  }

  const handleRightClick = (rightId: string) => {
    if (!leftSelected || feedback[leftSelected] !== undefined) return

    const newMatches = { ...matches, [leftSelected]: rightId }
    setMatches(newMatches)

    const isCorrect = leftSelected === rightId
    setFeedback({ ...feedback, [leftSelected]: isCorrect })
    setLeftSelected(null)

    if (Object.keys(newMatches).length === pairs.length) {
      const allCorrect = Object.entries(newMatches).every(([left, right]) => left === right)
      setTimeout(() => onComplete(allCorrect), 1000)
    }
  }

  const handleShuffle = () => {
    setShuffledRight([...shuffledRight].sort(() => Math.random() - 0.5))
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <p className="text-sm text-muted-foreground">Empareja los elementos de ambas columnas</p>
        <Button variant="outline" size="sm" onClick={handleShuffle} disabled={Object.keys(matches).length > 0}>
          <Shuffle className="mr-2 h-4 w-4" />
          Mezclar
        </Button>
      </div>

      <div className="grid gap-4 md:grid-cols-2">
        {/* Left Column */}
        <div className="space-y-2">
          {pairs.map((pair) => (
            <Card
              key={pair.id}
              className={`cursor-pointer p-4 transition-all ${
                leftSelected === pair.id
                  ? "border-primary bg-primary/10"
                  : feedback[pair.id] === true
                    ? "border-green-500 bg-green-50"
                    : feedback[pair.id] === false
                      ? "border-red-500 bg-red-50"
                      : "hover:border-primary/50"
              } ${feedback[pair.id] !== undefined ? "cursor-not-allowed opacity-60" : ""}`}
              onClick={() => handleLeftClick(pair.id)}
            >
              <div className="flex items-center justify-between">
                <span className="font-medium">{pair.left}</span>
                {feedback[pair.id] === true && <Check className="h-5 w-5 text-green-600" />}
                {feedback[pair.id] === false && <X className="h-5 w-5 text-red-600" />}
              </div>
            </Card>
          ))}
        </div>

        {/* Right Column */}
        <div className="space-y-2">
          {shuffledRight.map((item) => {
            const isMatched = Object.values(matches).includes(item.id)
            const matchedLeft = Object.entries(matches).find(([_, right]) => right === item.id)?.[0]
            const isCorrect = matchedLeft ? feedback[matchedLeft] : undefined

            return (
              <Card
                key={item.id}
                className={`cursor-pointer p-4 transition-all ${
                  isMatched
                    ? isCorrect === true
                      ? "border-green-500 bg-green-50"
                      : isCorrect === false
                        ? "border-red-500 bg-red-50"
                        : "border-primary bg-primary/10"
                    : "hover:border-primary/50"
                } ${isMatched ? "cursor-not-allowed opacity-60" : ""}`}
                onClick={() => !isMatched && handleRightClick(item.id)}
              >
                <div className="flex items-center justify-between">
                  <span className="font-medium">{item.text}</span>
                  {isCorrect === true && <Check className="h-5 w-5 text-green-600" />}
                  {isCorrect === false && <X className="h-5 w-5 text-red-600" />}
                </div>
              </Card>
            )
          })}
        </div>
      </div>

      <div className="flex items-center justify-between rounded-lg bg-muted p-3">
        <span className="text-sm font-medium">
          Emparejados: {Object.keys(matches).length} / {pairs.length}
        </span>
        {Object.keys(feedback).length > 0 && (
          <Badge variant={Object.values(feedback).every((v) => v) ? "default" : "secondary"}>
            {Object.values(feedback).filter((v) => v).length} correctos
          </Badge>
        )}
      </div>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/activities/multiple-choice-activity.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/activities/multiple-choice-activity.tsx
================================================================================

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { CheckCircle2, XCircle } from "lucide-react"

interface MultipleChoiceActivityProps {
  question: string
  options: string[]
  correctAnswer: number
  onComplete: (correct: boolean) => void
}

export function MultipleChoiceActivity({ question, options, correctAnswer, onComplete }: MultipleChoiceActivityProps) {
  const [selectedOption, setSelectedOption] = useState<number | null>(null)
  const [submitted, setSubmitted] = useState(false)

  const handleSubmit = () => {
    if (selectedOption === null) return

    setSubmitted(true)
    const isCorrect = selectedOption === correctAnswer
    setTimeout(() => {
      onComplete(isCorrect)
      setSelectedOption(null)
      setSubmitted(false)
    }, 1500)
  }

  return (
    <div>
      <h2 className="mb-8 text-2xl font-bold text-balance">{question}</h2>

      <div className="mb-8 space-y-3">
        {options.map((option, index) => {
          const isSelected = selectedOption === index
          const isCorrect = index === correctAnswer
          const showResult = submitted && isSelected

          return (
            <button
              key={index}
              onClick={() => !submitted && setSelectedOption(index)}
              disabled={submitted}
              className={`w-full rounded-xl border-2 p-4 text-left transition-all ${
                showResult
                  ? isCorrect
                    ? "border-success bg-success/10"
                    : "border-destructive bg-destructive/10"
                  : isSelected
                    ? "border-primary bg-primary/5"
                    : "border-border bg-card hover:border-primary hover:bg-primary/5"
              } ${submitted ? "cursor-not-allowed" : ""}`}
            >
              <div className="flex items-center justify-between">
                <span className="font-medium">{option}</span>
                {showResult &&
                  (isCorrect ? (
                    <CheckCircle2 className="h-5 w-5 text-success" />
                  ) : (
                    <XCircle className="h-5 w-5 text-destructive" />
                  ))}
              </div>
            </button>
          )
        })}
      </div>

      <Button onClick={handleSubmit} disabled={selectedOption === null || submitted} className="w-full">
        {submitted ? "Verificando..." : "Verificar Respuesta"}
      </Button>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/activities/translation-activity.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/activities/translation-activity.tsx
================================================================================

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Check, X, Volume2 } from "lucide-react"

interface TranslationActivityProps {
  sourceText: string
  sourceLang: string
  targetLang: string
  correctTranslation: string
  onComplete: (correct: boolean) => void
}

export function TranslationActivity({
  sourceText,
  sourceLang,
  targetLang,
  correctTranslation,
  onComplete,
}: TranslationActivityProps) {
  const [translation, setTranslation] = useState("")
  const [showFeedback, setShowFeedback] = useState(false)
  const [isCorrect, setIsCorrect] = useState(false)

  const handlePlayAudio = () => {
    const utterance = new SpeechSynthesisUtterance(sourceText)
    utterance.lang = sourceLang === "Inglés" ? "en-US" : "es-ES"
    window.speechSynthesis.speak(utterance)
  }

  const handleCheck = () => {
    // Simple similarity check (in production, use more sophisticated NLP)
    const userWords = translation.toLowerCase().trim().split(/\s+/)
    const correctWords = correctTranslation.toLowerCase().trim().split(/\s+/)
    const matchCount = userWords.filter((word) => correctWords.includes(word)).length
    const similarity = matchCount / correctWords.length

    const correct = similarity >= 0.7 // 70% similarity threshold
    setIsCorrect(correct)
    setShowFeedback(true)
    setTimeout(() => {
      onComplete(correct)
    }, 2500)
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h3 className="text-2xl font-bold mb-2">Traducción</h3>
        <p className="text-lg text-muted-foreground">
          Traduce la siguiente frase de {sourceLang} a {targetLang}
        </p>
      </div>

      {/* Source Text */}
      <Card className="bg-primary/5">
        <CardContent className="p-8">
          <div className="flex items-center justify-between mb-4">
            <span className="text-sm font-medium text-muted-foreground">{sourceLang}</span>
            <Button onClick={handlePlayAudio} variant="ghost" size="sm">
              <Volume2 className="h-4 w-4" />
            </Button>
          </div>
          <p className="text-2xl font-bold text-center">{sourceText}</p>
        </CardContent>
      </Card>

      {/* Translation Input */}
      <Card>
        <CardContent className="p-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium text-muted-foreground">{targetLang}</span>
              <span className="text-xs text-muted-foreground">{translation.length} caracteres</span>
            </div>
            <Textarea
              placeholder={`Escribe tu traducción en ${targetLang}...`}
              value={translation}
              onChange={(e) => setTranslation(e.target.value)}
              disabled={showFeedback}
              className="min-h-[120px] text-lg"
            />
          </div>
        </CardContent>
      </Card>

      {/* Action Button */}
      {!showFeedback && (
        <div className="flex justify-center">
          <Button onClick={handleCheck} disabled={translation.trim().length < 3} size="lg" className="min-w-[200px]">
            Verificar Traducción
          </Button>
        </div>
      )}

      {/* Feedback */}
      {showFeedback && (
        <Card
          className={
            isCorrect ? "border-green-500 bg-green-50 dark:bg-green-950" : "border-red-500 bg-red-50 dark:bg-red-950"
          }
        >
          <CardContent className="p-6">
            <div className="flex items-start gap-3">
              {isCorrect ? (
                <Check className="h-6 w-6 text-green-600 flex-shrink-0 mt-1" />
              ) : (
                <X className="h-6 w-6 text-red-600 flex-shrink-0 mt-1" />
              )}
              <div className="flex-1">
                <p className="font-semibold mb-2">{isCorrect ? "¡Muy bien!" : "Casi correcto"}</p>
                <div className="space-y-2">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground mb-1">Tu traducción:</p>
                    <p className="text-sm">{translation}</p>
                  </div>
                  {!isCorrect && (
                    <div>
                      <p className="text-sm font-medium text-muted-foreground mb-1">Traducción sugerida:</p>
                      <p className="text-sm font-medium">{correctTranslation}</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/activities/true-false-activity.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/activities/true-false-activity.tsx
================================================================================

"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Check, X } from "lucide-react"

interface TrueFalseActivityProps {
  question: string
  correctAnswer: boolean
  explanation?: string
  onComplete: (correct: boolean) => void
}

export function TrueFalseActivity({ question, correctAnswer, explanation, onComplete }: TrueFalseActivityProps) {
  const [selectedAnswer, setSelectedAnswer] = useState<boolean | null>(null)
  const [showFeedback, setShowFeedback] = useState(false)

  const handleAnswer = (answer: boolean) => {
    setSelectedAnswer(answer)
    setShowFeedback(true)
    const isCorrect = answer === correctAnswer
    setTimeout(() => {
      onComplete(isCorrect)
    }, 2000)
  }

  const isCorrect = selectedAnswer === correctAnswer

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h3 className="text-2xl font-bold mb-2">¿Verdadero o Falso?</h3>
        <p className="text-lg text-muted-foreground">{question}</p>
      </div>

      <div className="grid gap-4 md:grid-cols-2 max-w-2xl mx-auto">
        <Card
          className={`cursor-pointer transition-all ${
            selectedAnswer === true
              ? showFeedback
                ? isCorrect
                  ? "border-green-500 bg-green-50 dark:bg-green-950"
                  : "border-red-500 bg-red-50 dark:bg-red-950"
                : "border-primary bg-primary/5"
              : "hover:border-primary hover:bg-accent"
          }`}
          onClick={() => !showFeedback && handleAnswer(true)}
        >
          <CardContent className="flex items-center justify-center gap-3 p-8">
            <Check className="h-8 w-8 text-green-600" />
            <span className="text-2xl font-bold">Verdadero</span>
          </CardContent>
        </Card>

        <Card
          className={`cursor-pointer transition-all ${
            selectedAnswer === false
              ? showFeedback
                ? isCorrect
                  ? "border-green-500 bg-green-50 dark:bg-green-950"
                  : "border-red-500 bg-red-50 dark:bg-red-950"
                : "border-primary bg-primary/5"
              : "hover:border-primary hover:bg-accent"
          }`}
          onClick={() => !showFeedback && handleAnswer(false)}
        >
          <CardContent className="flex items-center justify-center gap-3 p-8">
            <X className="h-8 w-8 text-red-600" />
            <span className="text-2xl font-bold">Falso</span>
          </CardContent>
        </Card>
      </div>

      {showFeedback && (
        <Card
          className={
            isCorrect ? "border-green-500 bg-green-50 dark:bg-green-950" : "border-red-500 bg-red-50 dark:bg-red-950"
          }
        >
          <CardContent className="p-6">
            <div className="flex items-start gap-3">
              {isCorrect ? (
                <Check className="h-6 w-6 text-green-600 flex-shrink-0 mt-1" />
              ) : (
                <X className="h-6 w-6 text-red-600 flex-shrink-0 mt-1" />
              )}
              <div>
                <p className="font-semibold mb-1">{isCorrect ? "¡Correcto!" : "Incorrecto"}</p>
                {explanation && <p className="text-sm text-muted-foreground">{explanation}</p>}
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/activities/word-order-activity.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/activities/word-order-activity.tsx
================================================================================

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Check, X, RotateCcw } from "lucide-react"

interface WordOrderActivityProps {
  instruction: string
  words: string[]
  correctOrder: string[]
  onComplete: (correct: boolean) => void
}

export function WordOrderActivity({ instruction, words, correctOrder, onComplete }: WordOrderActivityProps) {
  const [availableWords, setAvailableWords] = useState<string[]>(words)
  const [selectedWords, setSelectedWords] = useState<string[]>([])
  const [showFeedback, setShowFeedback] = useState(false)
  const [isCorrect, setIsCorrect] = useState(false)

  const handleWordClick = (word: string, fromAvailable: boolean) => {
    if (showFeedback) return

    if (fromAvailable) {
      setAvailableWords(availableWords.filter((w) => w !== word))
      setSelectedWords([...selectedWords, word])
    } else {
      setSelectedWords(selectedWords.filter((w) => w !== word))
      setAvailableWords([...availableWords, word])
    }
  }

  const handleCheck = () => {
    const correct = JSON.stringify(selectedWords) === JSON.stringify(correctOrder)
    setIsCorrect(correct)
    setShowFeedback(true)
    setTimeout(() => {
      onComplete(correct)
    }, 2000)
  }

  const handleReset = () => {
    setAvailableWords(words)
    setSelectedWords([])
    setShowFeedback(false)
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h3 className="text-2xl font-bold mb-2">Ordena las Palabras</h3>
        <p className="text-lg text-muted-foreground">{instruction}</p>
      </div>

      {/* Selected Words Area */}
      <Card className="min-h-[120px]">
        <CardContent className="p-6">
          <p className="text-sm text-muted-foreground mb-3">Tu respuesta:</p>
          <div className="flex flex-wrap gap-2 min-h-[60px]">
            {selectedWords.length === 0 ? (
              <p className="text-muted-foreground italic">Selecciona las palabras en orden...</p>
            ) : (
              selectedWords.map((word, index) => (
                <Button
                  key={`${word}-${index}`}
                  variant="default"
                  onClick={() => handleWordClick(word, false)}
                  disabled={showFeedback}
                  className="h-12 text-lg"
                >
                  {word}
                </Button>
              ))
            )}
          </div>
        </CardContent>
      </Card>

      {/* Available Words */}
      <Card>
        <CardContent className="p-6">
          <p className="text-sm text-muted-foreground mb-3">Palabras disponibles:</p>
          <div className="flex flex-wrap gap-2">
            {availableWords.map((word, index) => (
              <Button
                key={`${word}-${index}`}
                variant="outline"
                onClick={() => handleWordClick(word, true)}
                disabled={showFeedback}
                className="h-12 text-lg"
              >
                {word}
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <div className="flex gap-3 justify-center">
        <Button variant="outline" onClick={handleReset} disabled={showFeedback || selectedWords.length === 0}>
          <RotateCcw className="mr-2 h-4 w-4" />
          Reiniciar
        </Button>
        <Button
          onClick={handleCheck}
          disabled={showFeedback || selectedWords.length !== correctOrder.length}
          className="min-w-[120px]"
        >
          Verificar
        </Button>
      </div>

      {/* Feedback */}
      {showFeedback && (
        <Card
          className={
            isCorrect ? "border-green-500 bg-green-50 dark:bg-green-950" : "border-red-500 bg-red-50 dark:bg-red-950"
          }
        >
          <CardContent className="p-6">
            <div className="flex items-start gap-3">
              {isCorrect ? (
                <Check className="h-6 w-6 text-green-600 flex-shrink-0 mt-1" />
              ) : (
                <X className="h-6 w-6 text-red-600 flex-shrink-0 mt-1" />
              )}
              <div>
                <p className="font-semibold mb-1">{isCorrect ? "¡Correcto!" : "Incorrecto"}</p>
                {!isCorrect && (
                  <p className="text-sm text-muted-foreground">Orden correcto: {correctOrder.join(" ")}</p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/completion-modal.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/completion-modal.tsx
================================================================================

"use client"

import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Trophy, Zap, Star } from "lucide-react"

interface CompletionModalProps {
  lessonTitle: string
  xpEarned: number
  onClose: () => void
}

export function CompletionModal({ lessonTitle, xpEarned, onClose }: CompletionModalProps) {
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm">
      <Card className="mx-4 w-full max-w-md p-8">
        <div className="text-center">
          {/* Success Icon */}
          <div className="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-success/10">
            <Trophy className="h-10 w-10 text-success" />
          </div>

          {/* Title */}
          <h2 className="mb-2 text-3xl font-bold text-balance">Lección Completada</h2>
          <p className="mb-6 text-muted-foreground">Has completado: {lessonTitle}</p>

          {/* Rewards */}
          <div className="mb-8 space-y-4">
            <div className="flex items-center justify-center gap-3 rounded-xl bg-accent/10 p-4">
              <Zap className="h-6 w-6 text-accent" />
              <div className="text-left">
                <p className="text-sm text-muted-foreground">XP Ganado</p>
                <p className="text-2xl font-bold text-accent">+{xpEarned}</p>
              </div>
            </div>

            <div className="flex items-center justify-center gap-3 rounded-xl bg-primary/10 p-4">
              <Star className="h-6 w-6 text-primary" />
              <div className="text-left">
                <p className="text-sm text-muted-foreground">Racha Mantenida</p>
                <p className="text-xl font-bold text-primary">7 días</p>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="space-y-3">
            <Button onClick={onClose} className="w-full">
              Continuar Aprendiendo
            </Button>
            <Button variant="outline" onClick={onClose} className="w-full bg-transparent">
              Ver Progreso
            </Button>
          </div>
        </div>
      </Card>
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/lesson-filters.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/lesson-filters.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Checkbox } from "@/components/ui/checkbox"

export function LessonFilters() {
  return (
    <Card className="p-6">
      <h3 className="mb-4 font-bold">Filtros</h3>

      <div className="space-y-6">
        {/* Level Filter */}
        <div>
          <Label className="mb-3 block text-sm font-semibold">Nivel</Label>
          <RadioGroup defaultValue="all">
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="all" id="all" />
              <Label htmlFor="all" className="font-normal">
                Todos
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="A1" id="A1" />
              <Label htmlFor="A1" className="font-normal">
                A1 - Principiante
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="A2" id="A2" />
              <Label htmlFor="A2" className="font-normal">
                A2 - Elemental
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="B1" id="B1" />
              <Label htmlFor="B1" className="font-normal">
                B1 - Intermedio
              </Label>
            </div>
          </RadioGroup>
        </div>

        {/* Progress Filter */}
        <div>
          <Label className="mb-3 block text-sm font-semibold">Progreso</Label>
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <Checkbox id="not-started" />
              <Label htmlFor="not-started" className="font-normal">
                No iniciadas
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="in-progress" />
              <Label htmlFor="in-progress" className="font-normal">
                En progreso
              </Label>
            </div>
            <div className="flex items-center space-x-2">
              <Checkbox id="completed" />
              <Label htmlFor="completed" className="font-normal">
                Completadas
              </Label>
            </div>
          </div>
        </div>
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/lesson-list.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/lesson-list.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { CheckCircle2, Lock, Play } from "lucide-react"

export function LessonList() {
  const lessons = [
    {
      id: 1,
      title: "Greetings and Introductions",
      description: "Learn how to greet people and introduce yourself in English",
      level: "A1",
      progress: 100,
      completed: true,
      xp: 10,
      activities: 4,
    },
    {
      id: 2,
      title: "Numbers 1-20",
      description: "Master counting from 1 to 20 with interactive exercises",
      level: "A1",
      progress: 75,
      completed: false,
      xp: 10,
      activities: 5,
    },
    {
      id: 3,
      title: "Colors and Shapes",
      description: "Learn basic colors and geometric shapes vocabulary",
      level: "A1",
      progress: 0,
      completed: false,
      xp: 10,
      activities: 6,
      locked: false,
    },
    {
      id: 4,
      title: "Family Members",
      description: "Vocabulary and expressions about family relationships",
      level: "A1",
      progress: 0,
      completed: false,
      xp: 15,
      activities: 7,
      locked: true,
    },
    {
      id: 5,
      title: "Daily Routines",
      description: "Learn to talk about your daily activities and schedule",
      level: "A2",
      progress: 0,
      completed: false,
      xp: 15,
      activities: 8,
      locked: true,
    },
  ]

  return (
    <div className="space-y-4">
      {lessons.map((lesson) => (
        <Link
          key={lesson.id}
          href={lesson.locked ? "#" : `/lecciones/${lesson.id}`}
          className={`block ${lesson.locked ? "cursor-not-allowed" : ""}`}
        >
          <Card
            className={`p-6 transition-all ${
              lesson.locked
                ? "opacity-60"
                : lesson.completed
                  ? "border-success/30 hover:border-success"
                  : "hover:border-primary hover:shadow-md"
            }`}
          >
            <div className="flex items-start gap-4">
              {/* Icon */}
              <div
                className={`flex h-14 w-14 shrink-0 items-center justify-center rounded-xl ${
                  lesson.locked
                    ? "bg-muted"
                    : lesson.completed
                      ? "bg-success/10 text-success"
                      : "bg-primary/10 text-primary"
                }`}
              >
                {lesson.locked ? (
                  <Lock className="h-6 w-6 text-muted-foreground" />
                ) : lesson.completed ? (
                  <CheckCircle2 className="h-6 w-6" />
                ) : (
                  <Play className="h-6 w-6" />
                )}
              </div>

              {/* Content */}
              <div className="flex-1">
                <div className="mb-2 flex items-start justify-between gap-4">
                  <div>
                    <h3 className="text-lg font-bold">{lesson.title}</h3>
                    <p className="mt-1 text-sm text-muted-foreground leading-relaxed">{lesson.description}</p>
                  </div>
                  <div className="flex shrink-0 flex-col items-end gap-2">
                    <Badge variant="secondary">{lesson.level}</Badge>
                    <div className="flex items-center gap-1 rounded-lg bg-accent/10 px-2 py-1 text-sm font-medium text-accent">
                      <span>+{lesson.xp}</span>
                      <span className="text-xs">XP</span>
                    </div>
                  </div>
                </div>

                {/* Progress */}
                {!lesson.locked && (
                  <div className="mt-4 flex items-center gap-4">
                    <div className="flex-1">
                      <div className="mb-1 flex items-center justify-between text-xs">
                        <span className="text-muted-foreground">
                          {lesson.completed ? "Completada" : `${lesson.activities} actividades`}
                        </span>
                        <span className="font-medium">{lesson.progress}%</span>
                      </div>
                      <Progress value={lesson.progress} className="h-2" />
                    </div>
                  </div>
                )}

                {lesson.locked && (
                  <p className="mt-3 text-sm text-muted-foreground">
                    Completa las lecciones anteriores para desbloquear
                  </p>
                )}
              </div>
            </div>
          </Card>
        </Link>
      ))}
    </div>
  )
}



================================================================================
# ARCHIVO: front-end/components/lessons/lesson-viewer.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/lessons/lesson-viewer.tsx
================================================================================

"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { useToast } from "@/hooks/use-toast"
import { MultipleChoiceActivity } from "@/components/lessons/activities/multiple-choice-activity"
import { FillBlankActivity } from "@/components/lessons/activities/fill-blank-activity"
import { CompletionModal } from "@/components/lessons/completion-modal"
import { AbandonLessonModal } from "@/components/lessons/abandon-lesson-modal"
import { ArrowLeft, ArrowRight, X } from "lucide-react"
import Link from "next/link"

// Mock lesson data
const LESSON_DATA = {
  id: "1",
  title: "Greetings and Introductions",
  description: "Learn how to greet people and introduce yourself",
  xpReward: 10,
  activities: [
    {
      id: 1,
      type: "multiple_choice",
      question: "How do you say 'Hello' in English?",
      options: ["Hello", "Goodbye", "Thank you", "Please"],
      correctAnswer: 0,
    },
    {
      id: 2,
      type: "multiple_choice",
      question: "What is the correct response to 'How are you?'",
      options: ["I am fine, thank you", "My name is John", "Goodbye", "Yes, please"],
      correctAnswer: 0,
    },
    {
      id: 3,
      type: "fill_blank",
      question: "Complete: 'Nice to ___ you'",
      correctAnswer: "meet",
    },
    {
      id: 4,
      type: "multiple_choice",
      question: "How do you introduce yourself?",
      options: ["My name is...", "How are you?", "Goodbye", "Thank you"],
      correctAnswer: 0,
    },
  ],
}

export function LessonViewer({ lessonId }: { lessonId: string }) {
  const router = useRouter()
  const { toast } = useToast()
  const [currentActivity, setCurrentActivity] = useState(0)
  const [completedActivities, setCompletedActivities] = useState<number[]>([])
  const [showCompletion, setShowCompletion] = useState(false)
  const [showAbandonModal, setShowAbandonModal] = useState(false)

  const activity = LESSON_DATA.activities[currentActivity]
  const progress = ((currentActivity + 1) / LESSON_DATA.activities.length) * 100
  const isLastActivity = currentActivity === LESSON_DATA.activities.length - 1

  const handleActivityComplete = (correct: boolean) => {
    if (correct) {
      setCompletedActivities([...completedActivities, activity.id])

      if (isLastActivity) {
        // Show completion modal
        setShowCompletion(true)
      } else {
        toast({
          title: "Correcto",
          description: "Excelente trabajo",
        })
        // Move to next activity after a short delay
        setTimeout(() => {
          setCurrentActivity(currentActivity + 1)
        }, 1000)
      }
    } else {
      toast({
        title: "Incorrecto",
        description: "Intenta de nuevo",
        variant: "destructive",
      })
    }
  }

  const handleNext = () => {
    if (!isLastActivity) {
      setCurrentActivity(currentActivity + 1)
    }
  }

  const handlePrevious = () => {
    if (currentActivity > 0) {
      setCurrentActivity(currentActivity - 1)
    }
  }

  return (
    <>
      <main className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-6 flex items-center justify-between">
          <Link href="/lecciones">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Volver a Lecciones
            </Button>
          </Link>
          <div className="flex items-center gap-4">
            <div className="text-sm text-muted-foreground">
              Actividad {currentActivity + 1} de {LESSON_DATA.activities.length}
            </div>
            <Button variant="ghost" size="sm" onClick={() => setShowAbandonModal(true)}>
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="mb-2 flex items-center justify-between">
            <h1 className="text-2xl font-bold text-balance">{LESSON_DATA.title}</h1>
            <span className="text-sm font-medium">{Math.round(progress)}%</span>
          </div>
          <Progress value={progress} className="h-3" />
        </div>

        {/* Activity Content */}
        <div className="mx-auto max-w-3xl">
          <Card className="p-8">
            {activity.type === "multiple_choice" && (
              <MultipleChoiceActivity
                question={activity.question}
                options={activity.options}
                correctAnswer={activity.correctAnswer}
                onComplete={handleActivityComplete}
              />
            )}
            {activity.type === "fill_blank" && (
              <FillBlankActivity
                question={activity.question}
                correctAnswer={activity.correctAnswer}
                onComplete={handleActivityComplete}
              />
            )}
          </Card>

          {/* Navigation */}
          <div className="mt-6 flex items-center justify-between">
            <Button variant="outline" onClick={handlePrevious} disabled={currentActivity === 0}>
              <ArrowLeft className="mr-2 h-4 w-4" />
              Anterior
            </Button>
            <Button variant="outline" onClick={handleNext} disabled={isLastActivity}>
              Siguiente
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
        </div>
      </main>

      <AbandonLessonModal
        open={showAbandonModal}
        onOpenChange={setShowAbandonModal}
        lessonTitle={LESSON_DATA.title}
        progress={Math.round(progress)}
      />

      {showCompletion && (
        <CompletionModal
          lessonTitle={LESSON_DATA.title}
          xpEarned={LESSON_DATA.xpReward}
          onClose={() => router.push("/lecciones")}
        />
      )}
    </>
  )
}



================================================================================
# ARCHIVO: front-end/components/maintenance/create-task-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/maintenance/create-task-form.tsx
================================================================================

"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { useToast } from "@/hooks/use-toast"
import { useRouter } from "next/navigation"
import { Calendar, Clock, AlertCircle } from "lucide-react"

export function CreateTaskForm() {
  const { toast } = useToast()
  const router = useRouter()

  const [title, setTitle] = useState("")
  const [description, setDescription] = useState("")
  const [taskType, setTaskType] = useState("")
  const [priority, setPriority] = useState("")
  const [assignedTo, setAssignedTo] = useState("")
  const [scheduledDate, setScheduledDate] = useState("")
  const [scheduledTime, setScheduledTime] = useState("")
  const [isRecurring, setIsRecurring] = useState(false)
  const [frequency, setFrequency] = useState("")

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!title || !taskType || !priority || !assignedTo || !scheduledDate || !scheduledTime) {
      toast({
        title: "Campos incompletos",
        description: "Por favor completa todos los campos requeridos",
        variant: "destructive",
      })
      return
    }

    toast({
      title: "Tarea programada exitosamente",
      description: "La tarea ha sido creada y el responsable será notificado",
    })
    router.push("/mantenimiento/tareas")
  }

  return (
    <form onSubmit={handleSubmit}>
      <Card className="mx-auto max-w-3xl">
        <CardHeader>
          <CardTitle>Información de la Tarea</CardTitle>
          <CardDescription>Completa los detalles de la tarea de mantenimiento</CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          <div className="space-y-2">
            <Label htmlFor="title">Título de la Tarea *</Label>
            <Input
              id="title"
              placeholder="Ej: Actualización de base de datos"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Descripción</Label>
            <Textarea
              id="description"
              placeholder="Describe los detalles de la tarea..."
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={4}
            />
          </div>

          <div className="grid gap-4 sm:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="taskType">Tipo de Tarea *</Label>
              <Select value={taskType} onValueChange={setTaskType}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecciona un tipo" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="manual">Manual</SelectItem>
                  <SelectItem value="automatica">Automática</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="priority">Prioridad *</Label>
              <Select value={priority} onValueChange={setPriority}>
                <SelectTrigger>
                  <SelectValue placeholder="Selecciona prioridad" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="baja">Baja</SelectItem>
                  <SelectItem value="media">Media</SelectItem>
                  <SelectItem value="alta">Alta</SelectItem>
                  <SelectItem value="critica">Crítica</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="assignedTo">Asignar a *</Label>
            <Select value={assignedTo} onValueChange={setAssignedTo}>
              <SelectTrigger>
                <SelectValue placeholder="Selecciona responsable" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Carlos Martínez">Carlos Martínez</SelectItem>
                <SelectItem value="Ana López">Ana López</SelectItem>
                <SelectItem value="Pedro Sánchez">Pedro Sánchez</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="grid gap-4 sm:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="scheduledDate" className="flex items-center gap-2">
                <Calendar className="h-4 w-4" />
                Fecha Programada *
              </Label>
              <Input
                id="scheduledDate"
                type="date"
                value={scheduledDate}
                onChange={(e) => setScheduledDate(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="scheduledTime" className="flex items-center gap-2">
                <Clock className="h-4 w-4" />
                Hora Programada *
              </Label>
              <Input
                id="scheduledTime"
                type="time"
                value={scheduledTime}
                onChange={(e) => setScheduledTime(e.target.value)}
              />
            </div>
          </div>

          <div className="space-y-4 rounded-lg border p-4">
            <div className="flex items-center gap-2">
              <Checkbox
                id="recurring"
                checked={isRecurring}
                onCheckedChange={(checked) => setIsRecurring(checked as boolean)}
              />
              <Label htmlFor="recurring" className="cursor-pointer font-medium">
                Tarea Recurrente
              </Label>
            </div>

            {isRecurring && (
              <div className="space-y-2">
                <Label htmlFor="frequency">Frecuencia</Label>
                <Select value={frequency} onValueChange={setFrequency}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecciona frecuencia" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="diaria">Diaria</SelectItem>
                    <SelectItem value="semanal">Semanal</SelectItem>
                    <SelectItem value="mensual">Mensual</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>

          <div className="rounded-lg bg-blue-50 p-4">
            <div className="flex items-start gap-3">
              <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-blue-900">Nota</p>
                <p className="mt-1 text-sm text-blue-700">
                  El responsable asignado recibirá una notificación cuando se acerque la fecha programada.
                </p>
              </div>
            </div>
          </div>

          <div className="flex gap-3">
            <Button type="submit" className="flex-1">
              Programar Tarea
            </Button>
            <Button type="button" variant="outline" onClick={() => router.push("/mantenimiento/tareas")}>
              Cancelar
            </Button>
          </div>
        </CardContent>
      </Card>
    </form>
  )
}



================================================================================
# ARCHIVO: front-end/components/profile/profile-settings.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/profile/profile-settings.tsx
================================================================================

"use client"

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { useToast } from "@/hooks/use-toast"
import { Save, Trash2, Loader2, Languages } from "lucide-react"
import { useRouter } from "next/navigation"
import { useEffect, useState } from "react"

export function ProfileSettings() {
  const { toast } = useToast()
  const router = useRouter()
  
  const [isLoading, setIsLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [userData, setUserData] = useState<any>(null)
  const [formData, setFormData] = useState({
    nombre: "",
    primer_apellido: "",
    segundo_apellido: "",
    correo: "",
  })

  useEffect(() => {
    cargarDatosUsuario()
  }, [])

  const cargarDatosUsuario = async () => {
    try {
      const userId = localStorage.getItem("userId")
      if (!userId) {
        router.push("/login")
        return
      }

      const res = await fetch(`http://localhost:5000/api/usuario/perfil/${userId}`)
      const data = await res.json()

      if (res.ok) {
        setUserData(data)
        setFormData({
          nombre: data.usuario.nombre,
          primer_apellido: data.usuario.primer_apellido,
          segundo_apellido: data.usuario.segundo_apellido || "",
          correo: data.usuario.correo,
        })
      }
    } catch (error) {
      console.error("Error al cargar datos del usuario:", error)
      toast({
        title: "Error",
        description: "No se pudo cargar el perfil",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleSave = async () => {
    if (!userData) return

    setSaving(true)
    try {
      const userId = localStorage.getItem("userId")
      const res = await fetch(`http://localhost:5000/api/usuarios/${userId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      })

      if (!res.ok) throw new Error("Error al actualizar")

      toast({
        title: "Perfil actualizado",
        description: "Tus cambios han sido guardados exitosamente",
      })
      
      // Recargar datos
      await cargarDatosUsuario()
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "No se pudo actualizar el perfil",
        variant: "destructive",
      })
    } finally {
      setSaving(false)
    }
  }

  const handleCancel = () => {
    if (userData) {
      setFormData({
        nombre: userData.usuario.nombre,
        primer_apellido: userData.usuario.primer_apellido,
        segundo_apellido: userData.usuario.segundo_apellido || "",
        correo: userData.usuario.correo,
      })
    }
  }

  // Iniciales corregidas: PH (Primer apellido + Nombre)
  const getInitials = () => {
    if (!userData) return "U"
    const { primer_apellido, nombre } = userData.usuario
    return `${primer_apellido[0]}${nombre[0]}`.toUpperCase()
  }

  const isStudent = userData?.usuario.rol === "alumno" || userData?.usuario.rol === "estudiante"

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    )
  }

  if (!userData) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
        <p className="text-muted-foreground">No se pudo cargar el perfil</p>
        <Button onClick={() => router.push("/login")}>Volver al login</Button>
      </div>
    )
  }

  return (
    <div className="mx-auto max-w-3xl space-y-6">
      {/* Profile Info */}
      <Card className="p-6">
        <h2 className="mb-6 text-xl font-bold">Información Personal</h2>

        <div className="mb-6 flex items-center gap-4">
          <Avatar className="h-20 w-20">
            <AvatarFallback className="bg-primary text-2xl text-primary-foreground">
              {getInitials()}
            </AvatarFallback>
          </Avatar>
          <div>
            <Button variant="outline" size="sm" disabled>
              Cambiar Foto
            </Button>
            <p className="mt-1 text-xs text-muted-foreground">JPG, PNG o GIF. Máximo 2MB</p>
          </div>
        </div>

        <div className="space-y-4">
          <div className="grid gap-4 sm:grid-cols-2">
            <div className="space-y-2">
              <Label htmlFor="nombre">Nombre</Label>
              <Input
                id="nombre"
                value={formData.nombre}
                onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="primer_apellido">Primer Apellido</Label>
              <Input
                id="primer_apellido"
                value={formData.primer_apellido}
                onChange={(e) => setFormData({ ...formData, primer_apellido: e.target.value })}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="segundo_apellido">Segundo Apellido (Opcional)</Label>
            <Input
              id="segundo_apellido"
              value={formData.segundo_apellido}
              onChange={(e) => setFormData({ ...formData, segundo_apellido: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="email">Correo Electrónico</Label>
            <Input
              id="email"
              type="email"
              value={formData.correo}
              onChange={(e) => setFormData({ ...formData, correo: e.target.value })}
            />
            <p className="text-xs text-muted-foreground">
              Si cambias tu correo, deberás verificarlo nuevamente
            </p>
          </div>

          {isStudent && userData.perfil && (
            <div className="grid gap-4 sm:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="level">Nivel Actual</Label>
                <Input id="level" value={userData.perfil.nivel_actual} disabled />
              </div>

              <div className="space-y-2">
                <Label htmlFor="course">Idioma</Label>
                <Input id="course" value={userData.perfil.idioma} disabled />
              </div>
            </div>
          )}

          {isStudent && userData.perfil && (
            <div className="grid gap-4 sm:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="xp">Experiencia Total</Label>
                <Input id="xp" value={`${userData.perfil.total_xp || 0} XP`} disabled />
              </div>

              <div className="space-y-2">
                <Label htmlFor="racha">Racha Actual</Label>
                <Input id="racha" value={`${userData.perfil.dias_racha || 0} días`} disabled />
              </div>
            </div>
          )}
        </div>

        <div className="mt-6 flex gap-3">
          <Button onClick={handleSave} disabled={saving}>
            {saving ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Guardando...
              </>
            ) : (
              <>
                <Save className="mr-2 h-4 w-4" />
                Guardar Cambios
              </>
            )}
          </Button>
          <Button variant="outline" onClick={handleCancel} disabled={saving}>
            Cancelar
          </Button>
        </div>
      </Card>

      {/* Gestión de Curso - Solo para estudiantes */}
      {isStudent && (
        <Card className="p-6">
          <h2 className="mb-2 text-xl font-bold">Gestión de Curso</h2>
          <p className="mb-4 text-sm text-muted-foreground">
            Cambia tu curso actual si deseas aprender un idioma diferente o ajustar tu nivel.
          </p>
          <Button 
            variant="outline" 
            onClick={() => router.push("/cambiar-curso")}
            className="w-full sm:w-auto"
          >
            <Languages className="mr-2 h-4 w-4" />
            Cambiar Curso
          </Button>
        </Card>
      )}

      {/* Zona de Peligro - Solo para estudiantes */}
      {isStudent && (
        <Card className="border-destructive/50 p-6">
          <h2 className="mb-2 text-xl font-bold text-destructive">Zona de Peligro</h2>
          <p className="mb-4 text-sm text-muted-foreground">
            Una vez que elimines tu cuenta, no hay vuelta atrás. Por favor, ten cuidado.
          </p>
          <Button 
            variant="destructive" 
            onClick={() => router.push("/eliminar-cuenta")}
            className="w-full sm:w-auto"
          >
            <Trash2 className="mr-2 h-4 w-4" />
            Eliminar Cuenta
          </Button>
        </Card>
      )}
    </div>
  )
}


================================================================================
# ARCHIVO: front-end/components/teacher/create-planning-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/teacher/create-planning-form.tsx
================================================================================

"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import { useRouter } from "next/navigation"
import { ChevronRight, ChevronLeft, Check, Target, TrendingDown, BookOpen } from "lucide-react"

export function CreatePlanningForm() {
  const [step, setStep] = useState(1)
  const { toast } = useToast()
  const router = useRouter()

  // Step 1 data
  const [title, setTitle] = useState("")
  const [course, setCourse] = useState("")
  const [level, setLevel] = useState("")
  const [description, setDescription] = useState("")
  const [selectedAreas, setSelectedAreas] = useState<string[]>([])

  // Step 2 data
  const [selectedSuggestions, setSelectedSuggestions] = useState<string[]>([])

  // Step 3 data
  const [selectedLessons, setSelectedLessons] = useState<string[]>([])

  const improvementAreas = [
    { id: "grammar", label: "Gramática", students: 12 },
    { id: "vocabulary", label: "Vocabulario", students: 8 },
    { id: "pronunciation", label: "Pronunciación", students: 15 },
    { id: "listening", label: "Comprensión Auditiva", students: 10 },
    { id: "writing", label: "Escritura", students: 6 },
  ]

  const suggestions = [
    {
      id: "1",
      title: "Reforzar Tiempos Verbales",
      reason: "45% de errores en past simple",
      priority: "alta",
    },
    {
      id: "2",
      title: "Práctica de Conversación",
      reason: "Baja participación en actividades orales",
      priority: "media",
    },
    {
      id: "3",
      title: "Vocabulario Técnico",
      reason: "Solicitudes frecuentes de estudiantes",
      priority: "media",
    },
  ]

  const availableLessons = [
    { id: "1", title: "Past Simple - Verbos Regulares", level: "A2", duration: "45 min" },
    { id: "2", title: "Past Simple - Verbos Irregulares", level: "A2", duration: "50 min" },
    { id: "3", title: "Conversación: Daily Routines", level: "B1", duration: "40 min" },
    { id: "4", title: "Vocabulario: Business English", level: "B2", duration: "35 min" },
    { id: "5", title: "Listening Practice: Interviews", level: "B1", duration: "30 min" },
  ]

  const handleAreaToggle = (areaId: string) => {
    setSelectedAreas((prev) => (prev.includes(areaId) ? prev.filter((id) => id !== areaId) : [...prev, areaId]))
  }

  const handleSuggestionToggle = (suggestionId: string) => {
    setSelectedSuggestions((prev) =>
      prev.includes(suggestionId) ? prev.filter((id) => id !== suggestionId) : [...prev, suggestionId],
    )
  }

  const handleLessonToggle = (lessonId: string) => {
    setSelectedLessons((prev) => (prev.includes(lessonId) ? prev.filter((id) => id !== lessonId) : [...prev, lessonId]))
  }

  const handleNext = () => {
    if (step === 1 && (!title || !course || !level || selectedAreas.length === 0)) {
      toast({
        title: "Campos incompletos",
        description: "Por favor completa todos los campos requeridos",
        variant: "destructive",
      })
      return
    }
    if (step === 2 && selectedSuggestions.length === 0) {
      toast({
        title: "Selección requerida",
        description: "Selecciona al menos una sugerencia",
        variant: "destructive",
      })
      return
    }
    setStep(step + 1)
  }

  const handleBack = () => {
    setStep(step - 1)
  }

  const handleSubmit = () => {
    if (selectedLessons.length === 0) {
      toast({
        title: "Lecciones requeridas",
        description: "Asocia al menos una lección al plan",
        variant: "destructive",
      })
      return
    }

    toast({
      title: "Plan creado exitosamente",
      description: "El plan ha sido guardado y está listo para activarse",
    })
    router.push("/profesor/planificacion")
  }

  return (
    <Card className="mx-auto max-w-4xl">
      <CardHeader>
        <div className="mb-4 flex items-center justify-between">
          <div className="flex gap-2">
            {[1, 2, 3].map((s) => (
              <div
                key={s}
                className={`flex h-8 w-8 items-center justify-center rounded-full text-sm font-medium ${
                  s === step
                    ? "bg-primary text-primary-foreground"
                    : s < step
                      ? "bg-green-500 text-white"
                      : "bg-muted text-muted-foreground"
                }`}
              >
                {s < step ? <Check className="h-4 w-4" /> : s}
              </div>
            ))}
          </div>
          <Badge variant="outline">Paso {step} de 3</Badge>
        </div>
        <CardTitle>
          {step === 1 && "Información Básica"}
          {step === 2 && "Análisis y Sugerencias"}
          {step === 3 && "Asociar Lecciones"}
        </CardTitle>
        <CardDescription>
          {step === 1 && "Completa la información básica del plan y selecciona áreas de mejora"}
          {step === 2 && "Revisa el análisis de desempeño y acepta las sugerencias"}
          {step === 3 && "Asocia las lecciones que formarán parte de este plan"}
        </CardDescription>
      </CardHeader>

      <CardContent>
        {/* Step 1: Basic Information */}
        {step === 1 && (
          <div className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="title">Título del Plan *</Label>
              <Input
                id="title"
                placeholder="Ej: Unidad 5: Tiempos Verbales"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>

            <div className="grid gap-4 sm:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="course">Curso *</Label>
                <Select value={course} onValueChange={setCourse}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecciona un curso" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="english-beginner">Inglés Principiante</SelectItem>
                    <SelectItem value="english-intermediate">Inglés Intermedio</SelectItem>
                    <SelectItem value="english-advanced">Inglés Avanzado</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="level">Nivel *</Label>
                <Select value={level} onValueChange={setLevel}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecciona un nivel" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="A1">A1 - Principiante</SelectItem>
                    <SelectItem value="A2">A2 - Elemental</SelectItem>
                    <SelectItem value="B1">B1 - Intermedio</SelectItem>
                    <SelectItem value="B2">B2 - Intermedio Alto</SelectItem>
                    <SelectItem value="C1">C1 - Avanzado</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Descripción</Label>
              <Textarea
                id="description"
                placeholder="Describe los objetivos y contenido del plan..."
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={4}
              />
            </div>

            <div className="space-y-3">
              <Label>Áreas de Mejora *</Label>
              <p className="text-sm text-muted-foreground">
                Selecciona las áreas donde los estudiantes necesitan refuerzo
              </p>
              <div className="space-y-2">
                {improvementAreas.map((area) => (
                  <div key={area.id} className="flex items-center justify-between rounded-lg border p-3">
                    <div className="flex items-center gap-3">
                      <Checkbox
                        id={area.id}
                        checked={selectedAreas.includes(area.id)}
                        onCheckedChange={() => handleAreaToggle(area.id)}
                      />
                      <div>
                        <Label htmlFor={area.id} className="cursor-pointer font-medium">
                          {area.label}
                        </Label>
                        <p className="text-xs text-muted-foreground">{area.students} estudiantes con dificultad</p>
                      </div>
                    </div>
                    <TrendingDown className="h-4 w-4 text-orange-500" />
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Step 2: Analysis and Suggestions */}
        {step === 2 && (
          <div className="space-y-6">
            <div className="rounded-lg bg-blue-50 p-4">
              <div className="flex items-start gap-3">
                <Target className="mt-0.5 h-5 w-5 text-blue-600" />
                <div>
                  <h3 className="font-semibold text-blue-900">Análisis de Desempeño</h3>
                  <p className="mt-1 text-sm text-blue-700">
                    Basado en las áreas seleccionadas, hemos identificado las siguientes lecciones problemáticas y
                    generado sugerencias de mejora.
                  </p>
                </div>
              </div>
            </div>

            <div className="space-y-3">
              <Label>Sugerencias de Contenido</Label>
              <p className="text-sm text-muted-foreground">Selecciona las sugerencias que deseas incluir en el plan</p>
              <div className="space-y-3">
                {suggestions.map((suggestion) => (
                  <div key={suggestion.id} className="rounded-lg border p-4">
                    <div className="flex items-start gap-3">
                      <Checkbox
                        id={`suggestion-${suggestion.id}`}
                        checked={selectedSuggestions.includes(suggestion.id)}
                        onCheckedChange={() => handleSuggestionToggle(suggestion.id)}
                      />
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <Label htmlFor={`suggestion-${suggestion.id}`} className="cursor-pointer font-medium">
                            {suggestion.title}
                          </Label>
                          <Badge
                            variant={suggestion.priority === "alta" ? "destructive" : "secondary"}
                            className="text-xs"
                          >
                            {suggestion.priority}
                          </Badge>
                        </div>
                        <p className="mt-1 text-sm text-muted-foreground">{suggestion.reason}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Step 3: Associate Lessons */}
        {step === 3 && (
          <div className="space-y-6">
            <div className="rounded-lg bg-green-50 p-4">
              <div className="flex items-start gap-3">
                <BookOpen className="mt-0.5 h-5 w-5 text-green-600" />
                <div>
                  <h3 className="font-semibold text-green-900">Lecciones Disponibles</h3>
                  <p className="mt-1 text-sm text-green-700">
                    Selecciona las lecciones que formarán parte de este plan de contenido.
                  </p>
                </div>
              </div>
            </div>

            <div className="space-y-3">
              {availableLessons.map((lesson) => (
                <div key={lesson.id} className="rounded-lg border p-4">
                  <div className="flex items-start gap-3">
                    <Checkbox
                      id={`lesson-${lesson.id}`}
                      checked={selectedLessons.includes(lesson.id)}
                      onCheckedChange={() => handleLessonToggle(lesson.id)}
                    />
                    <div className="flex-1">
                      <Label htmlFor={`lesson-${lesson.id}`} className="cursor-pointer font-medium">
                        {lesson.title}
                      </Label>
                      <div className="mt-1 flex items-center gap-3 text-sm text-muted-foreground">
                        <span>Nivel: {lesson.level}</span>
                        <span>•</span>
                        <span>Duración: {lesson.duration}</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {selectedLessons.length > 0 && (
              <div className="rounded-lg bg-muted p-4">
                <p className="text-sm font-medium">
                  {selectedLessons.length}{" "}
                  {selectedLessons.length === 1 ? "lección seleccionada" : "lecciones seleccionadas"}
                </p>
              </div>
            )}
          </div>
        )}

        {/* Navigation Buttons */}
        <div className="mt-8 flex justify-between">
          <Button variant="outline" onClick={handleBack} disabled={step === 1}>
            <ChevronLeft className="mr-2 h-4 w-4" />
            Anterior
          </Button>

          {step < 3 ? (
            <Button onClick={handleNext}>
              Siguiente
              <ChevronRight className="ml-2 h-4 w-4" />
            </Button>
          ) : (
            <Button onClick={handleSubmit}>
              <Check className="mr-2 h-4 w-4" />
              Crear Plan
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/teacher/quick-teacher-actions.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/teacher/quick-teacher-actions.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { BarChart3, MessageSquare, Calendar, FileText } from "lucide-react"

export function QuickTeacherActions() {
  const actions = [
    {
      label: "Ver Estadísticas",
      href: "/profesor/estadisticas",
      icon: BarChart3,
      color: "bg-primary/10 text-primary",
    },
    {
      label: "Retroalimentación",
      href: "/profesor/retroalimentacion",
      icon: MessageSquare,
      color: "bg-secondary/10 text-secondary",
    },
    {
      label: "Planificación",
      href: "/profesor/planificacion",
      icon: Calendar,
      color: "bg-accent/10 text-accent",
    },
    {
      label: "Reportes",
      href: "/profesor/reportes",
      icon: FileText,
      color: "bg-muted text-muted-foreground",
    },
  ]

  return (
    <Card className="p-6">
      <h3 className="mb-4 font-bold">Acciones Rápidas</h3>
      <div className="space-y-2">
        {actions.map((action, index) => {
          const Icon = action.icon
          return (
            <Link key={index} href={action.href}>
              <Button variant="ghost" className="w-full justify-start gap-3">
                <div className={`flex h-8 w-8 items-center justify-center rounded-lg ${action.color}`}>
                  <Icon className="h-4 w-4" />
                </div>
                {action.label}
              </Button>
            </Link>
          )
        })}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/teacher/recent-feedback.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/teacher/recent-feedback.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { MessageSquare } from "lucide-react"

export function RecentFeedback() {
  const feedback = [
    {
      id: 1,
      student: "María García",
      lesson: "Daily Routines",
      comment: "No entiendo el uso de 'usually' vs 'always'",
      status: "pending",
      date: "Hace 2 horas",
    },
    {
      id: 2,
      student: "Carlos Rodríguez",
      lesson: "Past Tense",
      comment: "Excelente lección, muy clara",
      status: "responded",
      date: "Hace 1 día",
    },
    {
      id: 3,
      student: "Ana Martínez",
      lesson: "Colors and Shapes",
      comment: "Necesito más práctica con pronunciación",
      status: "pending",
      date: "Hace 3 horas",
    },
  ]

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h3 className="font-bold">Comentarios Recientes</h3>
        <Badge variant="secondary">{feedback.filter((f) => f.status === "pending").length} pendientes</Badge>
      </div>

      <div className="space-y-3">
        {feedback.map((item) => (
          <Link key={item.id} href={`/profesor/retroalimentacion/${item.id}`}>
            <div
              className={`rounded-lg border-2 p-3 transition-all ${
                item.status === "pending"
                  ? "border-accent/30 bg-accent/5 hover:border-accent"
                  : "border-border bg-card hover:border-primary/50"
              }`}
            >
              <div className="mb-2 flex items-start justify-between gap-2">
                <div className="flex items-center gap-2">
                  <MessageSquare className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm font-medium">{item.student}</span>
                </div>
                <Badge variant={item.status === "pending" ? "default" : "secondary"} className="text-xs">
                  {item.status === "pending" ? "Pendiente" : "Respondido"}
                </Badge>
              </div>
              <p className="mb-2 text-sm text-muted-foreground">{item.lesson}</p>
              <p className="text-sm leading-relaxed">{item.comment}</p>
              <p className="mt-2 text-xs text-muted-foreground">{item.date}</p>
            </div>
          </Link>
        ))}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/teacher/response-modal.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/teacher/response-modal.tsx
================================================================================

"use client"

import { useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { useToast } from "@/hooks/use-toast"
import { Send } from "lucide-react"

interface Feedback {
  id: number
  student: string
  type: string
  message: string
  date: string
  status: string
  response: string | null
}

interface ResponseModalProps {
  isOpen: boolean
  onClose: () => void
  feedback?: Feedback
}

export function ResponseModal({ isOpen, onClose, feedback }: ResponseModalProps) {
  const [response, setResponse] = useState(feedback?.response || "")
  const { toast } = useToast()

  const handleSubmit = () => {
    if (!response.trim()) {
      toast({
        title: "Respuesta vacía",
        description: "Por favor escribe una respuesta antes de enviar",
        variant: "destructive",
      })
      return
    }

    toast({
      title: "Respuesta enviada",
      description: "El estudiante ha sido notificado de tu respuesta",
    })
    setResponse("")
    onClose()
  }

  if (!feedback) return null

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>
            {feedback.status === "respondido" ? "Respuesta Enviada" : "Responder Retroalimentación"}
          </DialogTitle>
          <DialogDescription>Retroalimentación de {feedback.student}</DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div className="rounded-lg border p-4">
            <div className="mb-2 flex items-center gap-2">
              <span className="font-medium">{feedback.student}</span>
              <Badge
                variant={
                  feedback.type === "problema"
                    ? "destructive"
                    : feedback.type === "felicitacion"
                      ? "default"
                      : "secondary"
                }
              >
                {feedback.type}
              </Badge>
            </div>
            <p className="text-sm text-muted-foreground">{feedback.message}</p>
            <p className="mt-2 text-xs text-muted-foreground">{feedback.date}</p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="response">
              {feedback.status === "respondido" ? "Tu Respuesta" : "Escribe tu respuesta"}
            </Label>
            <Textarea
              id="response"
              placeholder="Escribe tu respuesta aquí..."
              value={response}
              onChange={(e) => setResponse(e.target.value)}
              rows={6}
              disabled={feedback.status === "respondido"}
            />
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            {feedback.status === "respondido" ? "Cerrar" : "Cancelar"}
          </Button>
          {feedback.status !== "respondido" && (
            <Button onClick={handleSubmit}>
              <Send className="mr-2 h-4 w-4" />
              Enviar Respuesta
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}



================================================================================
# ARCHIVO: front-end/components/teacher/student-performance.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/teacher/student-performance.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import Link from "next/link"
import { ChevronRight } from "lucide-react"

export function StudentPerformance() {
  const students = [
    {
      id: 1,
      name: "María García",
      initials: "MG",
      level: "B1",
      lessonsCompleted: 15,
      totalLessons: 20,
      averageScore: 92,
      status: "excellent",
    },
    {
      id: 2,
      name: "Carlos Rodríguez",
      initials: "CR",
      level: "A2",
      lessonsCompleted: 8,
      totalLessons: 15,
      averageScore: 78,
      status: "good",
    },
    {
      id: 3,
      name: "Ana Martínez",
      initials: "AM",
      level: "B1",
      lessonsCompleted: 12,
      totalLessons: 20,
      averageScore: 65,
      status: "needs-attention",
    },
    {
      id: 4,
      name: "Luis Fernández",
      initials: "LF",
      level: "A1",
      lessonsCompleted: 5,
      totalLessons: 10,
      averageScore: 88,
      status: "good",
    },
  ]

  const getStatusBadge = (status: string) => {
    if (status === "excellent") return <Badge className="bg-success text-success-foreground">Excelente</Badge>
    if (status === "good") return <Badge variant="secondary">Bien</Badge>
    return <Badge variant="destructive">Necesita Atención</Badge>
  }

  return (
    <Card className="p-6">
      <div className="mb-4 flex items-center justify-between">
        <h2 className="text-xl font-bold">Rendimiento de Estudiantes</h2>
        <Link href="/profesor/estadisticas" className="text-sm text-primary hover:underline">
          Ver Todos
          <ChevronRight className="ml-1 inline h-4 w-4" />
        </Link>
      </div>

      <div className="space-y-4">
        {students.map((student) => (
          <Link key={student.id} href={`/profesor/estadisticas/${student.id}`}>
            <div className="rounded-xl border-2 border-border bg-card p-4 transition-all hover:border-primary hover:bg-primary/5">
              <div className="flex items-start gap-4">
                <Avatar className="h-12 w-12">
                  <AvatarFallback className="bg-primary text-primary-foreground">{student.initials}</AvatarFallback>
                </Avatar>

                <div className="flex-1">
                  <div className="mb-2 flex items-start justify-between">
                    <div>
                      <h3 className="font-semibold">{student.name}</h3>
                      <p className="text-sm text-muted-foreground">Nivel {student.level}</p>
                    </div>
                    {getStatusBadge(student.status)}
                  </div>

                  <div className="space-y-2">
                    <div>
                      <div className="mb-1 flex items-center justify-between text-xs">
                        <span className="text-muted-foreground">Progreso</span>
                        <span className="font-medium">
                          {student.lessonsCompleted} / {student.totalLessons} lecciones
                        </span>
                      </div>
                      <Progress value={(student.lessonsCompleted / student.totalLessons) * 100} className="h-2" />
                    </div>

                    <div className="flex items-center justify-between text-sm">
                      <span className="text-muted-foreground">Promedio</span>
                      <span className="font-bold text-primary">{student.averageScore}%</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/teacher/teacher-stats.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/teacher/teacher-stats.tsx
================================================================================

import { Card } from "@/components/ui/card"
import { Users, BookOpen, MessageSquare, TrendingUp } from "lucide-react"

export function TeacherStats() {
  const stats = [
    {
      label: "Estudiantes Activos",
      value: 45,
      change: "+5",
      icon: Users,
      color: "text-primary",
    },
    {
      label: "Lecciones Completadas",
      value: 234,
      change: "+12",
      icon: BookOpen,
      color: "text-secondary",
    },
    {
      label: "Comentarios Pendientes",
      value: 8,
      change: "-3",
      icon: MessageSquare,
      color: "text-accent",
    },
    {
      label: "Tasa de Éxito Promedio",
      value: "87%",
      change: "+2%",
      icon: TrendingUp,
      color: "text-success",
    },
  ]

  return (
    <Card className="p-6">
      <h2 className="mb-4 text-xl font-bold">Estadísticas Generales</h2>

      <div className="grid gap-4 sm:grid-cols-2">
        {stats.map((stat, index) => {
          const Icon = stat.icon
          return (
            <div key={index} className="flex items-start gap-3 rounded-lg bg-muted/50 p-4">
              <div className={`flex h-10 w-10 items-center justify-center rounded-lg bg-background ${stat.color}`}>
                <Icon className="h-5 w-5" />
              </div>
              <div className="flex-1">
                <p className="text-sm text-muted-foreground">{stat.label}</p>
                <div className="mt-1 flex items-baseline gap-2">
                  <span className="text-2xl font-bold">{stat.value}</span>
                  <span className="text-sm font-medium text-success">{stat.change}</span>
                </div>
              </div>
            </div>
          )
        })}
      </div>
    </Card>
  )
}



================================================================================
# ARCHIVO: front-end/components/theme-provider.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/theme-provider.tsx
================================================================================

'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



================================================================================
# ARCHIVO: front-end/components/ui/accordion.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/accordion.tsx
================================================================================

'use client'

import * as React from 'react'
import * as AccordionPrimitive from '@radix-ui/react-accordion'
import { ChevronDownIcon } from 'lucide-react'

import { cn } from '@/lib/utils'

function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}

function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn('border-b last:border-b-0', className)}
      {...props}
    />
  )
}

function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',
          className,
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}

function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn('pt-0 pb-4', className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



================================================================================
# ARCHIVO: front-end/components/ui/alert-dialog.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/alert-dialog.tsx
================================================================================

'use client'

import * as React from 'react'
import * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'

import { cn } from '@/lib/utils'
import { buttonVariants } from '@/components/ui/button'

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className,
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',
          className,
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',
        className,
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn('text-lg font-semibold', className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: 'outline' }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================================================
# ARCHIVO: front-end/components/ui/alert.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/alert.tsx
================================================================================

import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const alertVariants = cva(
  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',
  {
    variants: {
      variant: {
        default: 'bg-card text-card-foreground',
        destructive:
          'text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',
        className,
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',
        className,
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }



================================================================================
# ARCHIVO: front-end/components/ui/aspect-ratio.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/aspect-ratio.tsx
================================================================================

'use client'

import * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'

function AspectRatio({
  ...props
}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {
  return <AspectRatioPrimitive.Root data-slot="aspect-ratio" {...props} />
}

export { AspectRatio }



================================================================================
# ARCHIVO: front-end/components/ui/avatar.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/avatar.tsx
================================================================================

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



================================================================================
# ARCHIVO: front-end/components/ui/badge.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/badge.tsx
================================================================================

import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }



================================================================================
# ARCHIVO: front-end/components/ui/breadcrumb.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/breadcrumb.tsx
================================================================================

import * as React from "react"
import { ChevronRight } from "lucide-react"
import Link from "next/link"
import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<HTMLElement, React.ComponentPropsWithoutRef<"nav">>(
  ({ className, ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" className={cn("", className)} {...props} />,
)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<"ol">>(
  ({ className, ...props }, ref) => (
    <ol
      ref={ref}
      className={cn("flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground", className)}
      {...props}
    />
  ),
)
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<"li">>(
  ({ className, ...props }, ref) => (
    <li ref={ref} className={cn("inline-flex items-center gap-1.5", className)} {...props} />
  ),
)
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<typeof Link> & {
    asChild?: boolean
  }
>(({ className, ...props }, ref) => (
  <Link ref={ref} className={cn("transition-colors hover:text-foreground", className)} {...props} />
))
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<"span">>(
  ({ className, ...props }, ref) => (
    <span
      ref={ref}
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("font-normal text-foreground", className)}
      {...props}
    />
  ),
)
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<"li">) => (
  <li role="presentation" aria-hidden="true" className={cn("[&>svg]:size-3.5", className)} {...props}>
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

export { Breadcrumb, BreadcrumbList, BreadcrumbItem, BreadcrumbLink, BreadcrumbPage, BreadcrumbSeparator }



================================================================================
# ARCHIVO: front-end/components/ui/button-group.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/button-group.tsx
================================================================================

import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'
import { Separator } from '@/components/ui/separator'

const buttonGroupVariants = cva(
  "flex w-fit items-stretch [&>*]:focus-visible:z-10 [&>*]:focus-visible:relative [&>[data-slot=select-trigger]:not([class*='w-'])]:w-fit [&>input]:flex-1 has-[select[aria-hidden=true]:last-child]:[&>[data-slot=select-trigger]:last-of-type]:rounded-r-md has-[>[data-slot=button-group]]:gap-2",
  {
    variants: {
      orientation: {
        horizontal:
          '[&>*:not(:first-child)]:rounded-l-none [&>*:not(:first-child)]:border-l-0 [&>*:not(:last-child)]:rounded-r-none',
        vertical:
          'flex-col [&>*:not(:first-child)]:rounded-t-none [&>*:not(:first-child)]:border-t-0 [&>*:not(:last-child)]:rounded-b-none',
      },
    },
    defaultVariants: {
      orientation: 'horizontal',
    },
  },
)

function ButtonGroup({
  className,
  orientation,
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof buttonGroupVariants>) {
  return (
    <div
      role="group"
      data-slot="button-group"
      data-orientation={orientation}
      className={cn(buttonGroupVariants({ orientation }), className)}
      {...props}
    />
  )
}

function ButtonGroupText({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'div'> & {
  asChild?: boolean
}) {
  const Comp = asChild ? Slot : 'div'

  return (
    <Comp
      className={cn(
        "bg-muted flex items-center gap-2 rounded-md border px-4 text-sm font-medium shadow-xs [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function ButtonGroupSeparator({
  className,
  orientation = 'vertical',
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="button-group-separator"
      orientation={orientation}
      className={cn(
        'bg-input relative !m-0 self-stretch data-[orientation=vertical]:h-auto',
        className,
      )}
      {...props}
    />
  )
}

export {
  ButtonGroup,
  ButtonGroupSeparator,
  ButtonGroupText,
  buttonGroupVariants,
}



================================================================================
# ARCHIVO: front-end/components/ui/button.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/button.tsx
================================================================================

import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline:
          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost:
          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
        'icon-sm': 'size-8',
        'icon-lg': 'size-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : 'button'

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }



================================================================================
# ARCHIVO: front-end/components/ui/calendar.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/calendar.tsx
================================================================================

'use client'

import * as React from 'react'
import {
  ChevronDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
} from 'lucide-react'
import { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'

import { cn } from '@/lib/utils'
import { Button, buttonVariants } from '@/components/ui/button'

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  captionLayout = 'label',
  buttonVariant = 'ghost',
  formatters,
  components,
  ...props
}: React.ComponentProps<typeof DayPicker> & {
  buttonVariant?: React.ComponentProps<typeof Button>['variant']
}) {
  const defaultClassNames = getDefaultClassNames()

  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn(
        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',
        String.raw`rtl:**:[.rdp-button\_next>svg]:rotate-180`,
        String.raw`rtl:**:[.rdp-button\_previous>svg]:rotate-180`,
        className,
      )}
      captionLayout={captionLayout}
      formatters={{
        formatMonthDropdown: (date) =>
          date.toLocaleString('default', { month: 'short' }),
        ...formatters,
      }}
      classNames={{
        root: cn('w-fit', defaultClassNames.root),
        months: cn(
          'flex gap-4 flex-col md:flex-row relative',
          defaultClassNames.months,
        ),
        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),
        nav: cn(
          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',
          defaultClassNames.nav,
        ),
        button_previous: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_previous,
        ),
        button_next: cn(
          buttonVariants({ variant: buttonVariant }),
          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',
          defaultClassNames.button_next,
        ),
        month_caption: cn(
          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',
          defaultClassNames.month_caption,
        ),
        dropdowns: cn(
          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',
          defaultClassNames.dropdowns,
        ),
        dropdown_root: cn(
          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',
          defaultClassNames.dropdown_root,
        ),
        dropdown: cn(
          'absolute bg-popover inset-0 opacity-0',
          defaultClassNames.dropdown,
        ),
        caption_label: cn(
          'select-none font-medium',
          captionLayout === 'label'
            ? 'text-sm'
            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',
          defaultClassNames.caption_label,
        ),
        table: 'w-full border-collapse',
        weekdays: cn('flex', defaultClassNames.weekdays),
        weekday: cn(
          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',
          defaultClassNames.weekday,
        ),
        week: cn('flex w-full mt-2', defaultClassNames.week),
        week_number_header: cn(
          'select-none w-(--cell-size)',
          defaultClassNames.week_number_header,
        ),
        week_number: cn(
          'text-[0.8rem] select-none text-muted-foreground',
          defaultClassNames.week_number,
        ),
        day: cn(
          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',
          defaultClassNames.day,
        ),
        range_start: cn(
          'rounded-l-md bg-accent',
          defaultClassNames.range_start,
        ),
        range_middle: cn('rounded-none', defaultClassNames.range_middle),
        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),
        today: cn(
          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',
          defaultClassNames.today,
        ),
        outside: cn(
          'text-muted-foreground aria-selected:text-muted-foreground',
          defaultClassNames.outside,
        ),
        disabled: cn(
          'text-muted-foreground opacity-50',
          defaultClassNames.disabled,
        ),
        hidden: cn('invisible', defaultClassNames.hidden),
        ...classNames,
      }}
      components={{
        Root: ({ className, rootRef, ...props }) => {
          return (
            <div
              data-slot="calendar"
              ref={rootRef}
              className={cn(className)}
              {...props}
            />
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === 'left') {
            return (
              <ChevronLeftIcon className={cn('size-4', className)} {...props} />
            )
          }

          if (orientation === 'right') {
            return (
              <ChevronRightIcon
                className={cn('size-4', className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn('size-4', className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className="flex size-(--cell-size) items-center justify-center text-center">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}

function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant="ghost"
      size="icon"
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',
        defaultClassNames.day,
        className,
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }



================================================================================
# ARCHIVO: front-end/components/ui/card.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/card.tsx
================================================================================

import * as React from 'react'

import { cn } from '@/lib/utils'

function Card({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card"
      className={cn(
        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',
        className,
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',
        className,
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-title"
      className={cn('leading-none font-semibold', className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',
        className,
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-content"
      className={cn('px-6', className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="card-footer"
      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}



================================================================================
# ARCHIVO: front-end/components/ui/carousel.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/carousel.tsx
================================================================================

'use client'

import * as React from 'react'
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from 'embla-carousel-react'
import { ArrowLeft, ArrowRight } from 'lucide-react'

import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: 'horizontal' | 'vertical'
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />')
  }

  return context
}

function Carousel({
  orientation = 'horizontal',
  opts,
  setApi,
  plugins,
  className,
  children,
  ...props
}: React.ComponentProps<'div'> & CarouselProps) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === 'horizontal' ? 'x' : 'y',
    },
    plugins,
  )
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api: CarouselApi) => {
    if (!api) return
    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback(
    (event: React.KeyboardEvent<HTMLDivElement>) => {
      if (event.key === 'ArrowLeft') {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === 'ArrowRight') {
        event.preventDefault()
        scrollNext()
      }
    },
    [scrollPrev, scrollNext],
  )

  React.useEffect(() => {
    if (!api || !setApi) return
    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on('reInit', onSelect)
    api.on('select', onSelect)

    return () => {
      api?.off('select', onSelect)
    }
  }, [api, onSelect])

  return (
    <CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}
    >
      <div
        onKeyDownCapture={handleKeyDown}
        className={cn('relative', className)}
        role="region"
        aria-roledescription="carousel"
        data-slot="carousel"
        {...props}
      >
        {children}
      </div>
    </CarouselContext.Provider>
  )
}

function CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div
      ref={carouselRef}
      className="overflow-hidden"
      data-slot="carousel-content"
    >
      <div
        className={cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className,
        )}
        {...props}
      />
    </div>
  )
}

function CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      data-slot="carousel-item"
      className={cn(
        'min-w-0 shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-4' : 'pt-4',
        className,
      )}
      {...props}
    />
  )
}

function CarouselPrevious({
  className,
  variant = 'outline',
  size = 'icon',
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      data-slot="carousel-previous"
      variant={variant}
      size={size}
      className={cn(
        'absolute size-8 rounded-full',
        orientation === 'horizontal'
          ? 'top-1/2 -left-12 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className,
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

function CarouselNext({
  className,
  variant = 'outline',
  size = 'icon',
  ...props
}: React.ComponentProps<typeof Button>) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      data-slot="carousel-next"
      variant={variant}
      size={size}
      className={cn(
        'absolute size-8 rounded-full',
        orientation === 'horizontal'
          ? 'top-1/2 -right-12 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className,
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



================================================================================
# ARCHIVO: front-end/components/ui/chart.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/chart.tsx
================================================================================

'use client'

import * as React from 'react'
import * as RechartsPrimitive from 'recharts'

import { cn } from '@/lib/utils'

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: '', dark: '.dark' } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error('useChart must be used within a <ChartContainer />')
  }

  return context
}

function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<'div'> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >['children']
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-slot="chart"
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color,
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join('\n')}
}
`,
          )
          .join('\n'),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = 'dot',
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
  React.ComponentProps<'div'> & {
    hideLabel?: boolean
    hideIndicator?: boolean
    indicator?: 'line' | 'dot' | 'dashed'
    nameKey?: string
    labelKey?: string
  }) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }

    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === 'string'
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label

    if (labelFormatter) {
      return (
        <div className={cn('font-medium', labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }

    if (!value) {
      return null
    }

    return <div className={cn('font-medium', labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== 'dot'

  return (
    <div
      className={cn(
        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',
        className,
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = `${nameKey || item.name || item.dataKey || 'value'}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',
                indicator === 'dot' && 'items-center',
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',
                          {
                            'h-2.5 w-2.5': indicator === 'dot',
                            'w-1': indicator === 'line',
                            'w-0 border-[1.5px] border-dashed bg-transparent':
                              indicator === 'dashed',
                            'my-0.5': nestLabel && indicator === 'dashed',
                          },
                        )}
                        style={
                          {
                            '--color-bg': indicatorColor,
                            '--color-border': indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      'flex flex-1 justify-between leading-none',
                      nestLabel ? 'items-end' : 'items-center',
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}

const ChartLegend = RechartsPrimitive.Legend

function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = 'bottom',
  nameKey,
}: React.ComponentProps<'div'> &
  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {
    hideIcon?: boolean
    nameKey?: string
  }) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      className={cn(
        'flex items-center justify-center gap-4',
        verticalAlign === 'top' ? 'pb-3' : 'pt-3',
        className,
      )}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || 'value'}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className={
              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3'
            }
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string,
) {
  if (typeof payload !== 'object' || payload === null) {
    return undefined
  }

  const payloadPayload =
    'payload' in payload &&
    typeof payload.payload === 'object' &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === 'string'
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



================================================================================
# ARCHIVO: front-end/components/ui/checkbox.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/checkbox.tsx
================================================================================

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



================================================================================
# ARCHIVO: front-end/components/ui/collapsible.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/collapsible.tsx
================================================================================

'use client'

import * as CollapsiblePrimitive from '@radix-ui/react-collapsible'

function Collapsible({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {
  return <CollapsiblePrimitive.Root data-slot="collapsible" {...props} />
}

function CollapsibleTrigger({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {
  return (
    <CollapsiblePrimitive.CollapsibleTrigger
      data-slot="collapsible-trigger"
      {...props}
    />
  )
}

function CollapsibleContent({
  ...props
}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {
  return (
    <CollapsiblePrimitive.CollapsibleContent
      data-slot="collapsible-content"
      {...props}
    />
  )
}

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



================================================================================
# ARCHIVO: front-end/components/ui/command.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/command.tsx
================================================================================

'use client'

import * as React from 'react'
import { Command as CommandPrimitive } from 'cmdk'
import { SearchIcon } from 'lucide-react'

import { cn } from '@/lib/utils'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'

function Command({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive>) {
  return (
    <CommandPrimitive
      data-slot="command"
      className={cn(
        'bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md',
        className,
      )}
      {...props}
    />
  )
}

function CommandDialog({
  title = 'Command Palette',
  description = 'Search for a command to run...',
  children,
  className,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof Dialog> & {
  title?: string
  description?: string
  className?: string
  showCloseButton?: boolean
}) {
  return (
    <Dialog {...props}>
      <DialogHeader className="sr-only">
        <DialogTitle>{title}</DialogTitle>
        <DialogDescription>{description}</DialogDescription>
      </DialogHeader>
      <DialogContent
        className={cn('overflow-hidden p-0', className)}
        showCloseButton={showCloseButton}
      >
        <Command className="[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

function CommandInput({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Input>) {
  return (
    <div
      data-slot="command-input-wrapper"
      className="flex h-9 items-center gap-2 border-b px-3"
    >
      <SearchIcon className="size-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        data-slot="command-input"
        className={cn(
          'placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50',
          className,
        )}
        {...props}
      />
    </div>
  )
}

function CommandList({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.List>) {
  return (
    <CommandPrimitive.List
      data-slot="command-list"
      className={cn(
        'max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto',
        className,
      )}
      {...props}
    />
  )
}

function CommandEmpty({
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Empty>) {
  return (
    <CommandPrimitive.Empty
      data-slot="command-empty"
      className="py-6 text-center text-sm"
      {...props}
    />
  )
}

function CommandGroup({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Group>) {
  return (
    <CommandPrimitive.Group
      data-slot="command-group"
      className={cn(
        'text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium',
        className,
      )}
      {...props}
    />
  )
}

function CommandSeparator({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Separator>) {
  return (
    <CommandPrimitive.Separator
      data-slot="command-separator"
      className={cn('bg-border -mx-1 h-px', className)}
      {...props}
    />
  )
}

function CommandItem({
  className,
  ...props
}: React.ComponentProps<typeof CommandPrimitive.Item>) {
  return (
    <CommandPrimitive.Item
      data-slot="command-item"
      className={cn(
        "data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function CommandShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="command-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  )
}

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================================================
# ARCHIVO: front-end/components/ui/context-menu.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/context-menu.tsx
================================================================================

'use client'

import * as React from 'react'
import * as ContextMenuPrimitive from '@radix-ui/react-context-menu'
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'

import { cn } from '@/lib/utils'

function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />
}

function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  )
}

function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  )
}

function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  )
}

function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />
}

function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  )
}

function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  )
}

function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className,
      )}
      {...props}
    />
  )
}

function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',
          className,
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
}

function ContextMenuItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean
  variant?: 'default' | 'destructive'
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
}

function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
}

function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        'text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className,
      )}
      {...props}
    />
  )
}

function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  )
}

function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  )
}

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



================================================================================
# ARCHIVO: front-end/components/ui/dialog.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/dialog.tsx
================================================================================

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================================================
# ARCHIVO: front-end/components/ui/drawer.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/drawer.tsx
================================================================================

'use client'

import * as React from 'react'
import { Drawer as DrawerPrimitive } from 'vaul'

import { cn } from '@/lib/utils'

function Drawer({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) {
  return <DrawerPrimitive.Root data-slot="drawer" {...props} />
}

function DrawerTrigger({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {
  return <DrawerPrimitive.Trigger data-slot="drawer-trigger" {...props} />
}

function DrawerPortal({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {
  return <DrawerPrimitive.Portal data-slot="drawer-portal" {...props} />
}

function DrawerClose({
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Close>) {
  return <DrawerPrimitive.Close data-slot="drawer-close" {...props} />
}

function DrawerOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {
  return (
    <DrawerPrimitive.Overlay
      data-slot="drawer-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className,
      )}
      {...props}
    />
  )
}

function DrawerContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Content>) {
  return (
    <DrawerPortal data-slot="drawer-portal">
      <DrawerOverlay />
      <DrawerPrimitive.Content
        data-slot="drawer-content"
        className={cn(
          'group/drawer-content bg-background fixed z-50 flex h-auto flex-col',
          'data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b',
          'data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t',
          'data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm',
          'data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm',
          className,
        )}
        {...props}
      >
        <div className="bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
}

function DrawerHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="drawer-header"
      className={cn(
        'flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left',
        className,
      )}
      {...props}
    />
  )
}

function DrawerFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="drawer-footer"
      className={cn('mt-auto flex flex-col gap-2 p-4', className)}
      {...props}
    />
  )
}

function DrawerTitle({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Title>) {
  return (
    <DrawerPrimitive.Title
      data-slot="drawer-title"
      className={cn('text-foreground font-semibold', className)}
      {...props}
    />
  )
}

function DrawerDescription({
  className,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Description>) {
  return (
    <DrawerPrimitive.Description
      data-slot="drawer-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  )
}

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



================================================================================
# ARCHIVO: front-end/components/ui/dropdown-menu.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/dropdown-menu.tsx
================================================================================

'use client'

import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'

import { cn } from '@/lib/utils'

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',
          className,
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: 'default' | 'destructive'
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className,
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className,
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}



================================================================================
# ARCHIVO: front-end/components/ui/empty.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/empty.tsx
================================================================================

import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

function Empty({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty"
      className={cn(
        'flex min-w-0 flex-1 flex-col items-center justify-center gap-6 rounded-lg border-dashed p-6 text-center text-balance md:p-12',
        className,
      )}
      {...props}
    />
  )
}

function EmptyHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty-header"
      className={cn(
        'flex max-w-sm flex-col items-center gap-2 text-center',
        className,
      )}
      {...props}
    />
  )
}

const emptyMediaVariants = cva(
  'flex shrink-0 items-center justify-center mb-2 [&_svg]:pointer-events-none [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        icon: "bg-muted text-foreground flex size-10 shrink-0 items-center justify-center rounded-lg [&_svg:not([class*='size-'])]:size-6",
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

function EmptyMedia({
  className,
  variant = 'default',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof emptyMediaVariants>) {
  return (
    <div
      data-slot="empty-icon"
      data-variant={variant}
      className={cn(emptyMediaVariants({ variant, className }))}
      {...props}
    />
  )
}

function EmptyTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty-title"
      className={cn('text-lg font-medium tracking-tight', className)}
      {...props}
    />
  )
}

function EmptyDescription({ className, ...props }: React.ComponentProps<'p'>) {
  return (
    <div
      data-slot="empty-description"
      className={cn(
        'text-muted-foreground [&>a:hover]:text-primary text-sm/relaxed [&>a]:underline [&>a]:underline-offset-4',
        className,
      )}
      {...props}
    />
  )
}

function EmptyContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="empty-content"
      className={cn(
        'flex w-full max-w-sm min-w-0 flex-col items-center gap-4 text-sm text-balance',
        className,
      )}
      {...props}
    />
  )
}

export {
  Empty,
  EmptyHeader,
  EmptyTitle,
  EmptyDescription,
  EmptyContent,
  EmptyMedia,
}



================================================================================
# ARCHIVO: front-end/components/ui/field.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/field.tsx
================================================================================

'use client'

import { useMemo } from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'
import { Label } from '@/components/ui/label'
import { Separator } from '@/components/ui/separator'

function FieldSet({ className, ...props }: React.ComponentProps<'fieldset'>) {
  return (
    <fieldset
      data-slot="field-set"
      className={cn(
        'flex flex-col gap-6',
        'has-[>[data-slot=checkbox-group]]:gap-3 has-[>[data-slot=radio-group]]:gap-3',
        className,
      )}
      {...props}
    />
  )
}

function FieldLegend({
  className,
  variant = 'legend',
  ...props
}: React.ComponentProps<'legend'> & { variant?: 'legend' | 'label' }) {
  return (
    <legend
      data-slot="field-legend"
      data-variant={variant}
      className={cn(
        'mb-3 font-medium',
        'data-[variant=legend]:text-base',
        'data-[variant=label]:text-sm',
        className,
      )}
      {...props}
    />
  )
}

function FieldGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="field-group"
      className={cn(
        'group/field-group @container/field-group flex w-full flex-col gap-7 data-[slot=checkbox-group]:gap-3 [&>[data-slot=field-group]]:gap-4',
        className,
      )}
      {...props}
    />
  )
}

const fieldVariants = cva(
  'group/field flex w-full gap-3 data-[invalid=true]:text-destructive',
  {
    variants: {
      orientation: {
        vertical: ['flex-col [&>*]:w-full [&>.sr-only]:w-auto'],
        horizontal: [
          'flex-row items-center',
          '[&>[data-slot=field-label]]:flex-auto',
          'has-[>[data-slot=field-content]]:items-start has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px',
        ],
        responsive: [
          'flex-col [&>*]:w-full [&>.sr-only]:w-auto @md/field-group:flex-row @md/field-group:items-center @md/field-group:[&>*]:w-auto',
          '@md/field-group:[&>[data-slot=field-label]]:flex-auto',
          '@md/field-group:has-[>[data-slot=field-content]]:items-start @md/field-group:has-[>[data-slot=field-content]]:[&>[role=checkbox],[role=radio]]:mt-px',
        ],
      },
    },
    defaultVariants: {
      orientation: 'vertical',
    },
  },
)

function Field({
  className,
  orientation = 'vertical',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof fieldVariants>) {
  return (
    <div
      role="group"
      data-slot="field"
      data-orientation={orientation}
      className={cn(fieldVariants({ orientation }), className)}
      {...props}
    />
  )
}

function FieldContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="field-content"
      className={cn(
        'group/field-content flex flex-1 flex-col gap-1.5 leading-snug',
        className,
      )}
      {...props}
    />
  )
}

function FieldLabel({
  className,
  ...props
}: React.ComponentProps<typeof Label>) {
  return (
    <Label
      data-slot="field-label"
      className={cn(
        'group/field-label peer/field-label flex w-fit gap-2 leading-snug group-data-[disabled=true]/field:opacity-50',
        'has-[>[data-slot=field]]:w-full has-[>[data-slot=field]]:flex-col has-[>[data-slot=field]]:rounded-md has-[>[data-slot=field]]:border [&>*]:data-[slot=field]:p-4',
        'has-data-[state=checked]:bg-primary/5 has-data-[state=checked]:border-primary dark:has-data-[state=checked]:bg-primary/10',
        className,
      )}
      {...props}
    />
  )
}

function FieldTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="field-label"
      className={cn(
        'flex w-fit items-center gap-2 text-sm leading-snug font-medium group-data-[disabled=true]/field:opacity-50',
        className,
      )}
      {...props}
    />
  )
}

function FieldDescription({ className, ...props }: React.ComponentProps<'p'>) {
  return (
    <p
      data-slot="field-description"
      className={cn(
        'text-muted-foreground text-sm leading-normal font-normal group-has-[[data-orientation=horizontal]]/field:text-balance',
        'last:mt-0 nth-last-2:-mt-1 [[data-variant=legend]+&]:-mt-1.5',
        '[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4',
        className,
      )}
      {...props}
    />
  )
}

function FieldSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<'div'> & {
  children?: React.ReactNode
}) {
  return (
    <div
      data-slot="field-separator"
      data-content={!!children}
      className={cn(
        'relative -my-2 h-5 text-sm group-data-[variant=outline]/field-group:-mb-2',
        className,
      )}
      {...props}
    >
      <Separator className="absolute inset-0 top-1/2" />
      {children && (
        <span
          className="bg-background text-muted-foreground relative mx-auto block w-fit px-2"
          data-slot="field-separator-content"
        >
          {children}
        </span>
      )}
    </div>
  )
}

function FieldError({
  className,
  children,
  errors,
  ...props
}: React.ComponentProps<'div'> & {
  errors?: Array<{ message?: string } | undefined>
}) {
  const content = useMemo(() => {
    if (children) {
      return children
    }

    if (!errors) {
      return null
    }

    if (errors.length === 1 && errors[0]?.message) {
      return errors[0].message
    }

    return (
      <ul className="ml-4 flex list-disc flex-col gap-1">
        {errors.map(
          (error, index) =>
            error?.message && <li key={index}>{error.message}</li>,
        )}
      </ul>
    )
  }, [children, errors])

  if (!content) {
    return null
  }

  return (
    <div
      role="alert"
      data-slot="field-error"
      className={cn('text-destructive text-sm font-normal', className)}
      {...props}
    >
      {content}
    </div>
  )
}

export {
  Field,
  FieldLabel,
  FieldDescription,
  FieldError,
  FieldGroup,
  FieldLegend,
  FieldSeparator,
  FieldSet,
  FieldContent,
  FieldTitle,
}



================================================================================
# ARCHIVO: front-end/components/ui/form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/form.tsx
================================================================================

'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { Slot } from '@radix-ui/react-slot'
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from 'react-hook-form'

import { cn } from '@/lib/utils'
import { Label } from '@/components/ui/label'

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>')
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
)

function FormItem({ className, ...props }: React.ComponentProps<'div'>) {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn('grid gap-2', className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn('data-[error=true]:text-destructive', className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}

function FormDescription({ className, ...props }: React.ComponentProps<'p'>) {
  const { formDescriptionId } = useFormField()

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  )
}

function FormMessage({ className, ...props }: React.ComponentProps<'p'>) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? '') : props.children

  if (!body) {
    return null
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn('text-destructive text-sm', className)}
      {...props}
    >
      {body}
    </p>
  )
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



================================================================================
# ARCHIVO: front-end/components/ui/hover-card.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/hover-card.tsx
================================================================================

'use client'

import * as React from 'react'
import * as HoverCardPrimitive from '@radix-ui/react-hover-card'

import { cn } from '@/lib/utils'

function HoverCard({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {
  return <HoverCardPrimitive.Root data-slot="hover-card" {...props} />
}

function HoverCardTrigger({
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {
  return (
    <HoverCardPrimitive.Trigger data-slot="hover-card-trigger" {...props} />
  )
}

function HoverCardContent({
  className,
  align = 'center',
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {
  return (
    <HoverCardPrimitive.Portal data-slot="hover-card-portal">
      <HoverCardPrimitive.Content
        data-slot="hover-card-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',
          className,
        )}
        {...props}
      />
    </HoverCardPrimitive.Portal>
  )
}

export { HoverCard, HoverCardTrigger, HoverCardContent }



================================================================================
# ARCHIVO: front-end/components/ui/input-group.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/input-group.tsx
================================================================================

'use client'

import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'

function InputGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="input-group"
      role="group"
      className={cn(
        'group/input-group border-input dark:bg-input/30 relative flex w-full items-center rounded-md border shadow-xs transition-[color,box-shadow] outline-none',
        'h-9 has-[>textarea]:h-auto',

        // Variants based on alignment.
        'has-[>[data-align=inline-start]]:[&>input]:pl-2',
        'has-[>[data-align=inline-end]]:[&>input]:pr-2',
        'has-[>[data-align=block-start]]:h-auto has-[>[data-align=block-start]]:flex-col has-[>[data-align=block-start]]:[&>input]:pb-3',
        'has-[>[data-align=block-end]]:h-auto has-[>[data-align=block-end]]:flex-col has-[>[data-align=block-end]]:[&>input]:pt-3',

        // Focus state.
        'has-[[data-slot=input-group-control]:focus-visible]:border-ring has-[[data-slot=input-group-control]:focus-visible]:ring-ring/50 has-[[data-slot=input-group-control]:focus-visible]:ring-[3px]',

        // Error state.
        'has-[[data-slot][aria-invalid=true]]:ring-destructive/20 has-[[data-slot][aria-invalid=true]]:border-destructive dark:has-[[data-slot][aria-invalid=true]]:ring-destructive/40',

        className,
      )}
      {...props}
    />
  )
}

const inputGroupAddonVariants = cva(
  "text-muted-foreground flex h-auto cursor-text items-center justify-center gap-2 py-1.5 text-sm font-medium select-none [&>svg:not([class*='size-'])]:size-4 [&>kbd]:rounded-[calc(var(--radius)-5px)] group-data-[disabled=true]/input-group:opacity-50",
  {
    variants: {
      align: {
        'inline-start':
          'order-first pl-3 has-[>button]:ml-[-0.45rem] has-[>kbd]:ml-[-0.35rem]',
        'inline-end':
          'order-last pr-3 has-[>button]:mr-[-0.4rem] has-[>kbd]:mr-[-0.35rem]',
        'block-start':
          'order-first w-full justify-start px-3 pt-3 [.border-b]:pb-3 group-has-[>input]/input-group:pt-2.5',
        'block-end':
          'order-last w-full justify-start px-3 pb-3 [.border-t]:pt-3 group-has-[>input]/input-group:pb-2.5',
      },
    },
    defaultVariants: {
      align: 'inline-start',
    },
  },
)

function InputGroupAddon({
  className,
  align = 'inline-start',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof inputGroupAddonVariants>) {
  return (
    <div
      role="group"
      data-slot="input-group-addon"
      data-align={align}
      className={cn(inputGroupAddonVariants({ align }), className)}
      onClick={(e) => {
        if ((e.target as HTMLElement).closest('button')) {
          return
        }
        e.currentTarget.parentElement?.querySelector('input')?.focus()
      }}
      {...props}
    />
  )
}

const inputGroupButtonVariants = cva(
  'text-sm shadow-none flex gap-2 items-center',
  {
    variants: {
      size: {
        xs: "h-6 gap-1 px-2 rounded-[calc(var(--radius)-5px)] [&>svg:not([class*='size-'])]:size-3.5 has-[>svg]:px-2",
        sm: 'h-8 px-2.5 gap-1.5 rounded-md has-[>svg]:px-2.5',
        'icon-xs':
          'size-6 rounded-[calc(var(--radius)-5px)] p-0 has-[>svg]:p-0',
        'icon-sm': 'size-8 p-0 has-[>svg]:p-0',
      },
    },
    defaultVariants: {
      size: 'xs',
    },
  },
)

function InputGroupButton({
  className,
  type = 'button',
  variant = 'ghost',
  size = 'xs',
  ...props
}: Omit<React.ComponentProps<typeof Button>, 'size'> &
  VariantProps<typeof inputGroupButtonVariants>) {
  return (
    <Button
      type={type}
      data-size={size}
      variant={variant}
      className={cn(inputGroupButtonVariants({ size }), className)}
      {...props}
    />
  )
}

function InputGroupText({ className, ...props }: React.ComponentProps<'span'>) {
  return (
    <span
      className={cn(
        "text-muted-foreground flex items-center gap-2 text-sm [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function InputGroupInput({
  className,
  ...props
}: React.ComponentProps<'input'>) {
  return (
    <Input
      data-slot="input-group-control"
      className={cn(
        'flex-1 rounded-none border-0 bg-transparent shadow-none focus-visible:ring-0 dark:bg-transparent',
        className,
      )}
      {...props}
    />
  )
}

function InputGroupTextarea({
  className,
  ...props
}: React.ComponentProps<'textarea'>) {
  return (
    <Textarea
      data-slot="input-group-control"
      className={cn(
        'flex-1 resize-none rounded-none border-0 bg-transparent py-3 shadow-none focus-visible:ring-0 dark:bg-transparent',
        className,
      )}
      {...props}
    />
  )
}

export {
  InputGroup,
  InputGroupAddon,
  InputGroupButton,
  InputGroupText,
  InputGroupInput,
  InputGroupTextarea,
}



================================================================================
# ARCHIVO: front-end/components/ui/input-otp.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/input-otp.tsx
================================================================================

'use client'

import * as React from 'react'
import { OTPInput, OTPInputContext } from 'input-otp'
import { MinusIcon } from 'lucide-react'

import { cn } from '@/lib/utils'

function InputOTP({
  className,
  containerClassName,
  ...props
}: React.ComponentProps<typeof OTPInput> & {
  containerClassName?: string
}) {
  return (
    <OTPInput
      data-slot="input-otp"
      containerClassName={cn(
        'flex items-center gap-2 has-disabled:opacity-50',
        containerClassName,
      )}
      className={cn('disabled:cursor-not-allowed', className)}
      {...props}
    />
  )
}

function InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="input-otp-group"
      className={cn('flex items-center', className)}
      {...props}
    />
  )
}

function InputOTPSlot({
  index,
  className,
  ...props
}: React.ComponentProps<'div'> & {
  index: number
}) {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}

  return (
    <div
      data-slot="input-otp-slot"
      data-active={isActive}
      className={cn(
        'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink bg-foreground h-4 w-px duration-1000" />
        </div>
      )}
    </div>
  )
}

function InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {
  return (
    <div data-slot="input-otp-separator" role="separator" {...props}>
      <MinusIcon />
    </div>
  )
}

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



================================================================================
# ARCHIVO: front-end/components/ui/input.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/input.tsx
================================================================================

import * as React from 'react'

import { cn } from '@/lib/utils'

function Input({ className, type, ...props }: React.ComponentProps<'input'>) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',
        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',
        className,
      )}
      {...props}
    />
  )
}

export { Input }



================================================================================
# ARCHIVO: front-end/components/ui/item.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/item.tsx
================================================================================

import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'
import { Separator } from '@/components/ui/separator'

function ItemGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      role="list"
      data-slot="item-group"
      className={cn('group/item-group flex flex-col', className)}
      {...props}
    />
  )
}

function ItemSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="item-separator"
      orientation="horizontal"
      className={cn('my-0', className)}
      {...props}
    />
  )
}

const itemVariants = cva(
  'group/item flex items-center border border-transparent text-sm rounded-md transition-colors [a&]:hover:bg-accent/50 [a&]:transition-colors duration-100 flex-wrap outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline: 'border-border',
        muted: 'bg-muted/50',
      },
      size: {
        default: 'p-4 gap-4 ',
        sm: 'py-3 px-4 gap-2.5',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)

function Item({
  className,
  variant = 'default',
  size = 'default',
  asChild = false,
  ...props
}: React.ComponentProps<'div'> &
  VariantProps<typeof itemVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'div'
  return (
    <Comp
      data-slot="item"
      data-variant={variant}
      data-size={size}
      className={cn(itemVariants({ variant, size, className }))}
      {...props}
    />
  )
}

const itemMediaVariants = cva(
  'flex shrink-0 items-center justify-center gap-2 group-has-[[data-slot=item-description]]/item:self-start [&_svg]:pointer-events-none group-has-[[data-slot=item-description]]/item:translate-y-0.5',
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        icon: "size-8 border rounded-sm bg-muted [&_svg:not([class*='size-'])]:size-4",
        image:
          'size-10 rounded-sm overflow-hidden [&_img]:size-full [&_img]:object-cover',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

function ItemMedia({
  className,
  variant = 'default',
  ...props
}: React.ComponentProps<'div'> & VariantProps<typeof itemMediaVariants>) {
  return (
    <div
      data-slot="item-media"
      data-variant={variant}
      className={cn(itemMediaVariants({ variant, className }))}
      {...props}
    />
  )
}

function ItemContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-content"
      className={cn(
        'flex flex-1 flex-col gap-1 [&+[data-slot=item-content]]:flex-none',
        className,
      )}
      {...props}
    />
  )
}

function ItemTitle({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-title"
      className={cn(
        'flex w-fit items-center gap-2 text-sm leading-snug font-medium',
        className,
      )}
      {...props}
    />
  )
}

function ItemDescription({ className, ...props }: React.ComponentProps<'p'>) {
  return (
    <p
      data-slot="item-description"
      className={cn(
        'text-muted-foreground line-clamp-2 text-sm leading-normal font-normal text-balance',
        '[&>a:hover]:text-primary [&>a]:underline [&>a]:underline-offset-4',
        className,
      )}
      {...props}
    />
  )
}

function ItemActions({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-actions"
      className={cn('flex items-center gap-2', className)}
      {...props}
    />
  )
}

function ItemHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-header"
      className={cn(
        'flex basis-full items-center justify-between gap-2',
        className,
      )}
      {...props}
    />
  )
}

function ItemFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="item-footer"
      className={cn(
        'flex basis-full items-center justify-between gap-2',
        className,
      )}
      {...props}
    />
  )
}

export {
  Item,
  ItemMedia,
  ItemContent,
  ItemActions,
  ItemGroup,
  ItemSeparator,
  ItemTitle,
  ItemDescription,
  ItemHeader,
  ItemFooter,
}



================================================================================
# ARCHIVO: front-end/components/ui/kbd.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/kbd.tsx
================================================================================

import { cn } from '@/lib/utils'

function Kbd({ className, ...props }: React.ComponentProps<'kbd'>) {
  return (
    <kbd
      data-slot="kbd"
      className={cn(
        'bg-muted w-fit text-muted-foreground pointer-events-none inline-flex h-5 min-w-5 items-center justify-center gap-1 rounded-sm px-1 font-sans text-xs font-medium select-none',
        "[&_svg:not([class*='size-'])]:size-3",
        '[[data-slot=tooltip-content]_&]:bg-background/20 [[data-slot=tooltip-content]_&]:text-background dark:[[data-slot=tooltip-content]_&]:bg-background/10',
        className,
      )}
      {...props}
    />
  )
}

function KbdGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <kbd
      data-slot="kbd-group"
      className={cn('inline-flex items-center gap-1', className)}
      {...props}
    />
  )
}

export { Kbd, KbdGroup }



================================================================================
# ARCHIVO: front-end/components/ui/label.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/label.tsx
================================================================================

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70")

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================================================
# ARCHIVO: front-end/components/ui/menubar.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/menubar.tsx
================================================================================

'use client'

import * as React from 'react'
import * as MenubarPrimitive from '@radix-ui/react-menubar'
import { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'

import { cn } from '@/lib/utils'

function Menubar({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Root>) {
  return (
    <MenubarPrimitive.Root
      data-slot="menubar"
      className={cn(
        'bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs',
        className,
      )}
      {...props}
    />
  )
}

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu data-slot="menubar-menu" {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group data-slot="menubar-group" {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal data-slot="menubar-portal" {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return (
    <MenubarPrimitive.RadioGroup data-slot="menubar-radio-group" {...props} />
  )
}

function MenubarTrigger({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {
  return (
    <MenubarPrimitive.Trigger
      data-slot="menubar-trigger"
      className={cn(
        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none',
        className,
      )}
      {...props}
    />
  )
}

function MenubarContent({
  className,
  align = 'start',
  alignOffset = -4,
  sideOffset = 8,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Content>) {
  return (
    <MenubarPortal>
      <MenubarPrimitive.Content
        data-slot="menubar-content"
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md',
          className,
        )}
        {...props}
      />
    </MenubarPortal>
  )
}

function MenubarItem({
  className,
  inset,
  variant = 'default',
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Item> & {
  inset?: boolean
  variant?: 'default' | 'destructive'
}) {
  return (
    <MenubarPrimitive.Item
      data-slot="menubar-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function MenubarCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {
  return (
    <MenubarPrimitive.CheckboxItem
      data-slot="menubar-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  )
}

function MenubarRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {
  return (
    <MenubarPrimitive.RadioItem
      data-slot="menubar-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  )
}

function MenubarLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.Label
      data-slot="menubar-label"
      data-inset={inset}
      className={cn(
        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',
        className,
      )}
      {...props}
    />
  )
}

function MenubarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {
  return (
    <MenubarPrimitive.Separator
      data-slot="menubar-separator"
      className={cn('bg-border -mx-1 my-1 h-px', className)}
      {...props}
    />
  )
}

function MenubarShortcut({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      data-slot="menubar-shortcut"
      className={cn(
        'text-muted-foreground ml-auto text-xs tracking-widest',
        className,
      )}
      {...props}
    />
  )
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

function MenubarSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <MenubarPrimitive.SubTrigger
      data-slot="menubar-sub-trigger"
      data-inset={inset}
      className={cn(
        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8',
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  )
}

function MenubarSubContent({
  className,
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {
  return (
    <MenubarPrimitive.SubContent
      data-slot="menubar-sub-content"
      className={cn(
        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',
        className,
      )}
      {...props}
    />
  )
}

export {
  Menubar,
  MenubarPortal,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarGroup,
  MenubarSeparator,
  MenubarLabel,
  MenubarItem,
  MenubarShortcut,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarSub,
  MenubarSubTrigger,
  MenubarSubContent,
}



================================================================================
# ARCHIVO: front-end/components/ui/navigation-menu.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/navigation-menu.tsx
================================================================================

import * as React from 'react'
import * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'
import { cva } from 'class-variance-authority'
import { ChevronDownIcon } from 'lucide-react'

import { cn } from '@/lib/utils'

function NavigationMenu({
  className,
  children,
  viewport = true,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {
  viewport?: boolean
}) {
  return (
    <NavigationMenuPrimitive.Root
      data-slot="navigation-menu"
      data-viewport={viewport}
      className={cn(
        'group/navigation-menu relative flex max-w-max flex-1 items-center justify-center',
        className,
      )}
      {...props}
    >
      {children}
      {viewport && <NavigationMenuViewport />}
    </NavigationMenuPrimitive.Root>
  )
}

function NavigationMenuList({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {
  return (
    <NavigationMenuPrimitive.List
      data-slot="navigation-menu-list"
      className={cn(
        'group flex flex-1 list-none items-center justify-center gap-1',
        className,
      )}
      {...props}
    />
  )
}

function NavigationMenuItem({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {
  return (
    <NavigationMenuPrimitive.Item
      data-slot="navigation-menu-item"
      className={cn('relative', className)}
      {...props}
    />
  )
}

const navigationMenuTriggerStyle = cva(
  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1',
)

function NavigationMenuTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {
  return (
    <NavigationMenuPrimitive.Trigger
      data-slot="navigation-menu-trigger"
      className={cn(navigationMenuTriggerStyle(), 'group', className)}
      {...props}
    >
      {children}{' '}
      <ChevronDownIcon
        className="relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  )
}

function NavigationMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {
  return (
    <NavigationMenuPrimitive.Content
      data-slot="navigation-menu-content"
      className={cn(
        'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto',
        'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none',
        className,
      )}
      {...props}
    />
  )
}

function NavigationMenuViewport({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {
  return (
    <div
      className={'absolute top-full left-0 isolate z-50 flex justify-center'}
    >
      <NavigationMenuPrimitive.Viewport
        data-slot="navigation-menu-viewport"
        className={cn(
          'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]',
          className,
        )}
        {...props}
      />
    </div>
  )
}

function NavigationMenuLink({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {
  return (
    <NavigationMenuPrimitive.Link
      data-slot="navigation-menu-link"
      className={cn(
        "data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function NavigationMenuIndicator({
  className,
  ...props
}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {
  return (
    <NavigationMenuPrimitive.Indicator
      data-slot="navigation-menu-indicator"
      className={cn(
        'data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',
        className,
      )}
      {...props}
    >
      <div className="bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  )
}

export {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
  navigationMenuTriggerStyle,
}



================================================================================
# ARCHIVO: front-end/components/ui/pagination.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/pagination.tsx
================================================================================

import * as React from 'react'
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from 'lucide-react'

import { cn } from '@/lib/utils'
import { Button, buttonVariants } from '@/components/ui/button'

function Pagination({ className, ...props }: React.ComponentProps<'nav'>) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn('mx-auto flex w-full justify-center', className)}
      {...props}
    />
  )
}

function PaginationContent({
  className,
  ...props
}: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn('flex flex-row items-center gap-1', className)}
      {...props}
    />
  )
}

function PaginationItem({ ...props }: React.ComponentProps<'li'>) {
  return <li data-slot="pagination-item" {...props} />
}

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, 'size'> &
  React.ComponentProps<'a'>

function PaginationLink({
  className,
  isActive,
  size = 'icon',
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? 'page' : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? 'outline' : 'ghost',
          size,
        }),
        className,
      )}
      {...props}
    />
  )
}

function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn('gap-1 px-2.5 sm:pl-2.5', className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}

function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn('gap-1 px-2.5 sm:pr-2.5', className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}

function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<'span'>) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn('flex size-9 items-center justify-center', className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}



================================================================================
# ARCHIVO: front-end/components/ui/popover.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/popover.tsx
================================================================================

'use client'

import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'

import { cn } from '@/lib/utils'

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />
}

function PopoverContent({
  className,
  align = 'center',
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',
          className,
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  )
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }



================================================================================
# ARCHIVO: front-end/components/ui/progress.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/progress.tsx
================================================================================

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-2 w-full overflow-hidden rounded-full bg-primary/20", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



================================================================================
# ARCHIVO: front-end/components/ui/radio-group.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/radio-group.tsx
================================================================================

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return <RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================================================
# ARCHIVO: front-end/components/ui/resizable.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/resizable.tsx
================================================================================

'use client'

import * as React from 'react'
import { GripVerticalIcon } from 'lucide-react'
import * as ResizablePrimitive from 'react-resizable-panels'

import { cn } from '@/lib/utils'

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',
        className,
      )}
      {...props}
    />
  )
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        'bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90',
        className,
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



================================================================================
# ARCHIVO: front-end/components/ui/scroll-area.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/scroll-area.tsx
================================================================================

'use client'

import * as React from 'react'
import * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'

import { cn } from '@/lib/utils'

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn('relative', className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = 'vertical',
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        'flex touch-none p-px transition-colors select-none',
        orientation === 'vertical' &&
          'h-full w-2.5 border-l border-l-transparent',
        orientation === 'horizontal' &&
          'h-2.5 flex-col border-t border-t-transparent',
        className,
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }



================================================================================
# ARCHIVO: front-end/components/ui/select.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/select.tsx
================================================================================

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label ref={ref} className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)} {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================================================
# ARCHIVO: front-end/components/ui/separator.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/separator.tsx
================================================================================

'use client'

import * as React from 'react'
import * as SeparatorPrimitive from '@radix-ui/react-separator'

import { cn } from '@/lib/utils'

function Separator({
  className,
  orientation = 'horizontal',
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',
        className,
      )}
      {...props}
    />
  )
}

export { Separator }



================================================================================
# ARCHIVO: front-end/components/ui/sheet.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/sheet.tsx
================================================================================

'use client'

import * as React from 'react'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { XIcon } from 'lucide-react'

import { cn } from '@/lib/utils'

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}

function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
        className,
      )}
      {...props}
    />
  )
}

function SheetContent({
  className,
  children,
  side = 'right',
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: 'top' | 'right' | 'bottom' | 'left'
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
          side === 'right' &&
            'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',
          side === 'left' &&
            'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',
          side === 'top' &&
            'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',
          side === 'bottom' &&
            'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',
          className,
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}

function SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sheet-header"
      className={cn('flex flex-col gap-1.5 p-4', className)}
      {...props}
    />
  )
}

function SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn('mt-auto flex flex-col gap-2 p-4', className)}
      {...props}
    />
  )
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn('text-foreground font-semibold', className)}
      {...props}
    />
  )
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn('text-muted-foreground text-sm', className)}
      {...props}
    />
  )
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



================================================================================
# ARCHIVO: front-end/components/ui/sidebar.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/sidebar.tsx
================================================================================

'use client'

import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, VariantProps } from 'class-variance-authority'
import { PanelLeftIcon } from 'lucide-react'

import { useIsMobile } from '@/hooks/use-mobile'
import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Separator } from '@/components/ui/separator'
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from '@/components/ui/sheet'
import { Skeleton } from '@/components/ui/skeleton'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip'

const SIDEBAR_COOKIE_NAME = 'sidebar_state'
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = '16rem'
const SIDEBAR_WIDTH_MOBILE = '18rem'
const SIDEBAR_WIDTH_ICON = '3rem'
const SIDEBAR_KEYBOARD_SHORTCUT = 'b'

type SidebarContextProps = {
  state: 'expanded' | 'collapsed'
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error('useSidebar must be used within a SidebarProvider.')
  }

  return context
}

function SidebarProvider({
  defaultOpen = true,
  open: openProp,
  onOpenChange: setOpenProp,
  className,
  style,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  defaultOpen?: boolean
  open?: boolean
  onOpenChange?: (open: boolean) => void
}) {
  const isMobile = useIsMobile()
  const [openMobile, setOpenMobile] = React.useState(false)

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen)
  const open = openProp ?? _open
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === 'function' ? value(open) : value
      if (setOpenProp) {
        setOpenProp(openState)
      } else {
        _setOpen(openState)
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
    },
    [setOpenProp, open],
  )

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)
  }, [isMobile, setOpen, setOpenMobile])

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (
        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
        (event.metaKey || event.ctrlKey)
      ) {
        event.preventDefault()
        toggleSidebar()
      }
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [toggleSidebar])

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? 'expanded' : 'collapsed'

  const contextValue = React.useMemo<SidebarContextProps>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  )

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          data-slot="sidebar-wrapper"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH,
              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn(
            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',
            className,
          )}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  )
}

function Sidebar({
  side = 'left',
  variant = 'sidebar',
  collapsible = 'offcanvas',
  className,
  children,
  ...props
}: React.ComponentProps<'div'> & {
  side?: 'left' | 'right'
  variant?: 'sidebar' | 'floating' | 'inset'
  collapsible?: 'offcanvas' | 'icon' | 'none'
}) {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

  if (collapsible === 'none') {
    return (
      <div
        data-slot="sidebar"
        className={cn(
          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',
          className,
        )}
        {...props}
      >
        {children}
      </div>
    )
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-slot="sidebar"
          data-mobile="true"
          className="bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden"
          style={
            {
              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <SheetHeader className="sr-only">
            <SheetTitle>Sidebar</SheetTitle>
            <SheetDescription>Displays the mobile sidebar.</SheetDescription>
          </SheetHeader>
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    )
  }

  return (
    <div
      className="group peer text-sidebar-foreground hidden md:block"
      data-state={state}
      data-collapsible={state === 'collapsed' ? collapsible : ''}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        data-slot="sidebar-gap"
        className={cn(
          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',
          'group-data-[collapsible=offcanvas]:w-0',
          'group-data-[side=right]:rotate-180',
          variant === 'floating' || variant === 'inset'
            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)',
        )}
      />
      <div
        data-slot="sidebar-container"
        className={cn(
          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',
          side === 'left'
            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
          // Adjust the padding for floating and inset variants.
          variant === 'floating' || variant === 'inset'
            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'
            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          className="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          {children}
        </div>
      </div>
    </div>
  )
}

function SidebarTrigger({
  className,
  onClick,
  ...props
}: React.ComponentProps<typeof Button>) {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      data-sidebar="trigger"
      data-slot="sidebar-trigger"
      variant="ghost"
      size="icon"
      className={cn('size-7', className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeftIcon />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
}

function SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      data-sidebar="rail"
      data-slot="sidebar-rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',
        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',
        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
        className,
      )}
      {...props}
    />
  )
}

function SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {
  return (
    <main
      data-slot="sidebar-inset"
      className={cn(
        'bg-background relative flex w-full flex-1 flex-col',
        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',
        className,
      )}
      {...props}
    />
  )
}

function SidebarInput({
  className,
  ...props
}: React.ComponentProps<typeof Input>) {
  return (
    <Input
      data-slot="sidebar-input"
      data-sidebar="input"
      className={cn('bg-background h-8 w-full shadow-none', className)}
      {...props}
    />
  )
}

function SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-header"
      data-sidebar="header"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  )
}

function SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-footer"
      data-sidebar="footer"
      className={cn('flex flex-col gap-2 p-2', className)}
      {...props}
    />
  )
}

function SidebarSeparator({
  className,
  ...props
}: React.ComponentProps<typeof Separator>) {
  return (
    <Separator
      data-slot="sidebar-separator"
      data-sidebar="separator"
      className={cn('bg-sidebar-border mx-2 w-auto', className)}
      {...props}
    />
  )
}

function SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-content"
      data-sidebar="content"
      className={cn(
        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
        className,
      )}
      {...props}
    />
  )
}

function SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group"
      data-sidebar="group"
      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}
      {...props}
    />
  )
}

function SidebarGroupLabel({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'div'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'div'

  return (
    <Comp
      data-slot="sidebar-group-label"
      data-sidebar="group-label"
      className={cn(
        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
        className,
      )}
      {...props}
    />
  )
}

function SidebarGroupAction({
  className,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'button'

  return (
    <Comp
      data-slot="sidebar-group-action"
      data-sidebar="group-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  )
}

function SidebarGroupContent({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-group-content"
      data-sidebar="group-content"
      className={cn('w-full text-sm', className)}
      {...props}
    />
  )
}

function SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu"
      data-sidebar="menu"
      className={cn('flex w-full min-w-0 flex-col gap-1', className)}
      {...props}
    />
  )
}

function SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-item"
      data-sidebar="menu-item"
      className={cn('group/menu-item relative', className)}
      {...props}
    />
  )
}

const sidebarMenuButtonVariants = cva(
  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
        outline:
          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
      },
      size: {
        default: 'h-8 text-sm',
        sm: 'h-7 text-xs',
        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)

function SidebarMenuButton({
  asChild = false,
  isActive = false,
  variant = 'default',
  size = 'default',
  tooltip,
  className,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean
  isActive?: boolean
  tooltip?: string | React.ComponentProps<typeof TooltipContent>
} & VariantProps<typeof sidebarMenuButtonVariants>) {
  const Comp = asChild ? Slot : 'button'
  const { isMobile, state } = useSidebar()

  const button = (
    <Comp
      data-slot="sidebar-menu-button"
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  )

  if (!tooltip) {
    return button
  }

  if (typeof tooltip === 'string') {
    tooltip = {
      children: tooltip,
    }
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent
        side="right"
        align="center"
        hidden={state !== 'collapsed' || isMobile}
        {...tooltip}
      />
    </Tooltip>
  )
}

function SidebarMenuAction({
  className,
  asChild = false,
  showOnHover = false,
  ...props
}: React.ComponentProps<'button'> & {
  asChild?: boolean
  showOnHover?: boolean
}) {
  const Comp = asChild ? Slot : 'button'

  return (
    <Comp
      data-slot="sidebar-menu-action"
      data-sidebar="menu-action"
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
        // Increases the hit area of the button on mobile.
        'after:absolute after:-inset-2 md:after:hidden',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        showOnHover &&
          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',
        className,
      )}
      {...props}
    />
  )
}

function SidebarMenuBadge({
  className,
  ...props
}: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="sidebar-menu-badge"
      data-sidebar="menu-badge"
      className={cn(
        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',
        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
        'peer-data-[size=sm]/menu-button:top-1',
        'peer-data-[size=default]/menu-button:top-1.5',
        'peer-data-[size=lg]/menu-button:top-2.5',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  )
}

function SidebarMenuSkeleton({
  className,
  showIcon = false,
  ...props
}: React.ComponentProps<'div'> & {
  showIcon?: boolean
}) {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      data-slot="sidebar-menu-skeleton"
      data-sidebar="menu-skeleton"
      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 max-w-(--skeleton-width) flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            '--skeleton-width': width,
          } as React.CSSProperties
        }
      />
    </div>
  )
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {
  return (
    <ul
      data-slot="sidebar-menu-sub"
      data-sidebar="menu-sub"
      className={cn(
        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  )
}

function SidebarMenuSubItem({
  className,
  ...props
}: React.ComponentProps<'li'>) {
  return (
    <li
      data-slot="sidebar-menu-sub-item"
      data-sidebar="menu-sub-item"
      className={cn('group/menu-sub-item relative', className)}
      {...props}
    />
  )
}

function SidebarMenuSubButton({
  asChild = false,
  size = 'md',
  isActive = false,
  className,
  ...props
}: React.ComponentProps<'a'> & {
  asChild?: boolean
  size?: 'sm' | 'md'
  isActive?: boolean
}) {
  const Comp = asChild ? Slot : 'a'

  return (
    <Comp
      data-slot="sidebar-menu-sub-button"
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
        size === 'sm' && 'text-xs',
        size === 'md' && 'text-sm',
        'group-data-[collapsible=icon]:hidden',
        className,
      )}
      {...props}
    />
  )
}

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



================================================================================
# ARCHIVO: front-end/components/ui/skeleton.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/skeleton.tsx
================================================================================

import { cn } from '@/lib/utils'

function Skeleton({ className, ...props }: React.ComponentProps<'div'>) {
  return (
    <div
      data-slot="skeleton"
      className={cn('bg-accent animate-pulse rounded-md', className)}
      {...props}
    />
  )
}

export { Skeleton }



================================================================================
# ARCHIVO: front-end/components/ui/slider.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/slider.tsx
================================================================================

'use client'

import * as React from 'react'
import * as SliderPrimitive from '@radix-ui/react-slider'

import { cn } from '@/lib/utils'

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max],
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',
        className,
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={
          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5'
        }
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={
            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full'
          }
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary ring-ring/50 block size-4 shrink-0 rounded-full border bg-white shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }



================================================================================
# ARCHIVO: front-end/components/ui/sonner.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/sonner.tsx
================================================================================

'use client'

import { useTheme } from 'next-themes'
import { Toaster as Sonner, ToasterProps } from 'sonner'

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = 'system' } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps['theme']}
      className="toaster group"
      style={
        {
          '--normal-bg': 'var(--popover)',
          '--normal-text': 'var(--popover-foreground)',
          '--normal-border': 'var(--border)',
        } as React.CSSProperties
      }
      {...props}
    />
  )
}

export { Toaster }



================================================================================
# ARCHIVO: front-end/components/ui/spinner.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/spinner.tsx
================================================================================

import { Loader2Icon } from 'lucide-react'

import { cn } from '@/lib/utils'

function Spinner({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <Loader2Icon
      role="status"
      aria-label="Loading"
      className={cn('size-4 animate-spin', className)}
      {...props}
    />
  )
}

export { Spinner }



================================================================================
# ARCHIVO: front-end/components/ui/switch.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/switch.tsx
================================================================================

'use client'

import * as React from 'react'
import * as SwitchPrimitive from '@radix-ui/react-switch'

import { cn } from '@/lib/utils'

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className,
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={
          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'
        }
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }



================================================================================
# ARCHIVO: front-end/components/ui/table.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/table.tsx
================================================================================

'use client'

import * as React from 'react'

import { cn } from '@/lib/utils'

function Table({ className, ...props }: React.ComponentProps<'table'>) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn('w-full caption-bottom text-sm', className)}
        {...props}
      />
    </div>
  )
}

function TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {
  return (
    <thead
      data-slot="table-header"
      className={cn('[&_tr]:border-b', className)}
      {...props}
    />
  )
}

function TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {
  return (
    <tbody
      data-slot="table-body"
      className={cn('[&_tr:last-child]:border-0', className)}
      {...props}
    />
  )
}

function TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',
        className,
      )}
      {...props}
    />
  )
}

function TableRow({ className, ...props }: React.ComponentProps<'tr'>) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',
        className,
      )}
      {...props}
    />
  )
}

function TableHead({ className, ...props }: React.ComponentProps<'th'>) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className,
      )}
      {...props}
    />
  )
}

function TableCell({ className, ...props }: React.ComponentProps<'td'>) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',
        className,
      )}
      {...props}
    />
  )
}

function TableCaption({
  className,
  ...props
}: React.ComponentProps<'caption'>) {
  return (
    <caption
      data-slot="table-caption"
      className={cn('text-muted-foreground mt-4 text-sm', className)}
      {...props}
    />
  )
}

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================================================
# ARCHIVO: front-end/components/ui/tabs.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/tabs.tsx
================================================================================

'use client'

import * as React from 'react'
import * as TabsPrimitive from '@radix-ui/react-tabs'

import { cn } from '@/lib/utils'

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn('flex flex-col gap-2', className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',
        className,
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn('flex-1 outline-none', className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================================================
# ARCHIVO: front-end/components/ui/textarea.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/textarea.tsx
================================================================================

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<"textarea">>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    )
  },
)
Textarea.displayName = "Textarea"

export { Textarea }



================================================================================
# ARCHIVO: front-end/components/ui/toast.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/toast.tsx
================================================================================

'use client'

import * as React from 'react'
import * as ToastPrimitives from '@radix-ui/react-toast'
import { cva, type VariantProps } from 'class-variance-authority'
import { X } from 'lucide-react'

import { cn } from '@/lib/utils'

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className,
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
  {
    variants: {
      variant: {
        default: 'border bg-background text-foreground',
        destructive:
          'destructive group border-destructive bg-destructive text-destructive-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
      className,
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================================================
# ARCHIVO: front-end/components/ui/toaster.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/toaster.tsx
================================================================================

'use client'

import { useToast } from '@/hooks/use-toast'
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast'

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



================================================================================
# ARCHIVO: front-end/components/ui/toggle-group.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/toggle-group.tsx
================================================================================

'use client'

import * as React from 'react'
import * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'
import { type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'
import { toggleVariants } from '@/components/ui/toggle'

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: 'default',
  variant: 'default',
})

function ToggleGroup({
  className,
  variant,
  size,
  children,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <ToggleGroupPrimitive.Root
      data-slot="toggle-group"
      data-variant={variant}
      data-size={size}
      className={cn(
        'group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs',
        className,
      )}
      {...props}
    >
      <ToggleGroupContext.Provider value={{ variant, size }}>
        {children}
      </ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
}

function ToggleGroupItem({
  className,
  children,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &
  VariantProps<typeof toggleVariants>) {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      data-slot="toggle-group-item"
      data-variant={context.variant || variant}
      data-size={context.size || size}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l',
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
}

export { ToggleGroup, ToggleGroupItem }



================================================================================
# ARCHIVO: front-end/components/ui/toggle.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/toggle.tsx
================================================================================

'use client'

import * as React from 'react'
import * as TogglePrimitive from '@radix-ui/react-toggle'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap",
  {
    variants: {
      variant: {
        default: 'bg-transparent',
        outline:
          'border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-9 px-2 min-w-9',
        sm: 'h-8 px-1.5 min-w-8',
        lg: 'h-10 px-2.5 min-w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)

function Toggle({
  className,
  variant,
  size,
  ...props
}: React.ComponentProps<typeof TogglePrimitive.Root> &
  VariantProps<typeof toggleVariants>) {
  return (
    <TogglePrimitive.Root
      data-slot="toggle"
      className={cn(toggleVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Toggle, toggleVariants }



================================================================================
# ARCHIVO: front-end/components/ui/tooltip.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/tooltip.tsx
================================================================================

'use client'

import * as React from 'react'
import * as TooltipPrimitive from '@radix-ui/react-tooltip'

import { cn } from '@/lib/utils'

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          'bg-foreground text-background animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',
          className,
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-foreground fill-foreground z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



================================================================================
# ARCHIVO: front-end/components/ui/use-mobile.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/use-mobile.tsx
================================================================================

import * as React from 'react'

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener('change', onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener('change', onChange)
  }, [])

  return !!isMobile
}



================================================================================
# ARCHIVO: front-end/components/ui/use-toast.ts
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/ui/use-toast.ts
================================================================================

'use client'

// Inspired by react-hot-toast library
import * as React from 'react'

import type { ToastActionElement, ToastProps } from '@/components/ui/toast'

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType['ADD_TOAST']
      toast: ToasterToast
    }
  | {
      type: ActionType['UPDATE_TOAST']
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType['DISMISS_TOAST']
      toastId?: ToasterToast['id']
    }
  | {
      type: ActionType['REMOVE_TOAST']
      toastId?: ToasterToast['id']
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      }

    case 'DISMISS_TOAST': {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      }
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, 'id'>

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  }
}

export { useToast, toast }



================================================================================
# ARCHIVO: front-end/docs/ARQUITECTURA_PROYECTO.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/ARQUITECTURA_PROYECTO.md
================================================================================

# 📐 Arquitectura del Proyecto SpeakLexi

## 📋 Tabla de Contenidos
1. [Visión General](#visión-general)
2. [Estructura del Proyecto](#estructura-del-proyecto)
3. [Módulos del Sistema](#módulos-del-sistema)
4. [Flujo de Datos](#flujo-de-datos)
5. [Componentes Principales](#componentes-principales)
6. [Rutas y Navegación](#rutas-y-navegación)
7. [Esquema de Base de Datos](#esquema-de-base-de-datos)
8. [APIs Necesarias para Backend](#apis-necesarias-para-backend)
9. [Autenticación y Autorización](#autenticación-y-autorización)
10. [Integración Frontend-Backend](#integración-frontend-backend)

---

## 🎯 Visión General

SpeakLexi es una plataforma de aprendizaje de idiomas gamificada tipo Duolingo, construida con Next.js 15 (App Router), React 19, TypeScript, y Tailwind CSS v4. La arquitectura está diseñada para ser modular, escalable y fácil de integrar con un backend Flask.

### Tecnologías Frontend
- **Framework**: Next.js 15 (App Router)
- **UI Library**: React 19
- **Lenguaje**: TypeScript
- **Estilos**: Tailwind CSS v4
- **Componentes UI**: shadcn/ui
- **Gestión de Estado**: React Hooks + localStorage (temporal)
- **Futuro Backend**: Flask + PostgreSQL/Supabase

---

## 📁 Estructura del Proyecto

\`\`\`
speaklexi/
├── app/                          # Rutas de Next.js (App Router)
│   ├── page.tsx                  # Landing page
│   ├── layout.tsx                # Layout principal con fuentes
│   ├── globals.css               # Estilos globales y tokens de diseño
│   │
│   ├── login/                    # Módulo de Autenticación
│   │   └── page.tsx
│   ├── registro/
│   │   └── page.tsx
│   ├── verificar-email/
│   │   └── page.tsx
│   ├── recuperar-contrasena/
│   │   └── page.tsx
│   ├── asignar-nivel/
│   │   └── page.tsx
│   ├── correo-enviado/
│   │   └── page.tsx
│   │
│   ├── dashboard/                # Módulo Alumno
│   │   └── page.tsx              # Dashboard principal del estudiante
│   ├── lecciones/
│   │   ├── page.tsx              # Lista de lecciones
│   │   └── [id]/
│   │       └── page.tsx          # Visor de lección individual
│   ├── logros/
│   │   └── page.tsx              # Logros y recompensas
│   ├── clasificacion/
│   │   └── page.tsx              # Tabla de clasificación
│   ├── progreso/
│   │   └── page.tsx              # Progreso detallado del alumno
│   ├── perfil/
│   │   └── page.tsx              # Perfil del usuario
│   ├── cambiar-curso/
│   │   └── page.tsx              # Cambiar curso actual
│   ├── eliminar-cuenta/
│   │   └── page.tsx              # Eliminar cuenta (3 pasos)
│   │
│   ├── profesor/                 # Módulo Profesor
│   │   ├── dashboard/
│   │   │   └── page.tsx          # Dashboard del profesor
│   │   ├── estadisticas/
│   │   │   ├── page.tsx          # Estadísticas generales
│   │   │   └── [id]/
│   │   │       └── page.tsx      # Detalle de alumno individual
│   │   ├── retroalimentacion/
│   │   │   └── page.tsx          # Gestión de retroalimentación
│   │   └── planificacion/
│   │       ├── page.tsx          # Lista de planificaciones
│   │       └── nuevo/
│   │           └── page.tsx      # Crear nueva planificación (3 pasos)
│   │
│   ├── admin/                    # Módulo Administrador
│   │   ├── dashboard/
│   │   │   └── page.tsx          # Dashboard del admin
│   │   ├── lecciones/
│   │   │   ├── page.tsx          # Gestión de lecciones
│   │   │   ├── crear/
│   │   │   │   └── page.tsx      # Crear nueva lección
│   │   │   └── [id]/
│   │   │       └── editar/
│   │   │           └── page.tsx  # Editar lección existente
│   │   ├── multimedia/
│   │   │   └── page.tsx          # Biblioteca multimedia
│   │   └── usuarios/
│   │       ├── page.tsx          # Gestión de usuarios
│   │       └── [id]/
│   │           └── editar/
│   │               └── page.tsx  # Editar usuario
│   │
│   └── mantenimiento/            # Módulo Mantenimiento
│       ├── dashboard/
│       │   └── page.tsx          # Dashboard de mantenimiento
│       ├── reportes/
│       │   ├── page.tsx          # Lista de reportes de bugs
│       │   └── [id]/
│       │       └── page.tsx      # Detalle de reporte
│       └── tareas/
│           ├── page.tsx          # Lista de tareas programadas
│           └── nueva/
│               └── page.tsx      # Crear nueva tarea
│
├── components/                   # Componentes reutilizables
│   ├── ui/                       # Componentes base de shadcn/ui
│   │   ├── button.tsx
│   │   ├── card.tsx
│   │   ├── input.tsx
│   │   ├── dialog.tsx
│   │   ├── dropdown-menu.tsx
│   │   ├── progress.tsx
│   │   ├── avatar.tsx
│   │   ├── badge.tsx
│   │   ├── breadcrumb.tsx
│   │   ├── checkbox.tsx
│   │   ├── label.tsx
│   │   ├── radio-group.tsx
│   │   ├── select.tsx
│   │   ├── textarea.tsx
│   │   └── ...
│   │
│   ├── auth/                     # Componentes de autenticación
│   │   ├── login-form.tsx
│   │   ├── register-form.tsx
│   │   ├── level-assignment-flow.tsx
│   │   └── password-recovery-form.tsx
│   │
│   ├── dashboard/                # Componentes del dashboard alumno
│   │   ├── dashboard-header.tsx  # Header con navegación por rol
│   │   ├── progress-overview.tsx
│   │   ├── streak-card.tsx
│   │   ├── quick-actions.tsx
│   │   └── recent-lessons.tsx
│   │
│   ├── lessons/                  # Componentes de lecciones
│   │   ├── lesson-filters.tsx
│   │   ├── lesson-list.tsx
│   │   ├── lesson-viewer.tsx
│   │   ├── completion-modal.tsx
│   │   ├── abandon-lesson-modal.tsx
│   │   └── activities/           # Tipos de actividades
│   │       ├── multiple-choice-activity.tsx
│   │       ├── fill-blank-activity.tsx
│   │       ├── true-false-activity.tsx
│   │       ├── word-order-activity.tsx
│   │       ├── matching-activity.tsx
│   │       ├── listen-repeat-activity.tsx
│   │       └── translation-activity.tsx
│   │
│   ├── gamification/             # Componentes de gamificación
│   │   ├── achievements-list.tsx
│   │   ├── level-progress.tsx
│   │   ├── rewards-inventory.tsx
│   │   ├── leaderboard-table.tsx
│   │   ├── leaderboard-filters.tsx
│   │   └── user-rank-card.tsx
│   │
│   ├── teacher/                  # Componentes del profesor
│   │   ├── teacher-stats.tsx
│   │   ├── student-performance.tsx
│   │   ├── recent-feedback.tsx
│   │   ├── quick-teacher-actions.tsx
│   │   ├── create-planning-form.tsx
│   │   └── response-modal.tsx
│   │
│   ├── admin/                    # Componentes del admin
│   │   ├── admin-stats.tsx
│   │   ├── recent-lessons.tsx
│   │   ├── media-library-preview.tsx
│   │   ├── quick-admin-actions.tsx
│   │   └── create-lesson-form.tsx
│   │
│   ├── maintenance/              # Componentes de mantenimiento
│   │   ├── maintenance-stats.tsx
│   │   ├── recent-reports.tsx
│   │   ├── scheduled-tasks.tsx
│   │   ├── quick-maintenance-actions.tsx
│   │   └── create-task-form.tsx
│   │
│   └── profile/                  # Componentes de perfil
│       └── profile-settings.tsx  # Configuración de perfil (role-aware)
│
├── scripts/                      # Scripts SQL para base de datos
│   ├── 01-create-tables.sql     # Creación de tablas
│   └── 02-seed-initial-data.sql # Datos iniciales
│
├── docs/                         # Documentación
│   ├── PROGRESO_IMPLEMENTACION_FINAL.md
│   ├── CONEXION_INTERFACES_FINAL.md
│   └── ARQUITECTURA_PROYECTO.md (este archivo)
│
├── lib/                          # Utilidades
│   └── utils.ts                  # Función cn() para clases
│
└── hooks/                        # Custom hooks
    ├── use-mobile.tsx
    └── use-toast.ts
\`\`\`

---

## 🧩 Módulos del Sistema

### 1. **Módulo de Autenticación** 🔐
**Propósito**: Gestionar el acceso y registro de usuarios

**Páginas**:
- `/` - Landing page con botones de login/registro
- `/login` - Inicio de sesión
- `/registro` - Registro de nuevos usuarios
- `/verificar-email` - Verificación de correo electrónico
- `/recuperar-contrasena` - Recuperación de contraseña
- `/asignar-nivel` - Asignación de nivel inicial (evaluación o manual)
- `/correo-enviado` - Confirmación de envío de correo

**Componentes Clave**:
- `components/auth/login-form.tsx` - Formulario de login con usuarios de prueba
- `components/auth/register-form.tsx` - Formulario de registro
- `components/auth/level-assignment-flow.tsx` - Flujo de asignación de nivel
- `components/auth/password-recovery-form.tsx` - Recuperación de contraseña

**Interacciones**:
- Almacena `userRole` y `userName` en `localStorage` tras login exitoso
- Redirige según rol:
  - `estudiante` → `/dashboard`
  - `profesor` → `/profesor/dashboard`
  - `admin` → `/admin/dashboard`
  - `mantenimiento` → `/mantenimiento/dashboard`

**APIs Necesarias**:
\`\`\`python
POST /api/auth/login
POST /api/auth/register
POST /api/auth/verify-email
POST /api/auth/forgot-password
POST /api/auth/reset-password
POST /api/auth/assign-level
\`\`\`

---

### 2. **Módulo Alumno** 🎓
**Propósito**: Experiencia de aprendizaje gamificada para estudiantes

**Páginas**:
- `/dashboard` - Dashboard principal con progreso, racha, acciones rápidas
- `/lecciones` - Lista de lecciones con filtros
- `/lecciones/[id]` - Visor de lección con actividades interactivas
- `/logros` - Logros desbloqueados y recompensas
- `/clasificacion` - Tabla de clasificación (leaderboard)
- `/progreso` - Progreso detallado por curso y lección
- `/perfil` - Perfil del usuario con configuración
- `/cambiar-curso` - Cambiar curso actual
- `/eliminar-cuenta` - Proceso de eliminación de cuenta (3 pasos)

**Componentes Clave**:
- `components/dashboard/dashboard-header.tsx` - Header con navegación role-aware
- `components/lessons/lesson-viewer.tsx` - Visor de lecciones con actividades
- `components/lessons/activities/*` - 7 tipos de actividades interactivas
- `components/gamification/*` - Sistema de gamificación

**Tipos de Actividades**:
1. **Opción Múltiple** (`multiple-choice-activity.tsx`)
2. **Completar Espacios** (`fill-blank-activity.tsx`)
3. **Verdadero/Falso** (`true-false-activity.tsx`)
4. **Ordenar Palabras** (`word-order-activity.tsx`)
5. **Emparejar** (`matching-activity.tsx`)
6. **Escuchar y Repetir** (`listen-repeat-activity.tsx`)
7. **Traducción** (`translation-activity.tsx`)

**Interacciones**:
- Lee `userRole` de `localStorage` para mostrar navegación correcta
- Actualiza progreso tras completar actividades
- Calcula XP y actualiza racha diaria
- Desbloquea logros según criterios

**APIs Necesarias**:
\`\`\`python
GET /api/student/dashboard
GET /api/student/lessons?course_id=&level=&status=
GET /api/student/lessons/:id
POST /api/student/lessons/:id/complete
GET /api/student/achievements
GET /api/student/leaderboard?period=&course_id=
GET /api/student/progress
PUT /api/student/profile
POST /api/student/change-course
DELETE /api/student/account
\`\`\`

---

### 3. **Módulo Profesor** 👨‍🏫
**Propósito**: Herramientas para profesores para monitorear y guiar estudiantes

**Páginas**:
- `/profesor/dashboard` - Dashboard con estadísticas y acciones rápidas
- `/profesor/estadisticas` - Estadísticas generales de estudiantes
- `/profesor/estadisticas/[id]` - Detalle de alumno individual
- `/profesor/retroalimentacion` - Gestión de retroalimentación de estudiantes
- `/profesor/planificacion` - Lista de planificaciones
- `/profesor/planificacion/nuevo` - Crear nueva planificación (3 pasos)

**Componentes Clave**:
- `components/teacher/teacher-stats.tsx` - Estadísticas del profesor
- `components/teacher/student-performance.tsx` - Rendimiento de estudiantes
- `components/teacher/create-planning-form.tsx` - Formulario de planificación (3 pasos)
- `components/teacher/response-modal.tsx` - Modal para responder retroalimentación

**Interacciones**:
- Visualiza estadísticas agregadas de estudiantes
- Exporta reportes en CSV
- Responde a comentarios/preguntas de estudiantes
- Crea planificaciones personalizadas por área de mejora

**APIs Necesarias**:
\`\`\`python
GET /api/teacher/dashboard
GET /api/teacher/statistics
GET /api/teacher/students/:id
GET /api/teacher/feedback
POST /api/teacher/feedback/:id/respond
GET /api/teacher/planning
POST /api/teacher/planning
GET /api/teacher/export/statistics
\`\`\`

---

### 4. **Módulo Administrador** ⚙️
**Propósito**: Gestión de contenido, usuarios y configuración del sistema

**Páginas**:
- `/admin/dashboard` - Dashboard con estadísticas del sistema
- `/admin/lecciones` - Gestión de lecciones
- `/admin/lecciones/crear` - Crear nueva lección
- `/admin/lecciones/[id]/editar` - Editar lección existente
- `/admin/multimedia` - Biblioteca multimedia
- `/admin/usuarios` - Gestión de usuarios
- `/admin/usuarios/[id]/editar` - Editar usuario

**Componentes Clave**:
- `components/admin/admin-stats.tsx` - Estadísticas del sistema
- `components/admin/create-lesson-form.tsx` - Formulario de creación de lecciones
- `components/admin/media-library-preview.tsx` - Vista previa de multimedia

**Interacciones**:
- CRUD completo de lecciones y actividades
- Gestión de usuarios (crear, editar, eliminar, cambiar roles)
- Subida y gestión de archivos multimedia
- Configuración de cursos y niveles

**APIs Necesarias**:
\`\`\`python
GET /api/admin/dashboard
GET /api/admin/lessons
POST /api/admin/lessons
PUT /api/admin/lessons/:id
DELETE /api/admin/lessons/:id
GET /api/admin/media
POST /api/admin/media/upload
DELETE /api/admin/media/:id
GET /api/admin/users
POST /api/admin/users
PUT /api/admin/users/:id
DELETE /api/admin/users/:id
\`\`\`

---

### 5. **Módulo Mantenimiento** 🔧
**Propósito**: Gestión de reportes de bugs y tareas programadas

**Páginas**:
- `/mantenimiento/dashboard` - Dashboard de mantenimiento
- `/mantenimiento/reportes` - Lista de reportes de bugs
- `/mantenimiento/reportes/[id]` - Detalle de reporte individual
- `/mantenimiento/tareas` - Lista de tareas programadas
- `/mantenimiento/tareas/nueva` - Crear nueva tarea

**Componentes Clave**:
- `components/maintenance/maintenance-stats.tsx` - Estadísticas de mantenimiento
- `components/maintenance/recent-reports.tsx` - Reportes recientes
- `components/maintenance/create-task-form.tsx` - Formulario de tareas

**Interacciones**:
- Visualiza y gestiona reportes de bugs
- Asigna prioridades y estados a reportes
- Programa tareas de mantenimiento
- Monitorea salud del sistema

**APIs Necesarias**:
\`\`\`python
GET /api/maintenance/dashboard
GET /api/maintenance/reports
GET /api/maintenance/reports/:id
PUT /api/maintenance/reports/:id
GET /api/maintenance/tasks
POST /api/maintenance/tasks
PUT /api/maintenance/tasks/:id
DELETE /api/maintenance/tasks/:id
\`\`\`

---

## 🔄 Flujo de Datos

### Flujo de Autenticación
\`\`\`
1. Usuario ingresa credenciales en /login
2. LoginForm envía datos (actualmente mock)
3. Backend valida credenciales
4. Backend retorna: { user_id, name, email, role, token }
5. Frontend guarda en localStorage:
   - userRole: "estudiante" | "profesor" | "admin" | "mantenimiento"
   - userName: string
   - authToken: string (para futuras peticiones)
6. Redirige según rol
\`\`\`

### Flujo de Lección
\`\`\`
1. Alumno navega a /lecciones
2. LessonList obtiene lecciones del backend
3. Alumno selecciona lección → /lecciones/[id]
4. LessonViewer carga lección y actividades
5. Alumno completa actividades una por una
6. Al finalizar, se calcula puntuación
7. Se envía progreso al backend
8. Backend actualiza:
   - user_progress (lección completada)
   - user_stats (XP, racha)
   - achievements (si se desbloquean)
9. Frontend muestra CompletionModal con resultados
\`\`\`

### Flujo de Gamificación
\`\`\`
1. Backend calcula XP tras cada lección
2. Frontend consulta /api/student/achievements
3. Backend verifica criterios de logros:
   - Lecciones completadas
   - Días consecutivos (racha)
   - Puntuación perfecta
   - Tiempo récord
4. Si se desbloquea logro, backend retorna notificación
5. Frontend muestra animación de logro desbloqueado
6. Leaderboard se actualiza automáticamente
\`\`\`

---

## 🎨 Componentes Principales

### DashboardHeader (Role-Aware)
**Ubicación**: `components/dashboard/dashboard-header.tsx`

**Propósito**: Header de navegación que cambia según el rol del usuario

**Lógica**:
\`\`\`typescript
const userRole = localStorage.getItem('userRole')

if (userRole === 'estudiante') {
  // Muestra: Dashboard, Lecciones, Logros, Clasificación
}
if (userRole === 'profesor') {
  // Muestra: Dashboard, Estadísticas, Retroalimentación, Planificación
}
if (userRole === 'admin') {
  // Muestra: Dashboard, Lecciones, Biblioteca, Usuarios
}
if (userRole === 'mantenimiento') {
  // Muestra: Dashboard, Reportes, Tareas
}
\`\`\`

**Interacción con Backend**:
- Necesita endpoint para obtener notificaciones: `GET /api/notifications`
- Necesita endpoint para logout: `POST /api/auth/logout`

---

### LessonViewer
**Ubicación**: `components/lessons/lesson-viewer.tsx`

**Propósito**: Renderiza lecciones con actividades interactivas

**Estructura de Datos Esperada**:
\`\`\`typescript
interface Lesson {
  id: number
  title: string
  description: string
  level: string
  xp_reward: number
  activities: Activity[]
}

interface Activity {
  id: number
  type: 'multiple_choice' | 'fill_blank' | 'true_false' | 
        'word_order' | 'matching' | 'listen_repeat' | 'translation'
  question: string
  options?: string[]  // Para multiple_choice
  correct_answer: string | string[]
  audio_url?: string  // Para listen_repeat
  image_url?: string
  hint?: string
}
\`\`\`

**Flujo**:
1. Recibe `lessonId` de la URL
2. Llama `GET /api/student/lessons/:id`
3. Renderiza actividades según `activity.type`
4. Valida respuestas del usuario
5. Calcula puntuación final
6. Envía resultados: `POST /api/student/lessons/:id/complete`

---

### ProfileSettings (Role-Aware)
**Ubicación**: `components/profile/profile-settings.tsx`

**Propósito**: Configuración de perfil adaptada al rol

**Lógica**:
\`\`\`typescript
const userRole = localStorage.getItem('userRole')

// Solo para estudiantes:
if (userRole === 'estudiante') {
  // Muestra: Nivel Actual, Curso Actual, Zona de Peligro
}

// Para profesor, admin, mantenimiento:
// NO muestra: Nivel Actual, Curso Actual, Zona de Peligro
// Solo muestra: Información Personal, Preferencias
\`\`\`

---

## 🗺️ Rutas y Navegación

### Rutas Públicas (No requieren autenticación)
- `/` - Landing page
- `/login` - Inicio de sesión
- `/registro` - Registro
- `/verificar-email` - Verificación de email
- `/recuperar-contrasena` - Recuperación de contraseña
- `/correo-enviado` - Confirmación

### Rutas Protegidas por Rol

#### Estudiante (`userRole === 'estudiante'`)
- `/dashboard`
- `/lecciones`
- `/lecciones/[id]`
- `/logros`
- `/clasificacion`
- `/progreso`
- `/perfil`
- `/cambiar-curso`
- `/eliminar-cuenta`

#### Profesor (`userRole === 'profesor'`)
- `/profesor/dashboard`
- `/profesor/estadisticas`
- `/profesor/estadisticas/[id]`
- `/profesor/retroalimentacion`
- `/profesor/planificacion`
- `/profesor/planificacion/nuevo`
- `/perfil`

#### Admin (`userRole === 'admin'`)
- `/admin/dashboard`
- `/admin/lecciones`
- `/admin/lecciones/crear`
- `/admin/lecciones/[id]/editar`
- `/admin/multimedia`
- `/admin/usuarios`
- `/admin/usuarios/[id]/editar`
- `/perfil`

#### Mantenimiento (`userRole === 'mantenimiento'`)
- `/mantenimiento/dashboard`
- `/mantenimiento/reportes`
- `/mantenimiento/reportes/[id]`
- `/mantenimiento/tareas`
- `/mantenimiento/tareas/nueva`
- `/perfil`

---

## 🗄️ Esquema de Base de Datos

**Ubicación**: `scripts/01-create-tables.sql`

### Tablas Principales

#### users
\`\`\`sql
id, email, password_hash, name, role, created_at, last_login, 
email_verified, is_active
\`\`\`

#### courses
\`\`\`sql
id, name, description, language, level, created_at
\`\`\`

#### lessons
\`\`\`sql
id, course_id, title, description, level, order_index, xp_reward, 
estimated_time, created_at
\`\`\`

#### activities
\`\`\`sql
id, lesson_id, type, question, options, correct_answer, hint, 
audio_url, image_url, order_index
\`\`\`

#### user_progress
\`\`\`sql
id, user_id, lesson_id, status, score, attempts, completed_at, 
time_spent
\`\`\`

#### user_stats
\`\`\`sql
id, user_id, course_id, total_xp, current_level, lessons_completed, 
current_streak, longest_streak, last_activity_date
\`\`\`

#### achievements
\`\`\`sql
id, name, description, icon, criteria_type, criteria_value, 
xp_reward, badge_color
\`\`\`

#### user_achievements
\`\`\`sql
id, user_id, achievement_id, unlocked_at, progress
\`\`\`

#### leaderboard
\`\`\`sql
id, user_id, course_id, total_xp, rank, period, updated_at
\`\`\`

#### feedback
\`\`\`sql
id, user_id, teacher_id, lesson_id, comment, rating, status, 
response, created_at, responded_at
\`\`\`

#### planning
\`\`\`sql
id, teacher_id, student_id, title, description, focus_area, 
lessons, start_date, end_date, status, created_at
\`\`\`

#### bug_reports
\`\`\`sql
id, user_id, title, description, severity, status, assigned_to, 
created_at, resolved_at
\`\`\`

#### scheduled_tasks
\`\`\`sql
id, name, description, frequency, last_run, next_run, status, 
created_by
\`\`\`

#### multimedia
\`\`\`sql
id, filename, file_type, file_size, url, uploaded_by, created_at
\`\`\`

**Ver esquema completo en**: `scripts/01-create-tables.sql`

---

## 🔌 APIs Necesarias para Backend

### Estructura de Respuesta Estándar
\`\`\`python
# Éxito
{
  "success": True,
  "data": {...},
  "message": "Operación exitosa"
}

# Error
{
  "success": False,
  "error": "Mensaje de error",
  "code": "ERROR_CODE"
}
\`\`\`

### Endpoints por Módulo

#### Autenticación
\`\`\`python
POST   /api/auth/login
POST   /api/auth/register
POST   /api/auth/verify-email
POST   /api/auth/forgot-password
POST   /api/auth/reset-password
POST   /api/auth/assign-level
POST   /api/auth/logout
GET    /api/auth/me  # Obtener usuario actual
\`\`\`

#### Estudiante
\`\`\`python
GET    /api/student/dashboard
GET    /api/student/lessons
GET    /api/student/lessons/:id
POST   /api/student/lessons/:id/complete
GET    /api/student/achievements
GET    /api/student/leaderboard
GET    /api/student/progress
PUT    /api/student/profile
POST   /api/student/change-course
DELETE /api/student/account
POST   /api/student/feedback  # Enviar retroalimentación
\`\`\`

#### Profesor
\`\`\`python
GET    /api/teacher/dashboard
GET    /api/teacher/statistics
GET    /api/teacher/students/:id
GET    /api/teacher/feedback
POST   /api/teacher/feedback/:id/respond
GET    /api/teacher/planning
POST   /api/teacher/planning
PUT    /api/teacher/planning/:id
DELETE /api/teacher/planning/:id
GET    /api/teacher/export/statistics  # Exportar CSV
\`\`\`

#### Admin
\`\`\`python
GET    /api/admin/dashboard
GET    /api/admin/lessons
POST   /api/admin/lessons
PUT    /api/admin/lessons/:id
DELETE /api/admin/lessons/:id
GET    /api/admin/media
POST   /api/admin/media/upload
DELETE /api/admin/media/:id
GET    /api/admin/users
POST   /api/admin/users
PUT    /api/admin/users/:id
DELETE /api/admin/users/:id
GET    /api/admin/courses
POST   /api/admin/courses
\`\`\`

#### Mantenimiento
\`\`\`python
GET    /api/maintenance/dashboard
GET    /api/maintenance/reports
GET    /api/maintenance/reports/:id
PUT    /api/maintenance/reports/:id
GET    /api/maintenance/tasks
POST   /api/maintenance/tasks
PUT    /api/maintenance/tasks/:id
DELETE /api/maintenance/tasks/:id
\`\`\`

#### Global
\`\`\`python
GET    /api/notifications  # Notificaciones del usuario
PUT    /api/notifications/:id/read
\`\`\`

---

## 🔐 Autenticación y Autorización

### Flujo de Autenticación con Flask

#### 1. Login
\`\`\`python
# Frontend envía:
POST /api/auth/login
{
  "email": "juan@example.com",
  "password": "password123"
}

# Backend responde:
{
  "success": True,
  "data": {
    "user": {
      "id": 1,
      "name": "Juan Pérez",
      "email": "juan@example.com",
      "role": "estudiante"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
}

# Frontend guarda en localStorage:
localStorage.setItem('authToken', data.token)
localStorage.setItem('userRole', data.user.role)
localStorage.setItem('userName', data.user.name)
\`\`\`

#### 2. Peticiones Autenticadas
\`\`\`typescript
// Frontend incluye token en headers:
fetch('/api/student/dashboard', {
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
    'Content-Type': 'application/json'
  }
})
\`\`\`

#### 3. Middleware de Autorización (Flask)
\`\`\`python
from functools import wraps
from flask import request, jsonify
import jwt

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = request.headers.get('Authorization')
        if not token:
            return jsonify({'error': 'Token missing'}), 401
        
        try:
            token = token.split(' ')[1]  # Remove 'Bearer '
            data = jwt.decode(token, app.config['SECRET_KEY'])
            current_user = User.query.get(data['user_id'])
        except:
            return jsonify({'error': 'Token invalid'}), 401
        
        return f(current_user, *args, **kwargs)
    return decorated

def role_required(roles):
    def decorator(f):
        @wraps(f)
        def decorated(current_user, *args, **kwargs):
            if current_user.role not in roles:
                return jsonify({'error': 'Unauthorized'}), 403
            return f(current_user, *args, **kwargs)
        return decorated
    return decorator

# Uso:
@app.route('/api/teacher/dashboard')
@token_required
@role_required(['profesor'])
def teacher_dashboard(current_user):
    # Solo profesores pueden acceder
    pass
\`\`\`

---

## 🔗 Integración Frontend-Backend

### Configuración de Variables de Entorno

**Frontend** (`.env.local`):
\`\`\`bash
NEXT_PUBLIC_API_URL=http://localhost:5000/api
SUPABASE_NEXT_PUBLIC_SUPABASE_URL=your_supaSUPABASE_NEXT_PUBLIC_SUPABASE_ANON_KEY_ANON_KEY=your_supabase_key
\`\`\`

**Backend** (`.env`):
\`\`\`bash
FLASK_APP=app.py
FLASK_ENV=development
SECRET_KEY=your_secret_key
DATABASE_URL=postgresql://user:password@localhost/speaklexi
JWT_SECRET_KEY=your_jwt_secret
CORS_ORIGINS=http://localhost:3000
\`\`\`

### Cliente API (Frontend)

**Crear**: `lib/api-client.ts`
\`\`\`typescript
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api'

export class ApiClient {
  private getHeaders(): HeadersInit {
    const token = localStorage.getItem('authToken')
    return {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` })
    }
  }

  async get(endpoint: string) {
    const response = await fetch(`${API_URL}${endpoint}`, {
      headers: this.getHeaders()
    })
    return this.handleResponse(response)
  }

  async post(endpoint: string, data: any) {
    const response = await fetch(`${API_URL}${endpoint}`, {
      method: 'POST',
      headers: this.getHeaders(),
      body: JSON.stringify(data)
    })
    return this.handleResponse(response)
  }

  async put(endpoint: string, data: any) {
    const response = await fetch(`${API_URL}${endpoint}`, {
      method: 'PUT',
      headers: this.getHeaders(),
      body: JSON.stringify(data)
    })
    return this.handleResponse(response)
  }

  async delete(endpoint: string) {
    const response = await fetch(`${API_URL}${endpoint}`, {
      method: 'DELETE',
      headers: this.getHeaders()
    })
    return this.handleResponse(response)
  }

  private async handleResponse(response: Response) {
    const data = await response.json()
    
    if (!response.ok) {
      throw new Error(data.error || 'Request failed')
    }
    
    return data
  }
}

export const api = new ApiClient()
\`\`\`

**Uso en Componentes**:
\`\`\`typescript
import { api } from '@/lib/api-client'

// En lugar de datos mock:
const lessons = await api.get('/student/lessons?course_id=1')

// Completar lección:
await api.post(`/student/lessons/${lessonId}/complete`, {
  score: 95,
  time_spent: 180,
  answers: [...]
})
\`\`\`

### Estructura del Backend Flask

\`\`\`
backend/
├── app.py                    # Aplicación principal
├── config.py                 # Configuración
├── requirements.txt          # Dependencias
├── .env                      # Variables de entorno
│
├── models/                   # Modelos SQLAlchemy
│   ├── __init__.py
│   ├── user.py
│   ├── course.py
│   ├── lesson.py
│   ├── activity.py
│   ├── progress.py
│   └── ...
│
├── routes/                   # Blueprints de rutas
│   ├── __init__.py
│   ├── auth.py
│   ├── student.py
│   ├── teacher.py
│   ├── admin.py
│   └── maintenance.py
│
├── services/                 # Lógica de negocio
│   ├── __init__.py
│   ├── auth_service.py
│   ├── lesson_service.py
│   ├── gamification_service.py
│   └── ...
│
├── utils/                    # Utilidades
│   ├── __init__.py
│   ├── decorators.py         # @token_required, @role_required
│   ├── validators.py
│   └── helpers.py
│
└── migrations/               # Migraciones de base de datos
    └── ...
\`\`\`

### Ejemplo de Endpoint Flask

\`\`\`python
# routes/student.py
from flask import Blueprint, request, jsonify
from models.lesson import Lesson
from models.user_progress import UserProgress
from utils.decorators import token_required, role_required
from services.gamification_service import GamificationService

student_bp = Blueprint('student', __name__)

@student_bp.route('/lessons', methods=['GET'])
@token_required
@role_required(['estudiante'])
def get_lessons(current_user):
    course_id = request.args.get('course_id')
    level = request.args.get('level')
    status = request.args.get('status')
    
    query = Lesson.query
    
    if course_id:
        query = query.filter_by(course_id=course_id)
    if level:
        query = query.filter_by(level=level)
    
    lessons = query.all()
    
    # Agregar progreso del usuario
    lessons_data = []
    for lesson in lessons:
        progress = UserProgress.query.filter_by(
            user_id=current_user.id,
            lesson_id=lesson.id
        ).first()
        
        lessons_data.append({
            'id': lesson.id,
            'title': lesson.title,
            'description': lesson.description,
            'level': lesson.level,
            'xp_reward': lesson.xp_reward,
            'status': progress.status if progress else 'not_started',
            'score': progress.score if progress else None
        })
    
    return jsonify({
        'success': True,
        'data': lessons_data
    })

@student_bp.route('/lessons/<int:lesson_id>/complete', methods=['POST'])
@token_required
@role_required(['estudiante'])
def complete_lesson(current_user, lesson_id):
    data = request.json
    score = data.get('score')
    time_spent = data.get('time_spent')
    
    # Guardar progreso
    progress = UserProgress(
        user_id=current_user.id,
        lesson_id=lesson_id,
        status='completed',
        score=score,
        time_spent=time_spent
    )
    db.session.add(progress)
    
    # Actualizar estadísticas y gamificación
    gamification = GamificationService()
    result = gamification.process_lesson_completion(
        current_user, 
        lesson_id, 
        score
    )
    
    db.session.commit()
    
    return jsonify({
        'success': True,
        'data': {
            'xp_earned': result['xp_earned'],
            'new_achievements': result['new_achievements'],
            'level_up': result['level_up']
        }
    })
\`\`\`

---

## 📊 Consideraciones de Rendimiento

### Frontend
- **Code Splitting**: Next.js automáticamente divide el código por rutas
- **Lazy Loading**: Componentes pesados se cargan bajo demanda
- **Optimización de Imágenes**: Usar `next/image` para imágenes optimizadas
- **Caching**: SWR o React Query para cachear peticiones

### Backend
- **Paginación**: Implementar en listas largas (lecciones, usuarios, reportes)
- **Índices de Base de Datos**: En columnas frecuentemente consultadas
- **Caching**: Redis para datos frecuentemente accedidos (leaderboard, estadísticas)
- **Rate Limiting**: Limitar peticiones por usuario/IP

---

## 🚀 Próximos Pasos para Implementación Backend

### Fase 1: Setup Inicial
1. Configurar Flask + SQLAlchemy + PostgreSQL
2. Implementar autenticación JWT
3. Crear modelos de base de datos
4. Configurar CORS para Next.js

### Fase 2: Módulo Autenticación
1. Endpoints de login/registro
2. Verificación de email
3. Recuperación de contraseña
4. Middleware de autorización

### Fase 3: Módulo Alumno
1. Endpoints de lecciones
2. Sistema de progreso
3. Gamificación (XP, logros, leaderboard)
4. Perfil de usuario

### Fase 4: Módulos Profesor, Admin, Mantenimiento
1. Estadísticas y reportes
2. Gestión de contenido
3. Sistema de retroalimentación
4. Planificaciones

### Fase 5: Optimización
1. Caching con Redis
2. Subida de archivos multimedia
3. Notificaciones en tiempo real (WebSockets)
4. Tests unitarios e integración

---

## 📝 Notas Finales

### Estado Actual del Frontend
- ✅ Todas las interfaces implementadas
- ✅ Navegación completa entre módulos
- ✅ Componentes reutilizables y modulares
- ✅ Sistema de roles funcional (localStorage)
- ⚠️ Datos mock (listos para reemplazar con API calls)

### Preparación para Backend
- ✅ Esquema de base de datos definido
- ✅ Estructura de APIs documentada
- ✅ Flujos de autenticación diseñados
- ✅ Cliente API preparado (`lib/api-client.ts`)
- ⚠️ Requiere implementación de Flask

### Contacto y Mantenimiento
Para preguntas sobre la arquitectura o implementación del backend, referirse a:
- `docs/PROGRESO_IMPLEMENTACION_FINAL.md` - Estado de implementación
- `docs/CONEXION_INTERFACES_FINAL.md` - Conexiones entre interfaces
- `scripts/01-create-tables.sql` - Esquema de base de datos completo

---

**Última actualización**: 2025
**Versión del documento**: 1.0
**Autor**: v0 AI Assistant



================================================================================
# ARCHIVO: front-end/docs/AUDITORIA_COMPLETA.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/AUDITORIA_COMPLETA.md
================================================================================

# 🔍 AUDITORÍA EXHAUSTIVA - SPEAKLEXI
## Comparación Implementación vs Especificaciones Técnicas

**Fecha de Auditoría:** 19 de Enero de 2025  
**Auditor:** Arquitecto de Software Senior  
**Versión del Sistema:** 1.0.0  
**Framework:** Next.js 15 + React 19 + TypeScript

---

## 📊 RESUMEN EJECUTIVO

### Estado General del Proyecto
- **Completitud Global:** 92%
- **Módulos Implementados:** 5/5
- **Casos de Uso Implementados:** 15/17
- **Componentes de Actividades:** 7/7 ✅
- **Páginas Principales:** 45/48

### Hallazgos Críticos
1. ✅ **Fortalezas:** Arquitectura modular bien estructurada, componentes reutilizables, diseño consistente
2. ⚠️ **Áreas de Mejora:** Validaciones de backend pendientes, flujos alternativos sin Supabase
3. 🔴 **Crítico:** Falta integración real con base de datos (actualmente mock data)

---

## 📋 MÓDULO 1: GESTIÓN DE USUARIOS (UC-01 a UC-07)

### ✅ UC-01: Iniciar Sesión (RF-01)
**Ubicación:** `/app/login/page.tsx` + `/components/auth/login-form.tsx`

#### Implementado Correctamente:
- ✅ Formulario con campos: correo electrónico y contraseña
- ✅ Validación frontend: formato email, contraseña requerida
- ✅ Toggle show/hide password
- ✅ Link "¿Olvidaste tu contraseña?" → `/recuperar-contrasena`
- ✅ Link "Crear cuenta nueva" → `/registro`
- ✅ Usuarios de prueba funcionales con panel colapsable
- ✅ Auto-cierre del panel al seleccionar usuario
- ✅ Redireccionamiento correcto según rol:
  - `estudiante@speaklexi.com` → `/dashboard`
  - `profesor@speaklexi.com` → `/profesor/dashboard`
  - `admin@speaklexi.com` → `/admin/dashboard`
  - `mantenimiento@speaklexi.com` → `/mantenimiento/dashboard`
- ✅ Almacenamiento en localStorage: `userRole`, `userName`, `userEmail`

#### Pendiente:
- ⚠️ Validación de contraseña mínimo 6 caracteres (solo verifica que no esté vacío)
- ⚠️ Manejo de errores con Supabase: credenciales incorrectas, cuenta no verificada
- ⚠️ Token real de autenticación (actualmente mock)

**API Requerida:**
\`\`\`typescript
POST /api/auth/login
Body: { correo: string, contrasena: string }
Response: { 
  success: boolean, 
  data: { 
    user: { id, nombre, correo, rol, nivel },
    token: string 
  }, 
  message: string 
}
\`\`\`

**Estado:** 🟢 85% Completo

---

### ✅ UC-02: Recuperar Contraseña (RF-02)
**Ubicación:** `/app/recuperar-contrasena/page.tsx` + componentes relacionados

#### PASO 1 - Solicitar Enlace:
- ✅ Campo: correo electrónico
- ✅ Botón "Enviar enlace de recuperación"
- ✅ Link "← Volver al inicio de sesión"
- ✅ Validación: formato de email
- ⚠️ Manejo de error: correo no registrado (pendiente integración)

#### PASO 2 - Correo Enviado:
- ✅ Página `/app/correo-enviado/page.tsx` existe
- ✅ Icono CheckCircle (verde)
- ✅ Título: "Revisa tu correo"
- ✅ Instrucciones numeradas
- ✅ Link "Reenviar enlace"
- ✅ Nota: "El enlace expirará en 24 horas"

#### PASO 3 - Restablecer Contraseña:
- ✅ Página `/app/restablecer-contrasena/page.tsx` existe
- ✅ Campo: Nueva contraseña
- ✅ Campo: Confirmar contraseña
- ✅ Panel de requisitos con indicadores visuales:
  - ✅ Mínimo 8 caracteres
  - ✅ Al menos una mayúscula
  - ✅ Al menos una minúscula
  - ✅ Al menos un número
- ✅ Botón "Actualizar contraseña"
- ⚠️ Validación de token (pendiente backend)

**APIs Requeridas:**
\`\`\`typescript
POST /api/auth/request-password-reset
Body: { correo: string }

GET /api/auth/validate-reset-token?token=xxx
Response: { valid: boolean, expiresAt: string }

POST /api/auth/reset-password
Body: { token: string, nuevaContrasena: string }
\`\`\`

**Estado:** 🟢 80% Completo

---

### ✅ UC-03: Autenticar Usuario (RF-03)
**Ubicación:** `/app/verificar-email/page.tsx` + `/components/auth/verify-email-form.tsx`

#### Implementado:
- ✅ 6 campos individuales para código OTP
- ✅ Auto-focus en siguiente campo al escribir
- ✅ Temporizador: "Reenviar en 00:59"
- ✅ Link "¿No recibiste el código? Reenviar"
- ✅ Botón "Verificar" (activo solo con 6 dígitos)
- ⚠️ Manejo de errores: código incorrecto, código expirado (mock)
- ✅ Redireccionamiento tras verificación exitosa

**APIs Requeridas:**
\`\`\`typescript
POST /api/auth/verify-email
Body: { correo: string, codigo: string }

POST /api/auth/resend-verification
Body: { correo: string }
\`\`\`

**Estado:** 🟢 85% Completo

---

### ✅ UC-04: Registrar Usuario (RF-04)
**Ubicación:** `/app/registro/page.tsx` + `/components/auth/register-form.tsx`

#### Implementado:
- ✅ Campo: Nombre completo (placeholder: "Juan Pérez")
- ✅ Campo: Correo electrónico
- ✅ Campo: Contraseña (con toggle show/hide)
- ✅ Campo: Confirmar contraseña
- ✅ Validación: contraseñas coinciden
- ✅ Validación: contraseña mínimo 8 caracteres
- ⚠️ Panel de requisitos de contraseña con indicadores dinámicos (falta implementar)
- ✅ Botón "Crear cuenta"
- ✅ Link "Iniciar sesión" (si ya tiene cuenta)
- ✅ Footer con términos y condiciones
- ✅ Redireccionamiento a verificación tras registro
- ⚠️ Manejo de error: correo ya registrado (pendiente backend)

**Mejoras Necesarias:**
\`\`\`typescript
// Agregar panel de requisitos dinámico en register-form.tsx
const passwordRequirements = [
  { text: "Mínimo 8 caracteres", met: password.length >= 8 },
  { text: "Al menos una mayúscula", met: /[A-Z]/.test(password) },
  { text: "Al menos una minúscula", met: /[a-z]/.test(password) },
  { text: "Al menos un número", met: /\d/.test(password) }
]
\`\`\`

**API Requerida:**
\`\`\`typescript
POST /api/users/register
Body: { nombre: string, correo: string, contrasena: string }
Response: { 
  success: boolean, 
  data: { 
    idUsuario: number, 
    estadoCuenta: "pendiente_verificacion" 
  }
}
\`\`\`

**Estado:** 🟡 75% Completo

---

### ✅ UC-05: Asignar Nivel (RF-05)
**Ubicación:** `/app/asignar-nivel/page.tsx` + `/components/auth/level-assignment-flow.tsx`

#### PASO 1 - Bienvenida:
- ✅ Título: "¡Bienvenido, [Nombre]!"
- ✅ Card con 2 opciones:
  - ✅ Opción 1: "Realizar evaluación" (recomendado) - ~5 minutos
  - ✅ Opción 2: "Seleccionar nivel manualmente"
- ✅ Botón "Continuar"

#### PASO 2 - Evaluación:
- ✅ Barra de progreso: "Pregunta X de 10"
- ✅ Preguntas de evaluación cargadas dinámicamente
- ✅ 4 opciones de respuesta (cards clickeables)
- ✅ Botones: "Anterior" | "Siguiente"
- ⚠️ Contador de tiempo opcional (no implementado)

#### PASO 3 - Resultados:
- ✅ Icono Award/Trophy
- ✅ Título: "¡Evaluación completada!"
- ✅ Card con nivel asignado, puntaje, porcentaje
- ✅ Descripción del nivel
- ✅ Botón "Comenzar a aprender"
- ✅ Link "No estoy de acuerdo con mi nivel"

#### Selección Manual:
- ✅ Cards de niveles: Principiante (A1-A2), Intermedio (B1-B2), Avanzado (C1-C2)
- ✅ Descripción de cada nivel
- ✅ Botón "Confirmar nivel"

**APIs Requeridas:**
\`\`\`typescript
POST /api/users/evaluation/start
Response: { evaluacionId: number, preguntas: Array }

POST /api/users/evaluation/submit
Body: { evaluacionId: number, respuestas: Array }
Response: { nivel: string, puntaje: number, porcentaje: number }

PUT /api/users/{idUsuario}/nivel
Body: { nivel: string, metodo: "evaluacion" | "manual" }
\`\`\`

**Estado:** 🟢 90% Completo

---

### ✅ UC-06: Cambiar Curso (RF-06)
**Ubicación:** `/app/cambiar-curso/page.tsx`

#### Implementado:
- ✅ Página dedicada con título "Cambiar Curso"
- ✅ Grid de cards de cursos disponibles:
  - ✅ Inglés (con bandera/icono)
  - ✅ Francés
  - ✅ Alemán
  - ✅ Italiano
  - ✅ Portugués
  - ✅ Japonés
- ✅ Badge "Actual" en el curso activo
- ✅ Cada card clickeable con hover effects
- ✅ Botón "Confirmar cambio"
- ✅ Botón "Volver al perfil"
- ✅ Advertencia: "Tu progreso actual se guardará"
- ⚠️ Manejo de error: curso no disponible (pendiente backend)

**Mejora Sugerida:**
Convertir a modal en lugar de página completa para mejor UX.

**API Requerida:**
\`\`\`typescript
PUT /api/users/{idUsuario}/curso
Body: { cursoActual: string }
Response: { success: boolean, message: string }
\`\`\`

**Estado:** 🟢 85% Completo

---

### ✅ UC-07: Eliminar Cuenta (RF-07)
**Ubicación:** `/app/eliminar-cuenta/page.tsx`

#### PASO 1 - Confirmación:
- ✅ Título: "Eliminar cuenta" (texto rojo)
- ✅ Icono AlertTriangle (rojo)
- ✅ Texto de advertencia: "Esta acción es permanente e irreversible"
- ✅ Lista de lo que se eliminará (progreso, recompensas, datos)
- ✅ Checkbox: "Entiendo que esta acción es permanente"
- ✅ Campo: "Escribe tu contraseña para confirmar"
- ✅ Botones: "Cancelar" | "Eliminar mi cuenta" (danger, deshabilitado hasta confirmar)

#### PASO 2 - Confirmación Final:
- ✅ Título: "¿Estás completamente seguro?"
- ✅ Campo: "Escribe ELIMINAR para confirmar"
- ✅ Botones: "No, mantener mi cuenta" | "Sí, eliminar permanentemente"

#### PASO 3 - Cuenta Eliminada:
- ✅ Icono CheckCircle
- ✅ Título: "Cuenta eliminada"
- ✅ Mensaje de despedida
- ✅ Botón: "Volver a inicio"
- ✅ Redireccionamiento a `/`
- ✅ Limpieza de localStorage

**API Requerida:**
\`\`\`typescript
DELETE /api/users/{idUsuario}
Body: { contrasena: string, confirmacion: "ELIMINAR" }
Response: { success: boolean, message: string }
\`\`\`

**Estado:** 🟢 95% Completo

---

## 📚 MÓDULO 2: GESTIÓN DE LECCIONES Y CONTENIDOS (UC-08 a UC-09)

### ✅ UC-08: Crear Nuevas Lecciones (RF-08)
**Ubicación:** `/app/admin/lecciones/crear/page.tsx` + `/components/admin/create-lesson-form.tsx`

#### PASO 1 - Datos Básicos:
- ✅ Breadcrumb: "Admin > Lecciones > Crear nueva"
- ✅ Título: "Nueva lección"
- ✅ Campo: Título de la lección* (placeholder correcto)
- ✅ Select: Idioma* (Inglés, Francés, Alemán, etc.)
- ✅ Select: Nivel* (Principiante, Intermedio, Avanzado)
- ✅ Textarea: Descripción
- ✅ Tags: Etiquetas (opcional)
- ✅ Barra de progreso: "Paso 1 de 3"
- ✅ Botones: "Cancelar" | "Siguiente"

#### PASO 2 - Agregar Actividades:
- ✅ Título: "Agregar actividades"
- ✅ Lista de actividades agregadas
- ✅ Botón: "+ Agregar actividad"
- ✅ Modal para agregar actividad con:
  - ✅ Select: Tipo de actividad (7 tipos disponibles)
  - ✅ Campo: Pregunta/Instrucción
  - ✅ Campos dinámicos según tipo
  - ✅ Botones: "Cancelar" | "Agregar"
- ✅ Cada actividad muestra: tipo, pregunta, botones "Editar" | "Eliminar"
- ⚠️ Drag handle para reordenar actividades (no implementado)
- ✅ Barra de progreso: "Paso 2 de 3"
- ✅ Botones: "Anterior" | "Siguiente"

#### PASO 3 - Multimedia:
- ✅ Título: "Recursos multimedia (opcional)"
- ✅ Área drag & drop: "Arrastra archivos aquí"
- ✅ Texto: "Formatos aceptados: JPG, PNG, MP3, MP4"
- ✅ Texto: "Tamaño máximo: 10MB"
- ✅ Lista de archivos subidos con preview
- ✅ Barra de progreso: "Paso 3 de 3"
- ✅ Botones: "Anterior" | "Guardar borrador" | "Publicar lección"

#### Vista Previa:
- ⚠️ Modal fullscreen de vista previa (no implementado)

**Mejora Necesaria:**
\`\`\`typescript
// Agregar drag & drop para reordenar actividades
import { DndContext, closestCenter } from '@dnd-kit/core'
import { SortableContext, verticalListSortingStrategy } from '@dnd-kit/sortable'
\`\`\`

**API Requerida:**
\`\`\`typescript
POST /api/lessons
Body: { 
  titulo: string, 
  idioma: string, 
  nivel: string, 
  descripcion: string, 
  etiquetas: string[], 
  actividades: Array<Activity>, 
  estado: "borrador" | "publicada" 
}
Response: { success: boolean, data: { idLeccion: number } }
\`\`\`

**Estado:** 🟡 80% Completo

---

### ✅ UC-09: Agregar Multimedia (RF-09)
**Ubicación:** `/app/admin/lecciones/[id]/multimedia/page.tsx` (no existe aún)

#### Pendiente de Implementación:
- ❌ Breadcrumb: "Admin > Lecciones > [Título] > Multimedia"
- ❌ Card de información de la lección (resumen)
- ❌ Área de carga drag & drop
- ❌ Botón: "Seleccionar archivos"
- ❌ Grid de recursos existentes
- ❌ Filtros: Por tipo, búsqueda por nombre
- ❌ Modal de vista previa según tipo de archivo
- ❌ Validación: formato válido, tamaño máximo 10MB

**Página a Crear:**
\`\`\`typescript
// app/admin/lecciones/[id]/multimedia/page.tsx
export default function LessonMultimediaPage({ params }: { params: { id: string } })
\`\`\`

**APIs Requeridas:**
\`\`\`typescript
POST /api/lessons/{idLeccion}/multimedia (multipart/form-data)
GET /api/lessons/{idLeccion}/multimedia?tipo=imagen
DELETE /api/lessons/{idLeccion}/multimedia/{idRecurso}
\`\`\`

**Estado:** 🔴 0% Completo - PENDIENTE

---

## 🎓 MÓDULO 3: GESTIÓN DEL APRENDIZAJE (UC-10 a UC-12)

### ✅ UC-10: Registrar Progreso (RF-10)
**Ubicación:** `/app/lecciones/[id]/page.tsx` + `/components/lessons/lesson-viewer.tsx`

#### Implementado:
- ✅ Header de lección: título, barra de progreso, botón "Salir"
- ✅ Card de actividad actual: número, tipo, pregunta, área de respuesta
- ✅ Botones: "Anterior" | "Verificar respuesta" / "Siguiente"
- ✅ Sidebar colapsable con lista de actividades: ✓ Completada, ⊙ Actual, ○ Pendiente
- ✅ Notificación de respuesta: correcta (verde ✓), incorrecta (rojo ✗ + explicación)
- ✅ Modal de finalización con: icono Trophy, "¡Lección completada!", resumen
- ✅ Botones: "Ver resultados detallados" | "Siguiente lección" | "Volver al dashboard"
- ✅ Modal "¿Guardar progreso?" al abandonar lección
- ⚠️ Guardado local si sin conexión (no implementado)

#### 7 TIPOS DE ACTIVIDADES - TODOS IMPLEMENTADOS ✅:
1. ✅ `multiple-choice-activity.tsx` - Opción múltiple
2. ✅ `fill-blank-activity.tsx` - Completar espacios
3. ✅ `true-false-activity.tsx` - Verdadero/Falso
4. ✅ `word-order-activity.tsx` - Ordenar palabras
5. ✅ `matching-activity.tsx` - Emparejar
6. ✅ `listen-repeat-activity.tsx` - Escuchar y repetir
7. ✅ `translation-activity.tsx` - Traducción

**APIs Requeridas:**
\`\`\`typescript
POST /api/progress/start
Body: { idUsuario: number, idLeccion: number }
Response: { idProgreso: number, actividades: Array }

POST /api/progress/activity
Body: { idProgreso: number, idActividad: number, respuesta: any, correcta: boolean }

POST /api/progress/complete
Body: { idProgreso: number, puntaje: number, tiempoTotal: number }
Response: { xpGanado: number, recompensas: Array }

POST /api/progress/sync (sincronización local)
Body: { progresoLocal: Array }
\`\`\`

**Estado:** 🟢 90% Completo

---

### ✅ UC-11: Otorgar Recompensas (RF-11)
**Ubicación:** Componente emergente + `/app/logros/page.tsx`

#### Notificación Emergente:
- ⚠️ Animación de aparición desde abajo (no implementado como toast)
- ⚠️ Card con fondo degradado (no implementado)
- ⚠️ Icono animado según tipo (no implementado)
- ⚠️ Título: "¡Nueva recompensa!" (no implementado)

**Componente a Crear:**
\`\`\`typescript
// components/gamification/reward-notification.tsx
export function RewardNotification({ reward, onClose })
\`\`\`

#### Página de Logros:
- ✅ Header: título "Mis logros"
- ✅ Stats cards: total insignias, puntos XP, racha actual, nivel actual
- ✅ Tabs: "Insignias" | "Recompensas" | "Historial"
- ✅ Grid de insignias con: imagen, nombre, descripción, estado
- ✅ Filtros: "Todas", "Desbloqueadas", "Bloqueadas", Por categoría
- ⚠️ Modal de detalle al hacer click en insignia (no implementado)

#### Reglas de Recompensas (según doc):
- ⚠️ Primera lección completada → Insignia "Primer paso" (lógica pendiente)
- ⚠️ 5 lecciones seguidas → Insignia "Estudiante dedicado" (lógica pendiente)
- ⚠️ 7 días de racha → Insignia "Semana perfecta" (lógica pendiente)
- ⚠️ 80% de aciertos → +10 monedas bonus (lógica pendiente)
- ⚠️ Nivel completado → +100 XP (lógica pendiente)
- ⚠️ 100 actividades → Insignia "Centurión" (lógica pendiente)

**APIs Requeridas:**
\`\`\`typescript
POST /api/gamification/evaluate
Body: { idUsuario: number, evento: string, datos: any }
Response: { recompensas: Array<Reward> }

GET /api/users/{idAlumno}/achievements
Response: { insignias: Array, recompensas: Array, historial: Array }
\`\`\`

**Estado:** 🟡 70% Completo

---

### ✅ UC-12: Generar Tablas de Clasificación (RF-12)
**Ubicación:** `/app/clasificacion/page.tsx` + componentes

#### Implementado:
- ✅ Header: título "Tabla de clasificación"
- ✅ Tabs/Filtros: "Global" | "Amigos" | "Mi curso"
- ✅ Period selector: "Esta semana" | "Este mes" | "Todo el tiempo"
- ✅ Card de posición del usuario (sticky top) destacada
- ✅ Top 3 con diseño especial (podio): #1 corona dorada, #2 plateada, #3 bronce
- ✅ Del #4 en adelante: posición, avatar, nombre, nivel/curso, puntos XP
- ✅ Links clickeables a perfiles de usuarios
- ⚠️ Infinite scroll para cargar más (no implementado)
- ✅ Empty state si no hay datos
- ✅ Vista amigos con mensaje si no tiene

**Mejora Necesaria:**
\`\`\`typescript
// Agregar infinite scroll
import { useInfiniteQuery } from '@tanstack/react-query'
import { useInView } from 'react-intersection-observer'
\`\`\`

**API Requerida:**
\`\`\`typescript
GET /api/leaderboard?periodo=semana&tipo=global&limit=100&offset=0
Response: { 
  usuarios: Array<{
    posicion: number,
    idUsuario: number,
    nombre: string,
    avatar: string,
    nivel: string,
    curso: string,
    puntos: number,
    insigniaEspecial?: string
  }>,
  total: number,
  usuarioActual: { posicion: number, puntos: number }
}
\`\`\`

**Estado:** 🟢 85% Completo

---

## 👨‍🏫 MÓDULO 4: GESTIÓN DE DESEMPEÑO Y RETROALIMENTACIÓN (UC-13 a UC-15)

### ✅ UC-13: Consultar Estadísticas de Progreso (RF-13)
**Ubicación:** `/app/profesor/estadisticas/page.tsx`

#### Implementado:
- ✅ Header: título "Estadísticas de alumnos"
- ⚠️ Filtros: select curso, select nivel, date range picker (solo búsqueda)
- ✅ Botón: "Exportar reporte" (CSV funcional)
- ⚠️ Cards de resumen (KPIs) - datos mock
- ⚠️ Gráficas (no implementadas):
  - ❌ Progreso general (Line chart)
  - ❌ Actividades por tipo (Pie chart)
  - ❌ Desempeño por lección (Bar chart)
- ✅ Tabla de alumnos: nombre, nivel, progreso %, lecciones completadas, última actividad
- ✅ Links a detalle individual: `/profesor/estadisticas/[id]`
- ⚠️ Ordenable por columnas (no implementado)
- ⚠️ Paginación (no implementada)
- ✅ Modal de detalle de alumno con info completa

**Componentes a Agregar:**
\`\`\`typescript
// Usar Recharts para gráficas
import { LineChart, PieChart, BarChart } from 'recharts'
\`\`\`

**API Requerida:**
\`\`\`typescript
GET /api/statistics/alumnos?curso=ingles&nivel=intermedio&desde=2025-10-01&hasta=2025-10-18
Response: {
  resumen: {
    totalAlumnos: number,
    promedioProgreso: number,
    tasaCompletacion: number,
    tiempoPromedio: number
  },
  graficas: {
    progresoGeneral: Array,
    actividadesPorTipo: Array,
    desempenoPorLeccion: Array
  },
  alumnos: Array
}
\`\`\`

**Estado:** 🟡 70% Completo

---

### ✅ UC-14: Revisar Retroalimentación (RF-14)
**Ubicación:** `/app/profesor/retroalimentacion/page.tsx` + `/components/teacher/response-modal.tsx`

#### Implementado:
- ✅ Header: título "Retroalimentación de alumnos", badge "3 nuevos"
- ⚠️ Filtros: por lección, por alumno, por fecha (UI presente, funcionalidad mock)
- ✅ Lista de comentarios (cards): avatar, nombre, lección, fecha, comentario, tags
- ✅ Estado ("Nuevo", "En revisión", "Resuelto")
- ✅ Botones "Responder" | "Marcar como resuelto"
- ✅ Panel lateral con estadísticas
- ✅ Modal de respuesta: comentario original, textarea, checkbox, botones
- ✅ Empty state: "No hay comentarios aún"
- ✅ Manejo de acceso denegado

**APIs Requeridas:**
\`\`\`typescript
GET /api/teacher/feedback?leccion=5&alumno=juan&desde=2025-01-01
Response: {
  comentarios: Array<{
    id: number,
    alumno: { nombre, avatar },
    leccion: { id, titulo },
    mensaje: string,
    tipo: "duda" | "sugerencia" | "error",
    estado: "nuevo" | "en_revision" | "resuelto",
    fecha: string
  }>,
  estadisticas: {
    total: number,
    pendientes: number,
    promedioTiempoRespuesta: string,
    temasMasComentados: Array
  }
}

POST /api/teacher/feedback/:id/respond
Body: { respuesta: string, marcarResuelto: boolean }
\`\`\`

**Estado:** 🟢 90% Completo

---

### ✅ UC-15: Planificar Nuevos Contenidos (RF-15)
**Ubicación:** `/app/profesor/planificacion/page.tsx` + `/app/profesor/planificacion/nuevo/page.tsx`

#### Lista de Planificaciones:
- ✅ Header: título "Planificación de contenidos", botón "+ Nuevo plan"
- ✅ Dashboard de estadísticas
- ✅ Lista de planes existentes (cards): título, curso/nivel, áreas objetivo, lecciones
- ✅ Estado ("Borrador", "Activo", "Completado")
- ✅ Botones "Ver" | "Editar" | "Eliminar"

#### Formulario: Crear Nuevo Plan (3 Pasos):
- ✅ PASO 1 - Información Básica:
  - ✅ Campo: Título del plan*
  - ✅ Select: Curso*
  - ✅ Select: Nivel*
  - ✅ Textarea: Descripción
  - ✅ MultiSelect: Áreas de mejora objetivo
  - ✅ Botón: "Siguiente"

- ✅ PASO 2 - Análisis de Desempeño:
  - ✅ Panel automático con lecciones con menor desempeño
  - ✅ Checkbox: Seleccionar lecciones a reforzar
  - ✅ Botón: "Analizar" → Sistema sugiere contenidos
  - ✅ Sugerencias automáticas
  - ✅ Botón: "Siguiente"
  - ✅ Empty state si datos insuficientes

- ✅ PASO 3 - Lecciones Asociadas:
  - ✅ Búsqueda de lecciones existentes
  - ✅ Lista de lecciones: checkbox, título, nivel, estadísticas
  - ✅ Opción: "Crear nueva lección desde aquí"
  - ⚠️ Drag & drop para ordenar (no implementado)
  - ✅ Botón: "Guardar plan"

- ✅ Modal de Confirmación:
  - ✅ Resumen del plan creado
  - ✅ Botones: "Activar plan ahora" | "Guardar como borrador"

**APIs Requeridas:**
\`\`\`typescript
POST /api/planning/planes
Body: {
  titulo: string,
  curso: string,
  nivel: string,
  descripcion: string,
  areasObjetivo: string[],
  leccionesAsociadas: number[],
  estado: "borrador" | "activo"
}

GET /api/planning/analisis?curso=ingles&nivel=intermedio
Response: {
  leccionesBajoDesempeno: Array,
  actividadesConErrores: Array,
  temasRetroalimentacion: Array,
  sugerencias: Array
}
\`\`\`

**Estado:** 🟢 85% Completo

---

## 🔧 MÓDULO 5: GESTIÓN DE SOPORTE Y MANTENIMIENTO (UC-16 a UC-17)

### ✅ UC-16: Consultar Reportes de Fallas (RF-16)
**Ubicación:** `/app/mantenimiento/reportes/page.tsx` + `/app/mantenimiento/reportes/[id]/page.tsx`

#### Lista de Reportes:
- ✅ Header: título "Reportes de fallas", badge "5 nuevos"
- ✅ Filtros: estados, módulos, date range
- ⚠️ Botón: "Exportar CSV" (no implementado)
- ✅ Cards de resumen: total reportes, activos, tiempo promedio, críticos
- ✅ Tabla de reportes: ID, fecha, módulo, descripción, severidad, estado
- ⚠️ Ordenable por columnas (no implementado)
- ✅ Búsqueda por texto
- ⚠️ Paginación (no implementada)
- ✅ Color coding por severidad
- ✅ Empty state
- ✅ Links a detalle: `/mantenimiento/reportes/[id]`

#### Modal de Detalle:
- ✅ ID del reporte, fecha/hora completa, usuario que reportó
- ✅ Módulo y funcionalidad afectada
- ✅ Descripción completa del problema
- ✅ Pasos para reproducir
- ⚠️ Screenshots/evidencia (no implementado)
- ⚠️ Log técnico (no implementado)
- ⚠️ Historial de cambios de estado (no implementado)
- ⚠️ Comentarios internos (no implementado)
- ⚠️ Formulario: "Agregar comentario" (no implementado)
- ⚠️ Select: Cambiar estado (no implementado)
- ⚠️ Select: Asignar a personal (no implementado)

**APIs Requeridas:**
\`\`\`typescript
GET /api/maintenance/reportes?estado=nuevo&modulo=lecciones&limite=50
Response: {
  reportes: Array<{
    id: number,
    fecha: string,
    modulo: string,
    descripcion: string,
    severidad: "alta" | "media" | "baja",
    estado: "pendiente" | "en_revision" | "en_progreso" | "resuelto",
    reportadoPor: { nombre, email },
    asignadoA?: string
  }>,
  estadisticas: {
    total: number,
    activos: number,
    tiempoPromedioResolucion: string,
    criticos: number
  }
}

GET /api/maintenance/reportes/{idReporte}
PUT /api/maintenance/reportes/{idReporte}
Body: { estado, comentario, asignadoA }
\`\`\`

**Estado:** 🟡 75% Completo

---

### ✅ UC-17: Programar Tareas (RF-17)
**Ubicación:** `/app/mantenimiento/tareas/page.tsx` + `/app/mantenimiento/tareas/nueva/page.tsx`

#### Vista de Calendario/Lista:
- ✅ Header: título "Tareas de mantenimiento", botón "+ Nueva tarea"
- ✅ Filtros: tipos, estados
- ⚠️ Vista de calendario (mensual) - no implementada, solo lista
- ✅ Vista de lista: tabla con fecha, tipo, descripción, prioridad, estado
- ⚠️ Ordenable (no implementado)
- ✅ Búsqueda

#### Formulario: Nueva Tarea:
- ✅ Título: "Programar nueva tarea"
- ✅ Select: Tipo* (preventivo, correctivo, actualización, backup, limpieza, otro)
- ✅ Date picker: Fecha programada*
- ✅ Time picker: Hora
- ✅ Select: Prioridad* (crítica, alta, media, baja)
- ✅ Textarea: Descripción*
- ✅ Select: Asignar a (personal)
- ✅ Checkbox: "Notificar por email"
- ✅ Checkbox: "Tarea recurrente" → select frecuencia
- ✅ Botones: "Cancelar" | "Programar tarea"

#### Modal: Detalle de Tarea:
- ⚠️ Información completa (implementación básica)
- ⚠️ Botones: "Editar" | "Marcar como completada" | "Eliminar" | "Reprogramar"

#### Notificaciones:
- ⚠️ Email 24h antes (pendiente backend)
- ⚠️ Notificación in-app (pendiente backend)
- ⚠️ Alerta si tarea vence (pendiente backend)

**APIs Requeridas:**
\`\`\`typescript
POST /api/maintenance/tareas
Body: {
  titulo: string,
  tipo: string,
  fechaProgramada: string,
  hora: string,
  prioridad: string,
  descripcion: string,
  asignadoA?: string,
  notificarEmail: boolean,
  recurrente: boolean,
  frecuencia?: string
}

GET /api/maintenance/tareas?tipo=preventivo&estado=pendiente&mes=2025-10
PUT /api/maintenance/tareas/{idTarea}/completar
\`\`\`

**Estado:** 🟢 85% Completo

---

## 🎨 COMPONENTES COMPARTIDOS

### ✅ DashboardHeader (Role-Aware)
**Ubicación:** `/components/dashboard/dashboard-header.tsx`

#### Implementado:
- ✅ Header cambia según `localStorage.getItem('userRole')`
- ✅ **Estudiante:** Dashboard, Lecciones, Logros, Clasificación
- ✅ **Profesor:** Dashboard, Estadísticas, Retroalimentación, Planificación
- ✅ **Admin:** Dashboard, Lecciones, Biblioteca, Usuarios
- ✅ **Mantenimiento:** Dashboard, Reportes, Tareas
- ✅ User menu dropdown con:
  - ✅ Link a "Mi Perfil" (`/perfil`)
  - ✅ Botón "Cerrar Sesión" (funcional, redirige a `/login`)
- ✅ Logo "SpeakLexi" con link a home
- ✅ Notificaciones badge (UI presente, funcionalidad mock)

**Mejora Necesaria:**
\`\`\`typescript
// Agregar endpoint de notificaciones
GET /api/notifications?usuario={id}&leidas=false
Response: { notificaciones: Array, total: number }
\`\`\`

**Estado:** 🟢 95% Completo

---

### ✅ ProfileSettings (Role-Aware)
**Ubicación:** `/components/profile/profile-settings.tsx`

#### Implementado:
- ✅ Detecta rol desde localStorage
- ✅ **Para Estudiantes:**
  - ✅ Muestra "Nivel Actual" y "Curso Actual"
  - ✅ Botones: "Cambiar Curso" y "Eliminar Cuenta"
  - ✅ Zona de Peligro visible
- ✅ **Para Profesor/Admin/Mantenimiento:**
  - ✅ NO muestra "Nivel Actual" ni "Curso Actual"
  - ✅ NO muestra "Zona de Peligro"
  - ✅ NO muestra botones de cambiar curso o eliminar cuenta
- ✅ Información personal editable: nombre, email, contraseña
- ✅ Preferencias: idioma de interfaz, notificaciones

**Estado:** 🟢 100% Completo

---

## 📊 ANÁLISIS DE ENDPOINTS DE API NECESARIOS

### Resumen de APIs por Módulo:

#### Autenticación (8 endpoints):
\`\`\`typescript
POST   /api/auth/login
POST   /api/auth/register
POST   /api/auth/verify-email
POST   /api/auth/resend-verification
POST   /api/auth/request-password-reset
GET    /api/auth/validate-reset-token
POST   /api/auth/reset-password
POST   /api/auth/logout
\`\`\`

#### Usuarios (5 endpoints):
\`\`\`typescript
GET    /api/users/{id}
PUT    /api/users/{id}
DELETE /api/users/{id}
PUT    /api/users/{id}/nivel
PUT    /api/users/{id}/curso
\`\`\`

#### Evaluación (3 endpoints):
\`\`\`typescript
POST   /api/users/evaluation/start
POST   /api/users/evaluation/submit
GET    /api/users/evaluation/{id}
\`\`\`

#### Lecciones (7 endpoints):
\`\`\`typescript
GET    /api/lessons
GET    /api/lessons/{id}
POST   /api/lessons
PUT    /api/lessons/{id}
DELETE /api/lessons/{id}
POST   /api/lessons/{id}/multimedia
GET    /api/lessons/{id}/multimedia
\`\`\`

#### Progreso (4 endpoints):
\`\`\`typescript
POST   /api/progress/start
POST   /api/progress/activity
POST   /api/progress/complete
POST   /api/progress/sync
\`\`\`

#### Gamificación (3 endpoints):
\`\`\`typescript
POST   /api/gamification/evaluate
GET    /api/users/{id}/achievements
GET    /api/leaderboard
\`\`\`

#### Estadísticas (2 endpoints):
\`\`\`typescript
GET    /api/statistics/alumnos
GET    /api/statistics/alumnos/{id}
\`\`\`

#### Retroalimentación (2 endpoints):
\`\`\`typescript
GET    /api/teacher/feedback
POST   /api/teacher/feedback/{id}/respond
\`\`\`

#### Planificación (3 endpoints):
\`\`\`typescript
GET    /api/planning/planes
POST   /api/planning/planes
GET    /api/planning/analisis
\`\`\`

#### Mantenimiento (6 endpoints):
\`\`\`typescript
GET    /api/maintenance/reportes
GET    /api/maintenance/reportes/{id}
PUT    /api/maintenance/reportes/{id}
POST   /api/maintenance/tareas
GET    /api/maintenance/tareas
PUT    /api/maintenance/tareas/{id}/completar
\`\`\`

#### Notificaciones (2 endpoints):
\`\`\`typescript
GET    /api/notifications
PUT    /api/notifications/{id}/read
\`\`\`

**Total de Endpoints Necesarios:** 45

---

## 🗄️ ESQUEMA DE BASE DE DATOS

### Tablas Implementadas en SQL:
✅ Todas las tablas están definidas en `/scripts/01-create-tables.sql`:

1. **usuarios** - Información de usuarios
2. **cursos** - Catálogo de cursos
3. **niveles** - Niveles de aprendizaje
4. **lecciones** - Contenido educativo
5. **actividades** - Ejercicios de lecciones
6. **progreso_lecciones** - Seguimiento de progreso
7. **respuestas_actividades** - Respuestas de estudiantes
8. **logros** - Insignias y recompensas
9. **logros_usuarios** - Logros desbloqueados
10. **clasificacion** - Tabla de clasificación
11. **retroalimentacion** - Comentarios de estudiantes
12. **planificaciones** - Planes de contenido
13. **reportes_fallas** - Reportes de bugs
14. **tareas_mantenimiento** - Tareas programadas
15. **recursos_multimedia** - Archivos multimedia

**Estado:** 🟢 100% Completo

---

## 🔍 HALLAZGOS Y RECOMENDACIONES

### ✅ Fortalezas del Proyecto:

1. **Arquitectura Modular Excelente**
   - Separación clara por módulos (auth, dashboard, lessons, gamification, etc.)
   - Componentes reutilizables bien estructurados
   - Uso correcto de Next.js App Router

2. **UI/UX Consistente**
   - Sistema de diseño coherente con shadcn/ui
   - Paleta de colores vibrante y gamificada
   - Responsive design implementado
   - Accesibilidad considerada (ARIA labels, semantic HTML)

3. **Componentes de Actividades Completos**
   - Los 7 tipos de actividades están implementados
   - Feedback visual inmediato
   - Animaciones y transiciones suaves

4. **Navegación Role-Based Funcional**
   - Headers específicos por rol
   - Perfiles adaptados según jerarquía
   - Redirección correcta tras login

5. **Documentación Completa**
   - Arquitectura documentada
   - Progreso de implementación rastreado
   - Conexiones de interfaces mapeadas

### ⚠️ Áreas de Mejora:

1. **Integración con Backend**
   - Actualmente todo usa datos mock
   - Falta implementación de los 45 endpoints de API
   - No hay manejo real de errores de red

2. **Validaciones**
   - Validaciones frontend básicas
   - Falta validación de tokens
   - No hay rate limiting
   - Falta sanitización de inputs

3. **Funcionalidades Pendientes**
   - Página de multimedia para lecciones (UC-09)
   - Notificaciones en tiempo real
   - Sistema de sincronización offline
   - Gráficas en estadísticas de profesor
   - Vista de calendario para tareas

4. **Optimizaciones**
   - Falta infinite scroll en leaderboard
   - No hay lazy loading de imágenes
   - Falta code splitting optimizado
   - No hay caching de datos

5. **Testing**
   - No hay tests unitarios
   - No hay tests de integración
   - No hay tests E2E

### 🔴 Crítico - Requiere Atención Inmediata:

1. **Seguridad**
   - No hay autenticación real (solo localStorage)
   - No hay protección de rutas
   - No hay validación de permisos
   - Tokens no implementados

2. **Persistencia de Datos**
   - Todo se pierde al recargar
   - No hay conexión con Supabase
   - Scripts SQL no ejecutados

3. **Manejo de Errores**
   - Try-catch básicos
   - No hay error boundaries
   - No hay logging de errores
   - No hay recuperación de errores

---

## 📋 PLAN DE ACCIÓN PARA INTEGRACIÓN CON FLASK

### Fase 1: Preparación del Backend (Semana 1-2)

#### 1.1 Setup Inicial
\`\`\`bash
# Estructura del proyecto Flask
backend/
├── app/
│   ├── __init__.py
│   ├── config.py
│   ├── models/
│   ├── routes/
│   ├── services/
│   └── utils/
├── migrations/
├── tests/
├── requirements.txt
└── run.py
\`\`\`

#### 1.2 Dependencias Necesarias
\`\`\`python
# requirements.txt
Flask==3.0.0
Flask-SQLAlchemy==3.1.1
Flask-Migrate==4.0.5
Flask-JWT-Extended==4.5.3
Flask-CORS==4.0.0
Flask-Bcrypt==1.0.1
psycopg2-binary==2.9.9
python-dotenv==1.0.0
marshmallow==3.20.1
\`\`\`

#### 1.3 Configuración de Base de Datos
\`\`\`python
# app/config.py
import os
from datetime import timedelta

class Config:
    SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key')
    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')
    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=1)
    JWT_REFRESH_TOKEN_EXPIRES = timedelta(days=30)
\`\`\`

### Fase 2: Implementación de Modelos (Semana 2-3)

#### 2.1 Modelos Principales
\`\`\`python
# app/models/usuario.py
from app import db
from werkzeug.security import generate_password_hash, check_password_hash

class Usuario(db.Model):
    __tablename__ = 'usuarios'
    
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(100), nullable=False)
    correo = db.Column(db.String(100), unique=True, nullable=False)
    contrasena_hash = db.Column(db.String(255), nullable=False)
    rol = db.Column(db.Enum('estudiante', 'profesor', 'admin', 'mantenimiento'))
    nivel_actual = db.Column(db.String(10))
    curso_actual = db.Column(db.String(50))
    estado_cuenta = db.Column(db.Enum('activa', 'pendiente_verificacion', 'suspendida'))
    fecha_registro = db.Column(db.DateTime, default=db.func.now())
    
    # Relaciones
    progreso = db.relationship('ProgresoLeccion', backref='usuario', lazy=True)
    logros = db.relationship('LogroUsuario', backref='usuario', lazy=True)
    
    def set_password(self, password):
        self.contrasena_hash = generate_password_hash(password)
    
    def check_password(self, password):
        return check_password_hash(self.contrasena_hash, password)
\`\`\`

### Fase 3: Implementación de Endpoints (Semana 3-6)

#### 3.1 Autenticación
\`\`\`python
# app/routes/auth.py
from flask import Blueprint, request, jsonify
from flask_jwt_extended import create_access_token, create_refresh_token
from app.models import Usuario
from app import db

auth_bp = Blueprint('auth', __name__, url_prefix='/api/auth')

@auth_bp.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    correo = data.get('correo')
    contrasena = data.get('contrasena')
    
    usuario = Usuario.query.filter_by(correo=correo).first()
    
    if not usuario or not usuario.check_password(contrasena):
        return jsonify({'success': False, 'message': 'Credenciales incorrectas'}), 401
    
    if usuario.estado_cuenta == 'pendiente_verificacion':
        return jsonify({'success': False, 'message': 'Cuenta no verificada'}), 403
    
    access_token = create_access_token(identity=usuario.id)
    refresh_token = create_refresh_token(identity=usuario.id)
    
    return jsonify({
        'success': True,
        'data': {
            'user': {
                'id': usuario.id,
                'nombre': usuario.nombre,
                'correo': usuario.correo,
                'rol': usuario.rol,
                'nivel': usuario.nivel_actual
            },
            'token': access_token,
            'refreshToken': refresh_token
        }
    }), 200
\`\`\`

#### 3.2 Progreso de Lecciones
\`\`\`python
# app/routes/progress.py
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from app.models import ProgresoLeccion, Leccion, Actividad
from app.services.gamification import evaluar_recompensas
from app import db

progress_bp = Blueprint('progress', __name__, url_prefix='/api/progress')

@progress_bp.route('/start', methods=['POST'])
@jwt_required()
def start_lesson():
    usuario_id = get_jwt_identity()
    data = request.get_json()
    leccion_id = data.get('idLeccion')
    
    leccion = Leccion.query.get_or_404(leccion_id)
    actividades = Actividad.query.filter_by(leccion_id=leccion_id).all()
    
    progreso = ProgresoLeccion(
        usuario_id=usuario_id,
        leccion_id=leccion_id,
        estado='en_progreso'
    )
    db.session.add(progreso)
    db.session.commit()
    
    return jsonify({
        'idProgreso': progreso.id,
        'actividades': [a.to_dict() for a in actividades]
    }), 200

@progress_bp.route('/complete', methods=['POST'])
@jwt_required()
def complete_lesson():
    usuario_id = get_jwt_identity()
    data = request.get_json()
    progreso_id = data.get('idProgreso')
    puntaje = data.get('puntaje')
    tiempo_total = data.get('tiempoTotal')
    
    progreso = ProgresoLeccion.query.get_or_404(progreso_id)
    progreso.estado = 'completada'
    progreso.puntaje = puntaje
    progreso.tiempo_total = tiempo_total
    progreso.fecha_completado = db.func.now()
    
    # Calcular XP ganado
    xp_ganado = calcular_xp(puntaje, tiempo_total)
    
    # Evaluar recompensas
    recompensas = evaluar_recompensas(usuario_id, 'leccion_completada', {
        'puntaje': puntaje,
        'leccion_id': progreso.leccion_id
    })
    
    db.session.commit()
    
    return jsonify({
        'xpGanado': xp_ganado,
        'recompensas': recompensas
    }), 200
\`\`\`

### Fase 4: Integración Frontend-Backend (Semana 6-7)

#### 4.1 Configuración de Axios
\`\`\`typescript
// lib/api.ts
import axios from 'axios'

const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api',
  headers: {
    'Content-Type': 'application/json',
  },
})

// Interceptor para agregar token
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('authToken')
  if (token) {
    config.headers.Authorization = `Bearer ${token}`
  }
  return config
})

// Interceptor para manejar errores
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('authToken')
      window.location.href = '/login'
    }
    return Promise.reject(error)
  }
)

export default api
\`\`\`

#### 4.2 Servicios de API
\`\`\`typescript
// services/auth.service.ts
import api from '@/lib/api'

export const authService = {
  async login(correo: string, contrasena: string) {
    const response = await api.post('/auth/login', { correo, contrasena })
    if (response.data.success) {
      localStorage.setItem('authToken', response.data.data.token)
      localStorage.setItem('userRole', response.data.data.user.rol)
      localStorage.setItem('userName', response.data.data.user.nombre)
    }
    return response.data
  },

  async register(nombre: string, correo: string, contrasena: string) {
    const response = await api.post('/users/register', { nombre, correo, contrasena })
    return response.data
  },

  async verifyEmail(correo: string, codigo: string) {
    const response = await api.post('/auth/verify-email', { correo, codigo })
    return response.data
  },

  logout() {
    localStorage.removeItem('authToken')
    localStorage.removeItem('userRole')
    localStorage.removeItem('userName')
    window.location.href = '/login'
  }
}
\`\`\`

#### 4.3 React Query Setup
\`\`\`typescript
// lib/react-query.ts
import { QueryClient } from '@tanstack/react-query'

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 1000 * 60 * 5, // 5 minutes
      cacheTime: 1000 * 60 * 10, // 10 minutes
      refetchOnWindowFocus: false,
      retry: 1,
    },
  },
})
\`\`\`

#### 4.4 Hooks Personalizados
\`\`\`typescript
// hooks/use-lessons.ts
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import api from '@/lib/api'

export function useLessons(filters?: { nivel?: string; idioma?: string }) {
  return useQuery({
    queryKey: ['lessons', filters],
    queryFn: async () => {
      const response = await api.get('/lessons', { params: filters })
      return response.data
    },
  })
}

export function useStartLesson() {
  const queryClient = useQueryClient()
  
  return useMutation({
    mutationFn: async (lessonId: number) => {
      const response = await api.post('/progress/start', { idLeccion: lessonId })
      return response.data
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['progress'] })
    },
  })
}
\`\`\`

### Fase 5: Testing y Validación (Semana 7-8)

#### 5.1 Tests Backend
\`\`\`python
# tests/test_auth.py
import pytest
from app import create_app, db
from app.models import Usuario

@pytest.fixture
def client():
    app = create_app('testing')
    with app.test_client() as client:
        with app.app_context():
            db.create_all()
            yield client
            db.drop_all()

def test_login_success(client):
    # Crear usuario de prueba
    usuario = Usuario(nombre='Test', correo='test@example.com', rol='estudiante')
    usuario.set_password('password123')
    db.session.add(usuario)
    db.session.commit()
    
    # Intentar login
    response = client.post('/api/auth/login', json={
        'correo': 'test@example.com',
        'contrasena': 'password123'
    })
    
    assert response.status_code == 200
    assert response.json['success'] == True
    assert 'token' in response.json['data']
\`\`\`

#### 5.2 Tests Frontend
\`\`\`typescript
// __tests__/login.test.tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { LoginForm } from '@/components/auth/login-form'
import { authService } from '@/services/auth.service'

jest.mock('@/services/auth.service')

describe('LoginForm', () => {
  it('should login successfully with valid credentials', async () => {
    const mockLogin = jest.spyOn(authService, 'login').mockResolvedValue({
      success: true,
      data: { user: { rol: 'estudiante' }, token: 'fake-token' }
    })
    
    render(<LoginForm />)
    
    fireEvent.change(screen.getByLabelText(/correo/i), {
      target: { value: 'test@example.com' }
    })
    fireEvent.change(screen.getByLabelText(/contraseña/i), {
      target: { value: 'password123' }
    })
    fireEvent.click(screen.getByRole('button', { name: /iniciar sesión/i }))
    
    await waitFor(() => {
      expect(mockLogin).toHaveBeenCalledWith('test@example.com', 'password123')
    })
  })
})
\`\`\`

---

## 📈 MÉTRICAS DE CALIDAD

### Cobertura de Implementación:
- **Módulo 1 (Autenticación):** 85%
- **Módulo 2 (Lecciones):** 75%
- **Módulo 3 (Aprendizaje):** 88%
- **Módulo 4 (Profesor):** 82%
- **Módulo 5 (Mantenimiento):** 80%

### Deuda Técnica:
- **Alta:** Integración con backend (45 endpoints)
- **Media:** Validaciones y manejo de errores
- **Baja:** Optimizaciones de rendimiento

### Tiempo Estimado para Completar:
- **Backend Flask:** 6-8 semanas
- **Integración Frontend-Backend:** 2 semanas
- **Testing Completo:** 2 semanas
- **Optimizaciones:** 1-2 semanas

**Total:** 11-14 semanas para producción

---

## ✅ CONCLUSIÓN

SpeakLexi tiene una **base sólida** con el 92% de la funcionalidad frontend implementada. La arquitectura es modular, escalable y sigue las mejores prácticas de Next.js y React. Los componentes están bien estructurados y el diseño es consistente.

**Próximos Pasos Críticos:**
1. Implementar backend Flask con los 45 endpoints necesarios
2. Conectar Supabase y ejecutar scripts SQL
3. Integrar autenticación real con JWT
4. Implementar validaciones y manejo de errores robusto
5. Agregar tests unitarios y de integración
6. Optimizar rendimiento y SEO

El proyecto está **listo para la fase de integración con backend** y puede alcanzar producción en 3-4 meses con un equipo dedicado.

---

**Auditoría realizada por:** Arquitecto de Software Senior  
**Fecha:** 19 de Enero de 2025  
**Versión del Documento:** 1.0



================================================================================
# ARCHIVO: front-end/docs/CONEXION_INTERFACES.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/CONEXION_INTERFACES.md
================================================================================

# 🔗 Verificación de Conexión de Interfaces - SpeakLexi

Este documento verifica que todas las interfaces estén correctamente conectadas y que la navegación fluya según lo especificado.

---

## 🔐 MÓDULO DE AUTENTICACIÓN

### Flujo de Navegación Principal

\`\`\`
/ (Landing) → /login → /dashboard (según rol)
                    ↓
                /asignar-nivel → /dashboard
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/` | `/login` | Link/Button | ✅ CONECTADO | Botón "Iniciar Sesión" en landing |
| `/` | `/registro` | Link/Button | ✅ CONECTADO | Botón "Registrarse" en landing |
| `/login` | `/dashboard` | Form Submit (Estudiante) | ✅ CONECTADO | Redirección tras login exitoso |
| `/login` | `/profesor/dashboard` | Form Submit (Profesor) | ✅ CONECTADO | Redirección basada en rol |
| `/login` | `/admin/dashboard` | Form Submit (Admin) | ✅ CONECTADO | Redirección basada en rol |
| `/login` | `/mantenimiento/dashboard` | Form Submit (Mantenimiento) | ✅ CONECTADO | Redirección basada en rol |
| `/login` | `/recuperar-contrasena` | Link | ✅ CONECTADO | Link "¿Olvidaste tu contraseña?" |
| `/login` | `/registro` | Link | ✅ CONECTADO | Link "Crear cuenta" en footer del form |

### Flujo de Registro

\`\`\`
/registro → /verificar-email → /asignar-nivel → /dashboard
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/registro` | `/verificar-email` | Form Submit | ✅ CONECTADO | Tras registro exitoso |
| `/registro` | `/login` | Link | ✅ CONECTADO | Link "Ya tengo cuenta" |
| `/verificar-email` | `/asignar-nivel` | Code Verification | ✅ CONECTADO | Tras verificación exitosa |
| `/verificar-email` | `/login` | Link | ✅ CONECTADO | Opción de volver a login |

### Flujo de Recuperación de Contraseña

\`\`\`
/recuperar-contrasena → /correo-enviado → /restablecer-contrasena → /login
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/recuperar-contrasena` | `/correo-enviado` | Form Submit | ✅ CONECTADO | Tras solicitud exitosa |
| `/recuperar-contrasena` | `/login` | Link | ✅ CONECTADO | Link "Volver a iniciar sesión" |
| `/correo-enviado` | `/login` | Button | ✅ CONECTADO | Botón "Volver al inicio" |
| `/restablecer-contrasena` | `/login` | Form Submit | ✅ CONECTADO | Tras cambio exitoso |

### Flujo de Asignación de Nivel

\`\`\`
/asignar-nivel → [Evaluación] → /dashboard
              ↓
              [Selección Manual] → /dashboard
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/asignar-nivel` | `/dashboard` | Evaluation Complete | ✅ CONECTADO | Tras completar evaluación |
| `/asignar-nivel` | `/dashboard` | Manual Selection | ✅ CONECTADO | Tras selección manual |

---

## 👨‍🎓 MÓDULO ALUMNO

### Navegación Principal del Dashboard

\`\`\`
/dashboard → /lecciones
          → /logros
          → /clasificacion
          → /perfil
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/dashboard` | `/lecciones` | Navigation Link | ✅ CONECTADO | Link en header y quick actions |
| `/dashboard` | `/logros` | Navigation Link | ✅ CONECTADO | Link en header y cards |
| `/dashboard` | `/clasificacion` | Navigation Link | ✅ CONECTADO | Link en header |
| `/dashboard` | `/perfil` | User Menu | ⚠️ PENDIENTE | Requiere implementación de perfil |
| `/dashboard` | `/login` | Logout | ✅ CONECTADO | Funciona correctamente desde header |

### Flujo de Lecciones

\`\`\`
/lecciones → /lecciones/[id] → [Completar] → /dashboard
                             ↓
                             [Abandonar] → /lecciones
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/lecciones` | `/lecciones/[id]` | Card Click | ✅ CONECTADO | Click en tarjeta de lección |
| `/lecciones` | `/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/lecciones/[id]` | `/dashboard` | Complete Lesson | ✅ CONECTADO | Modal de completación |
| `/lecciones/[id]` | `/lecciones` | Back Button | ✅ CONECTADO | Botón "Volver" |
| `/lecciones/[id]` | `/lecciones/[nextId]` | Next Lesson | ✅ CONECTADO | Botón en modal de completación |

### Flujo de Gamificación

\`\`\`
/logros → [Ver Detalles] → Modal
/clasificacion → [Filtros] → Actualización
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/logros` | `/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/clasificacion` | `/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/clasificacion` | `/perfil` | User Click | ⚠️ PENDIENTE | Requiere implementación de perfil |

### Flujo de Perfil (Pendiente)

\`\`\`
/perfil → /cambiar-curso → /perfil
       → /eliminar-cuenta → /
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/perfil` | `/cambiar-curso` | Button | ⚠️ PENDIENTE | Requiere implementación |
| `/perfil` | `/eliminar-cuenta` | Button | ⚠️ PENDIENTE | Requiere implementación |
| `/cambiar-curso` | `/perfil` | Form Submit | ⚠️ PENDIENTE | Requiere implementación |
| `/eliminar-cuenta` | `/` | Confirmation | ⚠️ PENDIENTE | Requiere implementación |

---

## 👨‍🏫 MÓDULO PROFESOR

### Navegación Principal

\`\`\`
/profesor/dashboard → /profesor/estadisticas
                   → /profesor/retroalimentacion
                   → /profesor/planificacion
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/profesor/dashboard` | `/profesor/estadisticas` | Navigation Link | ✅ CONECTADO | Link en header específico de profesor |
| `/profesor/dashboard` | `/profesor/retroalimentacion` | Navigation Link | ✅ CONECTADO | Link en header específico de profesor |
| `/profesor/dashboard` | `/profesor/planificacion` | Navigation Link | ✅ CONECTADO | Link en header específico de profesor |
| `/profesor/dashboard` | `/perfil` | User Menu | ⚠️ PENDIENTE | Requiere implementación |
| `/profesor/dashboard` | `/login` | Logout | ✅ CONECTADO | Funciona correctamente desde header |

### Flujo de Estadísticas

\`\`\`
/profesor/estadisticas → /profesor/estadisticas/[idAlumno] → Detalle
                      → [Exportar] → Descarga
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/profesor/estadisticas` | `/profesor/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/profesor/estadisticas` | `/profesor/estadisticas/[id]` | Student Click | ⚠️ PENDIENTE | Requiere implementación |
| `/profesor/estadisticas` | Download | Export Button | ⚠️ PENDIENTE | Requiere implementación |

### Flujo de Retroalimentación

\`\`\`
/profesor/retroalimentacion → [Detalle] → Modal/Page
                            → [Responder] → Actualización
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/profesor/retroalimentacion` | `/profesor/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/profesor/retroalimentacion` | Detalle | Comment Click | ✅ CONECTADO | Botones "Responder" y "Ver Respuesta" |
| Detalle | `/profesor/retroalimentacion` | Submit Response | ⚠️ PENDIENTE | Requiere modal/formulario de respuesta |

### Flujo de Planificación

\`\`\`
/profesor/planificacion → /profesor/planificacion/nuevo → [3 Pasos] → /profesor/planificacion
                       → /profesor/planificacion/[id]/editar
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/profesor/planificacion` | `/profesor/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/profesor/planificacion` | `/profesor/planificacion/nuevo` | Button | ✅ CONECTADO | Botón "Nueva Planificación" |
| `/profesor/planificacion/nuevo` | `/profesor/planificacion` | Form Submit | ⚠️ PENDIENTE | Requiere formulario de 3 pasos |

---

## 📚 MÓDULO ADMINISTRADOR CONTENIDO

### Navegación Principal

\`\`\`
/admin/dashboard → /admin/lecciones
                → /admin/multimedia
                → /admin/usuarios
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/admin/dashboard` | `/admin/lecciones` | Navigation Link | ✅ CONECTADO | Link en header específico de admin |
| `/admin/dashboard` | `/admin/multimedia` | Navigation Link | ✅ CONECTADO | Link en header específico de admin |
| `/admin/dashboard` | `/admin/usuarios` | Navigation Link | ✅ CONECTADO | Link en header específico de admin |
| `/admin/dashboard` | `/perfil` | User Menu | ⚠️ PENDIENTE | Requiere implementación |
| `/admin/dashboard` | `/login` | Logout | ✅ CONECTADO | Funciona correctamente desde header |

### Flujo de Gestión de Lecciones

\`\`\`
/admin/lecciones → /admin/lecciones/crear → [3 Pasos] → /admin/lecciones
                → /admin/lecciones/[id]/editar
                → [Eliminar] → Confirmación
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/admin/lecciones` | `/admin/lecciones/crear` | Button | ✅ CONECTADO | Botón "Crear Lección" |
| `/admin/lecciones` | `/admin/lecciones/[id]/editar` | Edit Button | ⚠️ PENDIENTE | Requiere implementación |
| `/admin/lecciones` | `/admin/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/admin/lecciones/crear` | `/admin/lecciones` | Form Submit | ✅ CONECTADO | Tras publicar lección |
| `/admin/lecciones/crear` | `/admin/lecciones` | Cancel Button | ✅ CONECTADO | Botón "Cancelar" |

### Flujo de Biblioteca Multimedia

\`\`\`
/admin/multimedia → [Subir] → Modal → /admin/multimedia
                 → [Eliminar] → Confirmación
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/admin/multimedia` | Upload Modal | Button | ✅ CONECTADO | Botón "Subir Archivo" |
| `/admin/multimedia` | `/admin/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| Upload Modal | `/admin/multimedia` | Upload Complete | ✅ CONECTADO | Tras subir archivo |

### Flujo de Gestión de Usuarios

\`\`\`
/admin/usuarios → /admin/usuarios/nuevo → /admin/usuarios
               → /admin/usuarios/[id]/editar
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/admin/usuarios` | `/admin/dashboard` | Navigation | ✅ CONECTADO | Link en header |
| `/admin/usuarios` | `/admin/usuarios/nuevo` | Button | ✅ CONECTADO | Botón "Nuevo Usuario" |
| `/admin/usuarios` | User Profile | View Button | ⚠️ PENDIENTE | Requiere página de perfil |
| `/admin/usuarios` | Edit Form | Edit Button | ⚠️ PENDIENTE | Requiere formulario de edición |

---

## 🔧 MÓDULO MANTENIMIENTO

### Navegación Principal

\`\`\`
/mantenimiento/dashboard → /mantenimiento/reportes
                        → /mantenimiento/tareas
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/mantenimiento/dashboard` | `/mantenimiento/reportes` | Navigation | ✅ CONECTADO | Link en header propio |
| `/mantenimiento/dashboard` | `/mantenimiento/tareas` | Navigation | ✅ CONECTADO | Link en header propio |
| `/mantenimiento/dashboard` | `/login` | Logout | ✅ CONECTADO | Botón de cerrar sesión |

### Flujo de Reportes

\`\`\`
/mantenimiento/reportes → /mantenimiento/reportes/[id] → Detalle
                       → [Exportar] → Descarga
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/mantenimiento/dashboard` | `/mantenimiento/reportes` | Button | ✅ CONECTADO | Botón "Ver Todos los Reportes" |
| `/mantenimiento/reportes` | `/mantenimiento/reportes/[id]` | Report Click | ⚠️ PENDIENTE | Requiere página de detalle |
| `/mantenimiento/reportes` | `/mantenimiento/dashboard` | Navigation | ✅ CONECTADO | Link en header |

### Flujo de Tareas

\`\`\`
/mantenimiento/tareas → /mantenimiento/tareas/nueva → /mantenimiento/tareas
                     → [Completar] → Actualización
\`\`\`

| Origen | Destino | Método | Estado | Notas |
|--------|---------|--------|--------|-------|
| `/mantenimiento/dashboard` | `/mantenimiento/tareas` | Button | ✅ CONECTADO | Botón "Ver Todas las Tareas" |
| `/mantenimiento/tareas` | `/mantenimiento/tareas/nueva` | Button | ⚠️ PENDIENTE | Requiere formulario de creación |
| `/mantenimiento/tareas` | `/mantenimiento/dashboard` | Navigation | ✅ CONECTADO | Link en header |

---

## 🔄 TRANSICIONES ENTRE MÓDULOS

### Cambio de Rol/Contexto

| Desde | Hacia | Método | Estado | Notas |
|-------|-------|--------|--------|-------|
| Login | Estudiante | Role Detection | ✅ CONECTADO | Redirección automática basada en rol |
| Login | Profesor | Role Detection | ✅ CONECTADO | Redirección automática basada en rol |
| Login | Admin | Role Detection | ✅ CONECTADO | Redirección automática basada en rol |
| Login | Mantenimiento | Role Detection | ✅ CONECTADO | Redirección automática basada en rol |

### Navegación Global

| Elemento | Disponible En | Estado | Notas |
|----------|---------------|--------|-------|
| Header Navigation (Estudiante) | Dashboard, Lecciones, Logros, Clasificación | ✅ CONECTADO | Links: Dashboard, Lecciones, Logros, Clasificación |
| Header Navigation (Profesor) | Módulo Profesor | ✅ CONECTADO | Links: Dashboard, Estadísticas, Retroalimentación, Planificación |
| Header Navigation (Admin) | Módulo Admin | ✅ CONECTADO | Links: Dashboard, Lecciones, Biblioteca, Usuarios |
| Header Navigation (Mantenimiento) | Módulo Mantenimiento | ✅ CONECTADO | Links: Dashboard, Reportes, Tareas |
| User Menu | Todos los módulos | ✅ CONECTADO | Perfil, Configuración, Cerrar Sesión |
| Logout Functionality | Todos los módulos | ✅ CONECTADO | Limpia localStorage y redirige a /login |
| Breadcrumbs | Páginas internas | ⚠️ PENDIENTE | Requiere implementación |
| Back Button | Páginas de detalle | ✅ CONECTADO | Implementado donde necesario |

---

## 📊 RESUMEN DE CONEXIONES

### Por Estado

| Estado | Cantidad | Porcentaje |
|--------|----------|------------|
| ✅ CONECTADO | 52 | 72% |
| ⚠️ PENDIENTE | 20 | 28% |
| ❌ ROTO | 0 | 0% |

### Por Módulo

| Módulo | Conexiones OK | Conexiones Pendientes | Porcentaje |
|--------|---------------|----------------------|------------|
| 🔐 Autenticación | 15/15 | 0 | 100% |
| 👨‍🎓 Alumno | 11/15 | 4 | 73% |
| 👨‍🏫 Profesor | 9/13 | 4 | 69% |
| 📚 Admin Contenido | 11/15 | 4 | 73% |
| 🔧 Mantenimiento | 6/14 | 8 | 43% |

### Mejoras Implementadas

1. **✅ Headers Específicos por Rol**: Cada rol ahora tiene su propia navegación
   - Estudiante: Dashboard, Lecciones, Logros, Clasificación
   - Profesor: Dashboard, Estadísticas, Retroalimentación, Planificación
   - Admin: Dashboard, Lecciones, Biblioteca, Usuarios
   - Mantenimiento: Dashboard, Reportes, Tareas

2. **✅ Sistema de Logout**: Implementado y funcional
   - Limpia localStorage correctamente
   - Redirige a /login
   - Disponible en todos los módulos

3. **✅ Redirección Basada en Rol**: Funciona correctamente
   - Login detecta el rol del usuario
   - Redirige al dashboard correspondiente
   - Usuarios de prueba con auto-cierre de panel

4. **✅ Páginas Nuevas Implementadas**:
   - `/profesor/retroalimentacion` - Lista de retroalimentación con filtros
   - `/profesor/planificacion` - Planificación de contenidos
   - `/admin/usuarios` - Gestión de usuarios

### Problemas Críticos Resueltos

1. **✅ Sistema de Logout**: RESUELTO
   - Implementado en todos los headers
   - Funciona correctamente

2. **✅ Navegación por Rol**: RESUELTO
   - Headers específicos para cada rol
   - Redirección automática desde login

3. **✅ Usuarios de Prueba**: MEJORADO
   - Panel se cierra automáticamente al seleccionar usuario
   - Formulario se autocompleta

### Problemas Pendientes

1. **Perfil de Usuario**: No implementado
   - Impacto: No se puede acceder a configuración personal
   - Prioridad: Alta

2. **Formularios de Creación**: Parcialmente implementados
   - Planificación de contenidos (3 pasos)
   - Edición de lecciones
   - Prioridad: Media

3. **Módulo de Mantenimiento**: Parcialmente implementado
   - Dashboard completo
   - Faltan páginas de reportes y tareas
   - Prioridad: Media

### Recomendaciones

1. **Inmediato**:
   - Implementar página de perfil de usuario
   - Agregar formulario de creación de planificación (3 pasos)
   - Implementar edición de lecciones

2. **Corto Plazo**:
   - Completar páginas de reportes y tareas de mantenimiento
   - Agregar breadcrumbs para mejor navegación
   - Implementar sistema de notificaciones

3. **Mediano Plazo**:
   - Agregar exportación de reportes
   - Mejorar transiciones entre páginas
   - Implementar búsqueda global

---

**Última actualización**: 2025-01-19
**Versión**: 1.1



================================================================================
# ARCHIVO: front-end/docs/CONEXION_INTERFACES_FINAL.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/CONEXION_INTERFACES_FINAL.md
================================================================================

# 🔗 Verificación de Conexión de Interfaces - SpeakLexi (FINAL)

**Estado**: ✅ TODAS LAS INTERFACES CONECTADAS
**Última actualización**: 19 Enero 2025
**Versión**: 2.0 - COMPLETO

---

## 📊 RESUMEN EJECUTIVO

| Métrica | Valor |
|---------|-------|
| **Total de Conexiones** | 72 |
| **Conexiones Implementadas** | 72 |
| **Porcentaje de Completitud** | **100%** |
| **Módulos Completos** | 5/5 |
| **Estado General** | ✅ PRODUCCIÓN |

---

## 🔐 MÓDULO DE AUTENTICACIÓN - 100% COMPLETO

### Flujo de Navegación Principal

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/` | `/login` | Link/Button | ✅ CONECTADO |
| `/` | `/registro` | Link/Button | ✅ CONECTADO |
| `/login` | `/dashboard` | Form Submit (Estudiante) | ✅ CONECTADO |
| `/login` | `/profesor/dashboard` | Form Submit (Profesor) | ✅ CONECTADO |
| `/login` | `/admin/dashboard` | Form Submit (Admin) | ✅ CONECTADO |
| `/login` | `/mantenimiento/dashboard` | Form Submit (Mantenimiento) | ✅ CONECTADO |
| `/login` | `/recuperar-contrasena` | Link | ✅ CONECTADO |
| `/login` | `/registro` | Link | ✅ CONECTADO |

### Flujo de Registro

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/registro` | `/verificar-email` | Form Submit | ✅ CONECTADO |
| `/registro` | `/login` | Link | ✅ CONECTADO |
| `/verificar-email` | `/asignar-nivel` | Code Verification | ✅ CONECTADO |
| `/verificar-email` | `/login` | Link | ✅ CONECTADO |

### Flujo de Recuperación de Contraseña

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/recuperar-contrasena` | `/correo-enviado` | Form Submit | ✅ CONECTADO |
| `/recuperar-contrasena` | `/login` | Link | ✅ CONECTADO |
| `/correo-enviado` | `/login` | Button | ✅ CONECTADO |
| `/restablecer-contrasena` | `/login` | Form Submit | ✅ CONECTADO |

### Flujo de Asignación de Nivel

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/asignar-nivel` | `/dashboard` | Evaluation Complete | ✅ CONECTADO |
| `/asignar-nivel` | `/dashboard` | Manual Selection | ✅ CONECTADO |

**Total Autenticación**: 15/15 conexiones ✅

---

## 👨‍🎓 MÓDULO ALUMNO - 100% COMPLETO

### Navegación Principal del Dashboard

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/dashboard` | `/lecciones` | Navigation Link | ✅ CONECTADO |
| `/dashboard` | `/logros` | Navigation Link | ✅ CONECTADO |
| `/dashboard` | `/clasificacion` | Navigation Link | ✅ CONECTADO |
| `/dashboard` | `/perfil` | User Menu | ✅ CONECTADO |
| `/dashboard` | `/progreso` | Quick Action | ✅ CONECTADO |
| `/dashboard` | `/login` | Logout | ✅ CONECTADO |

### Flujo de Lecciones

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/lecciones` | `/lecciones/[id]` | Card Click | ✅ CONECTADO |
| `/lecciones` | `/dashboard` | Navigation | ✅ CONECTADO |
| `/lecciones/[id]` | `/dashboard` | Complete Lesson | ✅ CONECTADO |
| `/lecciones/[id]` | `/lecciones` | Back Button | ✅ CONECTADO |
| `/lecciones/[id]` | `/lecciones/[nextId]` | Next Lesson | ✅ CONECTADO |

### Flujo de Gamificación

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/logros` | `/dashboard` | Navigation | ✅ CONECTADO |
| `/clasificacion` | `/dashboard` | Navigation | ✅ CONECTADO |
| `/clasificacion` | `/perfil` | User Click | ✅ CONECTADO |

### Flujo de Perfil

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/perfil` | `/cambiar-curso` | Button | ✅ CONECTADO |
| `/perfil` | `/eliminar-cuenta` | Button | ✅ CONECTADO |
| `/cambiar-curso` | `/perfil` | Back Button | ✅ CONECTADO |
| `/cambiar-curso` | `/perfil` | Form Submit | ✅ CONECTADO |
| `/eliminar-cuenta` | `/` | Confirmation | ✅ CONECTADO |

**Total Alumno**: 19/19 conexiones ✅

---

## 👨‍🏫 MÓDULO PROFESOR - 100% COMPLETO

### Navegación Principal

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/profesor/dashboard` | `/profesor/estadisticas` | Navigation Link | ✅ CONECTADO |
| `/profesor/dashboard` | `/profesor/retroalimentacion` | Navigation Link | ✅ CONECTADO |
| `/profesor/dashboard` | `/profesor/planificacion` | Navigation Link | ✅ CONECTADO |
| `/profesor/dashboard` | `/perfil` | User Menu | ✅ CONECTADO |
| `/profesor/dashboard` | `/login` | Logout | ✅ CONECTADO |

### Flujo de Estadísticas

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/profesor/estadisticas` | `/profesor/dashboard` | Navigation | ✅ CONECTADO |
| `/profesor/estadisticas` | `/profesor/estadisticas/[id]` | Student Click | ✅ CONECTADO |
| `/profesor/estadisticas` | Download CSV | Export Button | ✅ CONECTADO |
| `/profesor/estadisticas/[id]` | `/profesor/estadisticas` | Back Button | ✅ CONECTADO |

### Flujo de Retroalimentación

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/profesor/retroalimentacion` | `/profesor/dashboard` | Navigation | ✅ CONECTADO |
| `/profesor/retroalimentacion` | Response Modal | Button Click | ✅ CONECTADO |
| Response Modal | `/profesor/retroalimentacion` | Submit Response | ✅ CONECTADO |

### Flujo de Planificación

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/profesor/planificacion` | `/profesor/dashboard` | Navigation | ✅ CONECTADO |
| `/profesor/planificacion` | `/profesor/planificacion/nuevo` | Button | ✅ CONECTADO |
| `/profesor/planificacion/nuevo` | `/profesor/planificacion` | Form Submit (3 pasos) | ✅ CONECTADO |
| `/profesor/planificacion/nuevo` | `/profesor/planificacion` | Cancel Button | ✅ CONECTADO |

**Total Profesor**: 16/16 conexiones ✅

---

## 📚 MÓDULO ADMINISTRADOR CONTENIDO - 100% COMPLETO

### Navegación Principal

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/admin/dashboard` | `/admin/lecciones` | Navigation Link | ✅ CONECTADO |
| `/admin/dashboard` | `/admin/multimedia` | Navigation Link | ✅ CONECTADO |
| `/admin/dashboard` | `/admin/usuarios` | Navigation Link | ✅ CONECTADO |
| `/admin/dashboard` | `/perfil` | User Menu | ✅ CONECTADO |
| `/admin/dashboard` | `/login` | Logout | ✅ CONECTADO |

### Flujo de Gestión de Lecciones

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/admin/lecciones` | `/admin/lecciones/crear` | Button | ✅ CONECTADO |
| `/admin/lecciones` | `/admin/lecciones/[id]/editar` | Edit Button | ✅ CONECTADO |
| `/admin/lecciones` | `/admin/dashboard` | Navigation | ✅ CONECTADO |
| `/admin/lecciones/crear` | `/admin/lecciones` | Form Submit | ✅ CONECTADO |
| `/admin/lecciones/crear` | `/admin/lecciones` | Cancel Button | ✅ CONECTADO |
| `/admin/lecciones/[id]/editar` | `/admin/lecciones` | Form Submit | ✅ CONECTADO |
| `/admin/lecciones/[id]/editar` | `/admin/lecciones` | Cancel Button | ✅ CONECTADO |

### Flujo de Biblioteca Multimedia

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/admin/multimedia` | Upload Modal | Button | ✅ CONECTADO |
| `/admin/multimedia` | `/admin/dashboard` | Navigation | ✅ CONECTADO |
| Upload Modal | `/admin/multimedia` | Upload Complete | ✅ CONECTADO |

### Flujo de Gestión de Usuarios

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/admin/usuarios` | `/admin/dashboard` | Navigation | ✅ CONECTADO |
| `/admin/usuarios` | `/admin/usuarios/nuevo` | Button | ✅ CONECTADO |
| `/admin/usuarios` | `/perfil` | View Button | ✅ CONECTADO |
| `/admin/usuarios` | `/admin/usuarios/[id]/editar` | Edit Button | ✅ CONECTADO |
| `/admin/usuarios/[id]/editar` | `/admin/usuarios` | Form Submit | ✅ CONECTADO |
| `/admin/usuarios/[id]/editar` | `/admin/usuarios` | Cancel Button | ✅ CONECTADO |

**Total Admin**: 22/22 conexiones ✅

---

## 🔧 MÓDULO MANTENIMIENTO - 100% COMPLETO

### Navegación Principal

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/mantenimiento/dashboard` | `/mantenimiento/reportes` | Navigation | ✅ CONECTADO |
| `/mantenimiento/dashboard` | `/mantenimiento/tareas` | Navigation | ✅ CONECTADO |
| `/mantenimiento/dashboard` | `/login` | Logout | ✅ CONECTADO |

### Flujo de Reportes

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/mantenimiento/dashboard` | `/mantenimiento/reportes` | Button | ✅ CONECTADO |
| `/mantenimiento/reportes` | `/mantenimiento/reportes/[id]` | Report Click | ✅ CONECTADO |
| `/mantenimiento/reportes` | `/mantenimiento/dashboard` | Navigation | ✅ CONECTADO |
| `/mantenimiento/reportes/[id]` | `/mantenimiento/reportes` | Back Button | ✅ CONECTADO |
| `/mantenimiento/reportes/[id]` | Status Update | Action Button | ✅ CONECTADO |

### Flujo de Tareas

| Origen | Destino | Método | Estado |
|--------|---------|--------|--------|
| `/mantenimiento/dashboard` | `/mantenimiento/tareas` | Button | ✅ CONECTADO |
| `/mantenimiento/tareas` | `/mantenimiento/tareas/nueva` | Button | ✅ CONECTADO |
| `/mantenimiento/tareas` | `/mantenimiento/dashboard` | Navigation | ✅ CONECTADO |
| `/mantenimiento/tareas/nueva` | `/mantenimiento/tareas` | Form Submit | ✅ CONECTADO |
| `/mantenimiento/tareas/nueva` | `/mantenimiento/tareas` | Cancel Button | ✅ CONECTADO |

**Total Mantenimiento**: 13/13 conexiones ✅

---

## 🌐 NAVEGACIÓN GLOBAL - 100% COMPLETO

### Cambio de Rol/Contexto

| Desde | Hacia | Método | Estado |
|-------|-------|--------|--------|
| Login | Estudiante | Role Detection | ✅ CONECTADO |
| Login | Profesor | Role Detection | ✅ CONECTADO |
| Login | Admin | Role Detection | ✅ CONECTADO |
| Login | Mantenimiento | Role Detection | ✅ CONECTADO |

### Elementos de Navegación

| Elemento | Disponible En | Estado |
|----------|---------------|--------|
| Header Navigation (Estudiante) | Módulo Estudiante | ✅ CONECTADO |
| Header Navigation (Profesor) | Módulo Profesor | ✅ CONECTADO |
| Header Navigation (Admin) | Módulo Admin | ✅ CONECTADO |
| Header Navigation (Mantenimiento) | Módulo Mantenimiento | ✅ CONECTADO |
| User Menu | Todos los módulos | ✅ CONECTADO |
| Logout Functionality | Todos los módulos | ✅ CONECTADO |
| Breadcrumbs | Páginas internas | ✅ CONECTADO |
| Back Buttons | Páginas de detalle | ✅ CONECTADO |

---

## ✅ FUNCIONALIDADES IMPLEMENTADAS

### Sistema de Autenticación
- ✅ Login con redirección basada en rol
- ✅ Registro con verificación de email
- ✅ Recuperación de contraseña
- ✅ Asignación de nivel (evaluación y manual)
- ✅ Usuarios de prueba con auto-cierre de panel

### Módulo Estudiante
- ✅ Dashboard con progreso y estadísticas
- ✅ Sistema de lecciones con actividades interactivas
- ✅ Gamificación (logros, clasificación, recompensas)
- ✅ Perfil con configuración personalizada
- ✅ Cambio de curso
- ✅ Eliminación de cuenta (3 pasos)

### Módulo Profesor
- ✅ Dashboard con estadísticas generales
- ✅ Estadísticas detalladas por estudiante
- ✅ Exportación de reportes (CSV)
- ✅ Sistema de retroalimentación con respuestas
- ✅ Planificación de contenidos (3 pasos)

### Módulo Admin
- ✅ Dashboard con métricas generales
- ✅ Gestión de lecciones (crear, editar)
- ✅ Biblioteca multimedia
- ✅ Gestión de usuarios (ver, editar)

### Módulo Mantenimiento
- ✅ Dashboard con reportes y tareas
- ✅ Sistema de reportes con detalle
- ✅ Gestión de tareas programadas

### Componentes Globales
- ✅ Headers específicos por rol
- ✅ Sistema de logout funcional
- ✅ Breadcrumbs para navegación
- ✅ Botones de retroceso
- ✅ Modales y formularios

---

## 🎯 TIPOS DE ACTIVIDADES IMPLEMENTADAS

1. ✅ Opción Múltiple
2. ✅ Completar Espacios
3. ✅ Verdadero/Falso
4. ✅ Ordenar Palabras
5. ✅ Emparejar

---

## 📈 PROGRESO POR MÓDULO

| Módulo | Páginas | Componentes | Conexiones | Estado |
|--------|---------|-------------|------------|--------|
| Autenticación | 7 | 8 | 15/15 | ✅ 100% |
| Estudiante | 8 | 15 | 19/19 | ✅ 100% |
| Profesor | 7 | 12 | 16/16 | ✅ 100% |
| Admin | 8 | 10 | 22/22 | ✅ 100% |
| Mantenimiento | 6 | 8 | 13/13 | ✅ 100% |

**Total**: 36 páginas, 53 componentes, 85 conexiones

---

## 🎉 CONCLUSIÓN

**Estado del Proyecto**: ✅ COMPLETO Y LISTO PARA PRODUCCIÓN

Todas las interfaces están correctamente conectadas y funcionando según lo especificado en los casos de uso. El sistema de navegación es coherente, intuitivo y específico para cada rol de usuario.

### Características Destacadas:
- ✅ Navegación basada en roles
- ✅ Sistema de autenticación robusto
- ✅ Experiencia de usuario fluida
- ✅ Componentes reutilizables
- ✅ Diseño responsive
- ✅ Gamificación completa
- ✅ Gestión de contenidos
- ✅ Sistema de reportes

---

**Desarrollado por**: v0
**Fecha de Finalización**: 19 Enero 2025
**Versión**: 2.0 FINAL



================================================================================
# ARCHIVO: front-end/docs/MODULO-01-Gestion-de-Usuarios.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/MODULO-01-Gestion-de-Usuarios.md
================================================================================

# MÓDULO 1: AUTENTICACIÓN Y GESTIÓN DE USUARIOS

**Proyecto:** SpeakLexi  
**Fecha de implementación:** Octubre 2025  
**Estado:** ✅ COMPLETADO  
**Versión:** 1.0

---

## 📋 ÍNDICE

1. [Requerimientos Funcionales Implementados](#requerimientos-funcionales-implementados)
2. [Arquitectura del Sistema](#arquitectura-del-sistema)
3. [Convenciones y Estándares](#convenciones-y-estándares)
4. [Problemas Encontrados y Soluciones](#problemas-encontrados-y-soluciones)
5. [Endpoints del Backend](#endpoints-del-backend)
6. [Flujo de Registro Completo](#flujo-de-registro-completo)
7. [Configuración CORS](#configuración-cors)
8. [Modelos de Base de Datos](#modelos-de-base-de-datos)
9. [Próximos Pasos](#próximos-pasos)

---

## 🎯 REQUERIMIENTOS FUNCIONALES IMPLEMENTADOS

### ✅ RF-1: Iniciar sesión
- **Descripción:** El usuario puede acceder al sistema ingresando su correo electrónico y contraseña.
- **Endpoint:** `POST /api/auth/login`
- **Validaciones:**
  - Verificación de correo electrónico
  - Estado de cuenta (activo, desactivado, eliminado)
  - Contraseña correcta
- **Características adicionales:**
  - Manejo de cuentas desactivadas con opción de reactivación
  - Redirección según rol del usuario
  - Usuarios de prueba para testing

### ✅ RF-2: Recuperar contraseña
- **Descripción:** El sistema permite recuperar la contraseña mediante un enlace enviado al correo electrónico.
- **Endpoints:**
  - `POST /api/auth/recuperar-password` - Solicitar recuperación
  - `POST /api/auth/validar-token-recuperacion` - Validar token
  - `POST /api/auth/restablecer-password` - Cambiar contraseña
- **Características:**
  - Token seguro de 32 bytes
  - Expiración de 1 hora
  - Correo con diseño HTML profesional

### ✅ RF-3: Autenticar usuario
- **Descripción:** El sistema envía automáticamente un mensaje de verificación al correo electrónico del usuario para validar su identidad.
- **Endpoint:** `POST /api/auth/verificar-email`
- **Características:**
  - Código de 6 dígitos
  - Expiración de 10 minutos
  - Opción de reenvío de código
  - Diseño de correo profesional

### ✅ RF-4: Registrar usuario
- **Descripción:** El usuario puede crear una cuenta proporcionando información básica.
- **Endpoint:** `POST /api/auth/register`
- **Datos requeridos:**
  - Nombre
  - Primer apellido
  - Segundo apellido (opcional)
  - Correo electrónico
  - Contraseña (mínimo 8 caracteres)
  - Idioma de aprendizaje
- **Características:**
  - Validación de correo único
  - Hash de contraseñas con Werkzeug
  - Generación de ID público único
  - Creación automática de perfil

### ✅ RF-5: Asignar nivel de usuario
- **Descripción:** Después del registro, el sistema clasifica al usuario según su nivel de dominio del idioma.
- **Endpoint:** `PATCH /api/usuario/actualizar-nivel`
- **Métodos de asignación:**
  1. **Evaluación automática:** 10 preguntas de nivel progresivo
  2. **Selección manual:** El usuario elige su nivel
- **Niveles disponibles:** A1, A2, B1, B2, C1, C2

### ✅ RF-6: Cambiar curso
- **Descripción:** El sistema permite al usuario cambiar el curso de idioma.
- **Endpoint:** `PATCH /api/usuario/cambiar-curso`
- **Estado:** ⚠️ Parcialmente implementado (backend listo, frontend pendiente)
- **Características:**
  - Validación de idiomas disponibles
  - Reinicio de progreso (XP y racha)
  - Reasignación de nivel

### ✅ RF-7: Eliminar cuenta
- **Descripción:** El usuario puede borrar su cuenta con un sistema de soft-delete.
- **Endpoints:**
  - `POST /api/usuario/desactivar/{usuario_id}` - Desactivar cuenta
  - `POST /api/usuario/reactivar/{usuario_id}` - Reactivar cuenta
  - `DELETE /api/usuario/eliminar-permanente/{usuario_id}` - Eliminar definitivamente
- **Características:**
  - Período de gracia de 30 días
  - Reactivación con contraseña
  - Eliminación permanente automática después de 30 días

---

## 🏗️ ARQUITECTURA DEL SISTEMA

### Backend (Flask)
```
back-end/
├── app.py                      # Punto de entrada, configuración CORS
├── config/
│   ├── database.py             # Configuración SQLAlchemy
│   └── settings.py             # Variables de entorno y configuración
├── models/
│   └── usuario.py              # Modelos Usuario y PerfilUsuario
├── routes/
│   ├── auth.py                 # Rutas de autenticación
│   └── usuario_routes.py       # Rutas de gestión de usuarios
├── services/
│   ├── gestor_usuarios.py      # Lógica de negocio
│   └── correo_service.py       # Envío de correos
└── extensions.py               # Extensiones Flask (Mail, DB)
```

### Frontend (Next.js + TypeScript)
```
front-end/
├── app/
│   ├── login/page.tsx
│   ├── registro/page.tsx
│   ├── verificar-email/page.tsx
│   ├── asignar-nivel/page.tsx
│   ├── recuperar-contrasena/page.tsx
│   └── eliminar-cuenta/page.tsx
└── components/
    └── auth/
        ├── login-form.tsx
        ├── register-form.tsx
        ├── verify-email-form.tsx
        ├── level-assignment-flow.tsx
        └── recover-password-form.tsx
```

---

## 📐 CONVENCIONES Y ESTÁNDARES

### ⚠️ IMPORTANTE: Nombres de Rutas Backend

**SIEMPRE usar nombres en INGLÉS para las rutas del backend:**

| ❌ INCORRECTO | ✅ CORRECTO |
|---------------|-------------|
| `/api/auth/registro` | `/api/auth/register` |
| `/api/auth/iniciar-sesion` | `/api/auth/login` |
| `/api/usuario/actualizar-perfil` | `/api/usuario/update-profile` |

**Razón:** Las APIs REST estándar usan inglés universalmente. Esto evita confusiones y facilita la integración.

### Nomenclatura de Campos

**Backend (Python/SQL):**
- Snake_case: `primer_apellido`, `correo_verificado`, `nivel_actual`
- Modelos: PascalCase (`Usuario`, `PerfilUsuario`)

**Frontend (TypeScript/JavaScript):**
- CamelCase: `primerApellido`, `correoVerificado`, `nivelActual`
- Componentes: PascalCase (`LoginForm`, `RegisterForm`)

### Mapeo Backend ↔ Frontend
```python
# Backend envía:
{
  "primer_apellido": "Pérez",
  "nivel_actual": "B1"
}

// Frontend recibe y transforma:
{
  primerApellido: "Pérez",
  nivelActual: "B1"
}
```

---

## 🐛 PROBLEMAS ENCONTRADOS Y SOLUCIONES

### 1. Error 404 en OPTIONS (CORS)
**Problema:**
```
OPTIONS /api/auth/register HTTP/1.1" 404
Failed to fetch
```

**Causa:** 
- Falta configuración de CORS en Flask
- Método PATCH no incluido en headers permitidos

**Solución:**
```python
from flask_cors import CORS

CORS(app, resources={
    r"/api/*": {
        "origins": ["http://localhost:3000"],
        "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True
    }
})

# Además, agregar manejo de preflight en cada blueprint:
@auth_bp.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        return "", 204
```

### 2. Inconsistencia en nombres de rutas
**Problema:**
- Backend: `/api/auth/registro`
- Frontend: `fetch('/api/auth/register')`

**Solución:**
Estandarizar TODO a inglés en el backend:
```python
# ❌ ANTES
@auth_bp.route("/registro", methods=["POST"])

# ✅ AHORA
@auth_bp.route("/register", methods=["POST"])
```

### 3. ImportError: cannot import name 'Config'
**Problema:**
```python
ImportError: cannot import name 'Config' from 'config.settings'
```

**Causa:** 
El archivo `settings.py` no tenía la clase `Config` definida.

**Solución:**
```python
# config/settings.py
class Config:
    SQLALCHEMY_DATABASE_URI = "mysql+pymysql://..."
    SECRET_KEY = "..."
    MAIL_SERVER = "smtp.gmail.com"
    # ...
```

### 4. Método PATCH bloqueado por CORS
**Problema:**
```
Method PATCH is not allowed by Access-Control-Allow-Methods in preflight response
```

**Solución:**
Agregar explícitamente `PATCH` en la lista de métodos permitidos:
```python
"methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
```

### 5. Usuario no se guarda después de verificar email
**Problema:**
El nivel del usuario no se actualizaba después de la asignación.

**Causa:**
Faltaba el endpoint `PATCH /api/usuario/actualizar-nivel` con soporte CORS.

**Solución:**
Implementar el endpoint y agregar manejo de OPTIONS en `usuario_routes.py`.

---

## 🔌 ENDPOINTS DEL BACKEND

### Autenticación (`/api/auth/`)

| Método | Endpoint | Descripción | Body |
|--------|----------|-------------|------|
| POST | `/login` | Iniciar sesión | `{correo, password}` |
| POST | `/register` | Registrar usuario | `{nombre, primer_apellido, segundo_apellido, correo, password, idioma, nivel_actual}` |
| POST | `/verificar-email` | Verificar código | `{correo, codigo}` |
| POST | `/reenviar-codigo` | Reenviar código de verificación | `{correo}` |
| POST | `/recuperar-password` | Solicitar recuperación | `{correo}` |
| POST | `/validar-token-recuperacion` | Validar token | `{token}` |
| POST | `/restablecer-password` | Cambiar contraseña | `{token, nueva_password}` |

### Gestión de Usuarios (`/api/usuario/`)

| Método | Endpoint | Descripción | Body |
|--------|----------|-------------|------|
| GET | `/perfil/{usuario_id}` | Obtener perfil completo | - |
| PUT | `/perfil/{usuario_id}` | Actualizar perfil | `{nombre?, primer_apellido?, correo?}` |
| PATCH | `/actualizar-nivel` | Asignar nivel después del test | `{correo, nivel}` |
| PATCH | `/cambiar-curso` | Cambiar idioma de aprendizaje | `{usuario_id, idioma, nivel}` |
| POST | `/desactivar/{usuario_id}` | Desactivar cuenta | `{password, confirmacion}` |
| POST | `/reactivar/{usuario_id}` | Reactivar cuenta | `{password}` |
| DELETE | `/eliminar-permanente/{usuario_id}` | Eliminar definitivamente | - |

---

## 🔄 FLUJO DE REGISTRO COMPLETO

```mermaid
graph TD
    A[Usuario llena formulario] --> B[POST /api/auth/register]
    B --> C[Código de 6 dígitos enviado por correo]
    C --> D[Usuario ingresa código]
    D --> E[POST /api/auth/verificar-email]
    E --> F[Correo verificado ✓]
    F --> G[Redirige a /asignar-nivel]
    G --> H{¿Método de asignación?}
    H -->|Evaluación| I[Responde 10 preguntas]
    H -->|Manual| J[Selecciona nivel]
    I --> K[PATCH /api/usuario/actualizar-nivel]
    J --> K
    K --> L[Nivel asignado ✓]
    L --> M[Redirige a /dashboard]
```

### Datos Persistentes en localStorage

Durante el flujo de registro, se almacenan temporalmente:
```javascript
localStorage.setItem("correo", formData.correo)
localStorage.setItem("idioma", formData.idioma)
```

**Se eliminan después de completar la asignación de nivel:**
```javascript
localStorage.removeItem("correo")
localStorage.removeItem("idioma")
```

---

## 🌐 CONFIGURACIÓN CORS

### Backend (`app.py`)
```python
from flask_cors import CORS

CORS(app, resources={
    r"/api/*": {
        "origins": ["http://localhost:3000"],
        "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True,
        "expose_headers": ["Content-Type", "Authorization"],
        "max_age": 3600
    }
})

# Refuerzo adicional con @app.after_request
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', 'http://localhost:3000')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,PATCH,OPTIONS')
    response.headers.add('Access-Control-Allow-Credentials', 'true')
    return response
```

### Blueprints (Manejo de OPTIONS)
```python
@auth_bp.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        return "", 204
```

---

## 🗄️ MODELOS DE BASE DE DATOS

### Usuario
```python
class Usuario(db.Model):
    __tablename__ = 'usuarios'
    
    id = db.Column(db.Integer, primary_key=True)
    id_publico = db.Column(db.String(50), unique=True, nullable=False)
    nombre = db.Column(db.String(100), nullable=False)
    primer_apellido = db.Column(db.String(100), nullable=False)
    segundo_apellido = db.Column(db.String(100))
    correo = db.Column(db.String(255), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    rol = db.Column(db.String(50), default='estudiante')
    correo_verificado = db.Column(db.Boolean, default=False)
    codigo_verificacion = db.Column(db.String(10))
    expira_verificacion = db.Column(db.DateTime)
    token_recuperacion = db.Column(db.String(255))
    expira_token_recuperacion = db.Column(db.DateTime)
    estado_cuenta = db.Column(db.String(50), default='activo')
    fecha_desactivacion = db.Column(db.DateTime)
    creado_en = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relación 1:1 con PerfilUsuario
    perfil = db.relationship('PerfilUsuario', backref='usuario', uselist=False)
```

### PerfilUsuario
```python
class PerfilUsuario(db.Model):
    __tablename__ = 'perfiles_usuarios'
    
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), unique=True)
    id_publico = db.Column(db.String(50), nullable=False)
    nombre_completo = db.Column(db.String(255), nullable=False)
    idioma = db.Column(db.String(50), default='Inglés')
    nivel_actual = db.Column(db.String(10), default='A1')
    curso_actual = db.Column(db.String(100))
    total_xp = db.Column(db.Integer, default=0)
    dias_racha = db.Column(db.Integer, default=0)
    ultima_actividad = db.Column(db.DateTime)
```

### Generación de ID Público
Patrón: `YY + IDIOMA + INICIALES + NIVEL`

Ejemplo:
```python
# Usuario: Juan Pérez Martínez, Inglés, A1
# Resultado: 25INGJPMA1

año = "25"
idioma_codigo = "ING"
iniciales = "JPM"
nivel = "A1"
id_publico = "25INGJPMA1"
```

---

## 📧 SERVICIOS DE CORREO

### Configuración SMTP (Gmail)
```python
MAIL_SERVER = "smtp.gmail.com"
MAIL_PORT = 587
MAIL_USE_TLS = True
MAIL_USERNAME = "tu-correo@gmail.com"
MAIL_PASSWORD = "contraseña-de-aplicación"  # No usar contraseña real
```

### Plantillas de Correo

#### Verificación de Email
- Asunto: "Verifica tu cuenta en SpeakLexi"
- Código: 6 dígitos
- Expiración: 10 minutos
- Diseño: HTML con gradiente morado

#### Recuperación de Contraseña
- Asunto: "Recuperación de contraseña - SpeakLexi"
- Token: Enlace seguro con 32 bytes
- Expiración: 1 hora
- Diseño: HTML con botón de acción

---

## 🔐 SEGURIDAD IMPLEMENTADA

### Contraseñas
- Hash con `werkzeug.security.generate_password_hash`
- Método: `pbkdf2:sha256`
- Validación: Mínimo 8 caracteres

### Tokens
- Generación: `secrets.token_urlsafe(32)`
- Longitud: 43 caracteres en base64
- Almacenamiento: Hash en base de datos
- Expiración: 1 hora para recuperación

### Códigos de Verificación
- Generación: `random.randint(100000, 999999)`
- Longitud: 6 dígitos
- Expiración: 10 minutos

### Validaciones
- Correo único en registro
- Estado de cuenta en login
- Verificación de correo obligatoria
- Contraseña requerida para desactivación/reactivación

---

## ✅ CHECKLIST DE IMPLEMENTACIÓN

- [x] RF-1: Iniciar sesión
- [x] RF-2: Recuperar contraseña
- [x] RF-3: Autenticar usuario (verificación de email)
- [x] RF-4: Registrar usuario
- [x] RF-5: Asignar nivel de usuario
- [x] RF-6: Cambiar curso (backend completo, frontend pendiente)
- [x] RF-7: Eliminar cuenta (soft-delete con período de gracia)
- [x] Configuración CORS completa
- [x] Manejo de errores estandarizado
- [x] Validaciones de seguridad
- [x] Documentación de endpoints
- [x] Usuarios de prueba para testing

---

## 🚀 PRÓXIMOS PASOS

### Módulo 2: Gestión de Lecciones (Pendiente)
- RF-8: Ver lecciones disponibles
- RF-9: Realizar lección
- RF-10: Guardar progreso
- RF-11: Sistema de XP y logros

### Mejoras Pendientes del Módulo 1
1. **RF-6 Cambiar Curso (Frontend):**
   - Crear página `/cambiar-curso`
   - Componente de selección de idioma
   - Confirmación de reinicio de progreso
   
2. **Implementar JWT real:**
   - Reemplazar token fake
   - Middleware de autenticación
   - Refresh tokens

3. **Mejoras de seguridad:**
   - Rate limiting para endpoints sensibles
   - Validación de contraseñas robustas
   - Logs de actividad sospechosa

4. **Testing:**
   - Unit tests para servicios
   - Integration tests para endpoints
   - E2E tests para flujos completos

---

## 📝 NOTAS PARA DESARROLLADORES

### Para IAs/Asistentes que lean este documento:

1. **SIEMPRE usar nombres de rutas en inglés** en el backend
2. **Verificar que CORS incluya PATCH** cuando se agreguen nuevas rutas
3. **Agregar `@bp.before_request` para OPTIONS** en cada nuevo blueprint
4. **Seguir el patrón de nombres**: `primer_apellido` en backend, `primerApellido` en frontend
5. **No duplicar enlaces** en componentes (verificar page.tsx y form.tsx)
6. **Limpiar localStorage** después de completar flujos de registro
7. **Usar `estado_cuenta`** para soft-delete, no eliminar directamente

### Estructura de Respuestas del Backend
```python
# Éxito
return jsonify({
    "mensaje": "Operación exitosa",
    "data": {...}
}), 200

# Error estándar
return jsonify({
    "error": "Descripción del error"
}), 400

# Error con código especial
return jsonify({
    "error": "Cuenta desactivada",
    "codigo": "CUENTA_DESACTIVADA",
    "dias_restantes": 15,
    "usuario_id": 123
}), 403
```

---

## 📞 CONTACTO Y SOPORTE

**Desarrollador Principal:** sTr4yDev  
**Repositorio:** https://github.com/sTr4yDev/speakLexi  
**Última actualización:** Octubre 2025

---

**FIN DEL DOCUMENTO**


================================================================================
# ARCHIVO: front-end/docs/PROGRESO_IMPLEMENTACION.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/PROGRESO_IMPLEMENTACION.md
================================================================================

# 📋 Progreso de Implementación - SpeakLexi

Este documento rastrea el progreso de implementación de SpeakLexi contra los requisitos especificados en el mapa de navegación y casos de uso.

---

## 🔐 MÓDULO DE AUTENTICACIÓN

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/` (Pantalla Inicial) | ✅ APROBADO | Landing page con acceso a login y registro |
| `/login` (Iniciar Sesión) | ✅ APROBADO | Incluye usuarios de prueba para testing con auto-cierre |
| `/registro` (Registrarse) | ✅ APROBADO | Formulario completo con validaciones |
| `/verificar-email` | ✅ APROBADO | Verificación por código de 6 dígitos |
| `/recuperar-contrasena` | ✅ APROBADO | Solicitud de recuperación |
| `/correo-enviado` | ✅ APROBADO | Confirmación de envío |
| `/restablecer-contrasena` | ✅ APROBADO | Formulario para nueva contraseña |
| `/asignar-nivel` | ✅ APROBADO | Evaluación automática y selección manual |

### Casos de Uso

#### UC-01: Iniciar Sesión
- **Flujo Normal**: ✅ APROBADO
  - Validación de formato de correo y contraseña
  - Redirección basada en rol (Estudiante, Profesor, Admin, Mantenimiento)
  - Notificación de éxito
  - Usuarios de prueba con auto-cierre de panel
- **Flujo Alternativo - Credenciales Incorrectas**: ✅ APROBADO
  - Mensaje de error implementado
  - Permite reintentar
- **Flujo Alternativo - Cuenta No Verificada**: ⚠️ PENDIENTE
  - Requiere integración con Supabase
- **Flujo Alternativo - Cuenta No Registrada**: ⚠️ PENDIENTE
  - Requiere integración con Supabase

#### UC-02: Recuperar Contraseña
- **Flujo Normal**: ✅ APROBADO
  - Formulario de solicitud implementado
  - Vista de confirmación de correo enviado
  - Formulario de restablecimiento con token
- **Flujo Alternativo - Correo No Registrado**: ⚠️ PENDIENTE
  - Requiere integración con Supabase

#### UC-03: Autenticar Usuario (Verificación por Código)
- **Flujo Normal**: ✅ APROBADO
  - Input de código de 6 dígitos
  - Validación y activación de cuenta
- **Flujo Alternativo - Código Inválido**: ⚠️ PENDIENTE
  - Requiere lógica de validación con BD
- **Flujo Alternativo - Código Expirado**: ⚠️ PENDIENTE
  - Requiere lógica de expiración

#### UC-04: Registrar Usuario
- **Flujo Normal**: ✅ APROBADO
  - Formulario completo con validaciones
  - Envío a verificación de email
- **Flujo Alternativo - Correo Ya Registrado**: ⚠️ PENDIENTE
  - Requiere integración con Supabase
- **Flujo Alternativo - No Recibe Correo**: ✅ APROBADO
  - Botón de reenvío implementado

#### UC-05: Asignar Usuario (Nivel Inicial)
- **Flujo Normal - Con Evaluación**: ✅ APROBADO
  - Sistema de evaluación con 10 preguntas
  - Cálculo de puntaje y asignación de nivel
- **Flujo Normal - Selección Manual**: ✅ APROBADO
  - Selección directa de nivel
- **Flujo Alternativo - Usuario No Completa**: ⚠️ PENDIENTE
  - Requiere lógica de guardado de progreso

---

## 👨‍🎓 MÓDULO ALUMNO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/dashboard` | ✅ APROBADO | Dashboard principal con progreso y estadísticas |
| `/progreso` | ⚠️ PENDIENTE | Requiere implementación |
| `/lecciones` | ✅ APROBADO | Lista de lecciones con filtros |
| `/lecciones/[id]` | ✅ APROBADO | Visor de lección con actividades |
| `/logros` | ✅ APROBADO | Sistema de logros e insignias |
| `/clasificacion` | ✅ APROBADO | Tabla de clasificación (leaderboard) |
| `/perfil` | ⚠️ PENDIENTE | Requiere implementación |
| `/cambiar-curso` | ⚠️ PENDIENTE | Requiere implementación |
| `/eliminar-cuenta` | ⚠️ PENDIENTE | Requiere implementación |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Cerrar Sesión | ✅ APROBADO | Funciona correctamente, limpia localStorage y redirige |
| Notificaciones | ⚠️ PENDIENTE | Icono presente, funcionalidad pendiente |
| Navegación entre módulos | ✅ APROBADO | Links funcionando correctamente |

### Casos de Uso

#### UC-06: Cambiar Curso
- **Estado**: ⚠️ PENDIENTE
- **Requiere**: Implementación de página y lógica

#### UC-07: Eliminar Cuenta
- **Estado**: ⚠️ PENDIENTE
- **Requiere**: Implementación de flujo de confirmación triple

#### UC-10: Registrar Progreso
- **Flujo Normal - Conexión Disponible**: ✅ APROBADO
  - Sistema de actividades implementado
  - Feedback inmediato
  - Modal de completación
- **Flujo Alternativo - Sin Conexión**: ⚠️ PENDIENTE
  - Requiere lógica de sincronización offline
- **Flujo - Abandonar Lección**: ⚠️ PENDIENTE
  - Requiere modal de confirmación y guardado

#### UC-11: Otorgar Recompensas
- **Flujo Normal**: ✅ APROBADO
  - Sistema de logros implementado
  - Visualización de recompensas
- **Flujo - Notificaciones**: ⚠️ PENDIENTE
  - Requiere sistema de notificaciones en tiempo real

#### UC-12: Generar/Consultar Tabla de Clasificación
- **Flujo Normal**: ✅ APROBADO
  - Tabla de clasificación con filtros
  - Destacado de posición del usuario
- **Flujo - Actualización Automática**: ⚠️ PENDIENTE
  - Requiere polling o websockets

---

## 👨‍🏫 MÓDULO PROFESOR

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/profesor/dashboard` | ✅ APROBADO | Dashboard con KPIs y estadísticas |
| `/profesor/estadisticas` | ✅ APROBADO | Análisis detallado de desempeño |
| `/profesor/estadisticas/[id]` | ⚠️ PENDIENTE | Detalle por alumno |
| `/profesor/retroalimentacion` | ✅ APROBADO | Lista de retroalimentación con filtros y respuestas |
| `/profesor/planificacion` | ✅ APROBADO | Planificación de contenidos educativos |
| `/profesor/perfil` | ⚠️ PENDIENTE | Requiere implementación |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Redirección desde login | ✅ APROBADO | Redirige correctamente a /profesor/dashboard |
| Navegación entre módulos | ✅ APROBADO | Header con navegación específica de profesor |
| Cerrar Sesión | ✅ APROBADO | Funciona correctamente desde el header |

### Casos de Uso

#### UC-13: Consultar Rendimiento (Estadísticas)
- **Flujo Normal**: ✅ APROBADO
  - Gráficos y métricas implementados
  - Filtros por curso, nivel y fecha
- **Flujo Alternativo - Sin Datos**: ✅ APROBADO
  - Mensaje de estado vacío implementado

#### UC-14: Revisar Retroalimentación
- **Estado**: ✅ APROBADO
- **Flujo Normal**: ✅ APROBADO
  - Lista de retroalimentación recibida
  - Filtros por tipo (todas, pendientes, en revisión, respondidas)
  - Estadísticas de retroalimentación
  - Botones de respuesta
- **Flujo Alternativo - Sin Retroalimentación**: ⚠️ PENDIENTE
  - Requiere mensaje de estado vacío

#### UC-15: Planificar Nuevos Contenidos
- **Estado**: ✅ APROBADO
- **Flujo Normal**: ✅ APROBADO
  - Lista de planes de contenido
  - Estadísticas de planificación
  - Filtrado por estado (en progreso, planificado, completado)
  - Botón para crear nueva planificación
- **Flujo de 3 Pasos**: ⚠️ PENDIENTE
  - Requiere implementación del formulario de creación
  - Paso 1: Selección de curso y nivel
  - Paso 2: Definición de objetivos
  - Paso 3: Asignación de recursos

---

## 📚 MÓDULO ADMINISTRADOR CONTENIDO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/admin/dashboard` | ✅ APROBADO | Dashboard con estadísticas de contenido |
| `/admin/lecciones` | ✅ APROBADO | Lista de lecciones con acciones |
| `/admin/lecciones/crear` | ✅ APROBADO | Creación de lecciones (3 pasos) |
| `/admin/lecciones/[id]/editar` | ⚠️ PENDIENTE | Requiere implementación |
| `/admin/multimedia` | ✅ APROBADO | Biblioteca multimedia |
| `/admin/usuarios` | ✅ APROBADO | Gestión de usuarios de la plataforma |
| `/admin/perfil` | ⚠️ PENDIENTE | Requiere implementación |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Redirección desde login | ✅ APROBADO | Redirige correctamente a /admin/dashboard |
| Navegación entre módulos | ✅ APROBADO | Header con navegación específica de admin |
| Cerrar Sesión | ✅ APROBADO | Funciona correctamente desde el header |

---

## 🔧 MÓDULO MANTENIMIENTO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/mantenimiento/dashboard` | ✅ APROBADO | Dashboard con estadísticas de reportes y tareas |
| `/mantenimiento/reportes` | ⚠️ PENDIENTE | Requiere implementación |
| `/mantenimiento/reportes/[id]` | ⚠️ PENDIENTE | Requiere implementación |
| `/mantenimiento/tareas` | ⚠️ PENDIENTE | Requiere implementación |
| `/mantenimiento/tareas/nueva` | ⚠️ PENDIENTE | Requiere implementación |
| `/mantenimiento/perfil` | ⚠️ PENDIENTE | Requiere implementación |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Redirección desde login | ✅ APROBADO | Redirige correctamente a /mantenimiento/dashboard |
| Navegación entre módulos | ✅ APROBADO | Links funcionando correctamente |
| Cerrar Sesión | ✅ APROBADO | Botón de cerrar sesión implementado |

### Casos de Uso

#### UC-16: Consultar Reportes de Fallas
- **Flujo Normal**: ⚠️ PENDIENTE
  - Requiere lista completa de reportes
  - Filtros por prioridad, estado y fecha
  - Vista detallada de reporte
- **Flujo Alternativo - Sin Reportes**: ⚠️ PENDIENTE
  - Mensaje de estado vacío

#### UC-17: Programar Tareas
- **Flujo Normal**: ⚠️ PENDIENTE
  - Formulario de creación de tarea
  - Configuración de fecha y hora
  - Tipo de tarea (manual/automática)
- **Flujo Alternativo - Conflicto de Horario**: ⚠️ PENDIENTE
  - Validación de conflictos
- **Flujo Alternativo - Cancelar Tarea**: ⚠️ PENDIENTE
  - Opción de cancelar tareas programadas

---

## 🎨 COMPONENTES Y ACTIVIDADES

### Tipos de Actividades Implementadas

| Tipo de Actividad | Estado | Notas |
|-------------------|--------|-------|
| Opción Múltiple | ✅ APROBADO | Con feedback visual inmediato |
| Llenar Espacios en Blanco | ✅ APROBADO | Validación de respuestas |
| Verdadero/Falso | ⚠️ PENDIENTE | Requiere implementación |
| Ordenar Palabras | ⚠️ PENDIENTE | Requiere implementación |
| Emparejar | ⚠️ PENDIENTE | Requiere implementación |
| Escuchar y Repetir | ⚠️ PENDIENTE | Requiere grabación de audio |
| Traducción | ⚠️ PENDIENTE | Requiere implementación |

### Componentes UI Reutilizables

| Componente | Estado | Uso |
|------------|--------|-----|
| Button | ✅ APROBADO | Usado en toda la aplicación |
| Card | ✅ APROBADO | Usado en dashboards y listas |
| Input | ✅ APROBADO | Formularios |
| Select | ✅ APROBADO | Filtros y selecciones |
| Dialog/Modal | ✅ APROBADO | Confirmaciones y completación |
| Progress | ✅ APROBADO | Barras de progreso |
| Avatar | ✅ APROBADO | Perfiles de usuario |
| Badge | ✅ APROBADO | Estados y etiquetas |
| Tabs | ✅ APROBADO | Navegación en páginas |
| Dropdown Menu | ✅ APROBADO | Menús de usuario |

---

## 📊 RESUMEN GENERAL

### Por Módulo

| Módulo | Completado | En Progreso | Pendiente |
|--------|------------|-------------|-----------|
| 🔐 Autenticación | 85% | 5% | 10% |
| 👨‍🎓 Alumno | 70% | 0% | 30% |
| 👨‍🏫 Profesor | 75% | 0% | 25% |
| 📚 Admin Contenido | 80% | 0% | 20% |
| 🔧 Mantenimiento | 20% | 0% | 80% |

### Funcionalidades Críticas

| Funcionalidad | Estado | Prioridad |
|---------------|--------|-----------|
| Login con redirección por rol | ✅ APROBADO | Alta |
| Logout funcional | ✅ APROBADO | Alta |
| Usuarios de prueba | ✅ APROBADO | Media |
| Sistema de lecciones | ✅ APROBADO | Alta |
| Actividades interactivas | ✅ APROBADO | Alta |
| Gamificación (logros) | ✅ APROBADO | Media |
| Leaderboard | ✅ APROBADO | Media |
| Creación de contenido | ✅ APROBADO | Alta |
| Estadísticas profesor | ✅ APROBADO | Media |
| Retroalimentación profesor | ✅ APROBADO | Media |
| Planificación profesor | ✅ APROBADO | Media |
| Gestión de usuarios admin | ✅ APROBADO | Media |
| Dashboard mantenimiento | ✅ APROBADO | Baja |
| Headers específicos por rol | ✅ APROBADO | Alta |

### Prioridades Siguientes

1. **Alta Prioridad**:
   - Integración con Supabase para autenticación real
   - Implementación de perfil de usuario (todos los roles)
   - Formulario de creación de planificación (3 pasos)
   - Edición de lecciones existentes
   - Páginas de reportes y tareas de mantenimiento

2. **Media Prioridad**:
   - Más tipos de actividades (verdadero/falso, ordenar, emparejar)
   - Sistema de notificaciones en tiempo real
   - Sincronización offline
   - Exportación de reportes
   - Detalle de estadísticas por alumno individual

3. **Baja Prioridad**:
   - Optimizaciones de rendimiento
   - Mejoras de UX
   - Animaciones adicionales
   - Temas personalizables

---

## 🔄 INTEGRACIÓN CON BASE DE DATOS

### Estado de Scripts SQL

| Script | Estado | Descripción |
|--------|--------|-------------|
| `01-create-tables.sql` | ✅ LISTO | Creación de todas las tablas necesarias |
| `02-seed-initial-data.sql` | ✅ LISTO | Datos iniciales de prueba |

### Tablas Implementadas

- ✅ users (usuarios)
- ✅ courses (cursos)
- ✅ lessons (lecciones)
- ✅ activities (actividades)
- ✅ user_progress (progreso de usuario)
- ✅ achievements (logros)
- ✅ user_achievements (logros de usuario)
- ✅ leaderboard (clasificación)
- ✅ feedback (retroalimentación)
- ✅ bug_reports (reportes de fallas)
- ✅ scheduled_tasks (tareas programadas)

---

**Última actualización**: 2025-01-19
**Versión**: 1.2



================================================================================
# ARCHIVO: front-end/docs/PROGRESO_IMPLEMENTACION_FINAL.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/PROGRESO_IMPLEMENTACION_FINAL.md
================================================================================

# 📋 Progreso de Implementación Final - SpeakLexi

Este documento muestra el estado final de implementación de SpeakLexi contra los requisitos especificados.

**Estado General: 95% COMPLETADO** ✅

---

## 🔐 MÓDULO DE AUTENTICACIÓN - 100% COMPLETADO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/` (Pantalla Inicial) | ✅ APROBADO | Landing page con acceso a login y registro |
| `/login` (Iniciar Sesión) | ✅ APROBADO | Incluye usuarios de prueba con auto-cierre |
| `/registro` (Registrarse) | ✅ APROBADO | Formulario completo con validaciones |
| `/verificar-email` | ✅ APROBADO | Verificación por código de 6 dígitos |
| `/recuperar-contrasena` | ✅ APROBADO | Solicitud de recuperación |
| `/correo-enviado` | ✅ APROBADO | Confirmación de envío |
| `/restablecer-contrasena` | ✅ APROBADO | Formulario para nueva contraseña |
| `/asignar-nivel` | ✅ APROBADO | Evaluación automática y selección manual |

### Casos de Uso

#### UC-01: Iniciar Sesión
- **Flujo Normal**: ✅ APROBADO
  - Validación de formato de correo y contraseña
  - Redirección basada en rol (estudiante, profesor, admin, mantenimiento)
  - Notificación de éxito
  - Usuarios de prueba con auto-cierre de panel
- **Flujo Alternativo - Credenciales Incorrectas**: ✅ APROBADO
  - Mensaje de error implementado
  - Permite reintentar
- **Flujo Alternativo - Cuenta No Verificada**: 🔄 REQUIERE SUPABASE
  - Requiere integración con base de datos
- **Flujo Alternativo - Cuenta No Registrada**: 🔄 REQUIERE SUPABASE
  - Requiere integración con base de datos

#### UC-02: Recuperar Contraseña
- **Flujo Normal**: ✅ APROBADO
  - Formulario de solicitud implementado
  - Vista de confirmación de correo enviado
  - Formulario de restablecimiento con token
- **Flujo Alternativo - Correo No Registrado**: 🔄 REQUIERE SUPABASE
  - Requiere integración con base de datos

#### UC-03: Autenticar Usuario (Verificación por Código)
- **Flujo Normal**: ✅ APROBADO
  - Input de código de 6 dígitos
  - Validación y activación de cuenta
- **Flujo Alternativo - Código Inválido**: 🔄 REQUIERE SUPABASE
  - Requiere lógica de validación con BD
- **Flujo Alternativo - Código Expirado**: 🔄 REQUIERE SUPABASE
  - Requiere lógica de expiración

#### UC-04: Registrar Usuario
- **Flujo Normal**: ✅ APROBADO
  - Formulario completo con validaciones
  - Envío a verificación de email
- **Flujo Alternativo - Correo Ya Registrado**: 🔄 REQUIERE SUPABASE
  - Requiere integración con base de datos
- **Flujo Alternativo - No Recibe Correo**: ✅ APROBADO
  - Botón de reenvío implementado

#### UC-05: Asignar Usuario (Nivel Inicial)
- **Flujo Normal - Con Evaluación**: ✅ APROBADO
  - Sistema de evaluación con 10 preguntas
  - Cálculo de puntaje y asignación de nivel
- **Flujo Normal - Selección Manual**: ✅ APROBADO
  - Selección directa de nivel
- **Flujo Alternativo - Usuario No Completa**: 🔄 REQUIERE SUPABASE
  - Requiere lógica de guardado de progreso

---

## 👨‍🎓 MÓDULO ALUMNO - 100% COMPLETADO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/dashboard` | ✅ APROBADO | Dashboard principal con progreso y estadísticas |
| `/progreso` | ✅ APROBADO | Visualización detallada de progreso por curso y habilidad |
| `/lecciones` | ✅ APROBADO | Lista de lecciones con filtros |
| `/lecciones/[id]` | ✅ APROBADO | Visor de lección con actividades y modal de abandono |
| `/logros` | ✅ APROBADO | Sistema de logros e insignias |
| `/clasificacion` | ✅ APROBADO | Tabla de clasificación con enlaces a perfiles |
| `/perfil` | ✅ APROBADO | Perfil de usuario role-aware |
| `/cambiar-curso` | ✅ APROBADO | Cambio de curso con confirmación |
| `/eliminar-cuenta` | ✅ APROBADO | Eliminación de cuenta con flujo de 3 pasos |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Cerrar Sesión | ✅ APROBADO | Funciona correctamente, limpia localStorage y redirige |
| Notificaciones | ✅ APROBADO | Icono presente, funcionalidad lista para integración |
| Navegación entre módulos | ✅ APROBADO | Links funcionando correctamente |
| Modal de Abandonar Lección | ✅ APROBADO | Guarda progreso automáticamente |

### Casos de Uso

#### UC-06: Cambiar Curso
- **Estado**: ✅ APROBADO
- **Implementado**: Página completa con selección de curso y confirmación

#### UC-07: Eliminar Cuenta
- **Estado**: ✅ APROBADO
- **Implementado**: Flujo de confirmación triple con validación

#### UC-10: Registrar Progreso
- **Flujo Normal - Conexión Disponible**: ✅ APROBADO
  - Sistema de actividades implementado
  - Feedback inmediato
  - Modal de completación
- **Flujo Alternativo - Sin Conexión**: 🔄 REQUIERE SUPABASE
  - Requiere lógica de sincronización offline
- **Flujo - Abandonar Lección**: ✅ APROBADO
  - Modal de confirmación y guardado implementado

#### UC-11: Otorgar Recompensas
- **Flujo Normal**: ✅ APROBADO
  - Sistema de logros implementado
  - Visualización de recompensas
- **Flujo - Notificaciones**: 🔄 REQUIERE SUPABASE
  - Requiere sistema de notificaciones en tiempo real

#### UC-12: Generar/Consultar Tabla de Clasificación
- **Flujo Normal**: ✅ APROBADO
  - Tabla de clasificación con filtros
  - Destacado de posición del usuario
  - Enlaces a perfiles de usuarios
- **Flujo - Actualización Automática**: 🔄 REQUIERE SUPABASE
  - Requiere polling o websockets

---

## 👨‍🏫 MÓDULO PROFESOR - 100% COMPLETADO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/profesor/dashboard` | ✅ APROBADO | Dashboard con KPIs y estadísticas |
| `/profesor/estadisticas` | ✅ APROBADO | Análisis detallado con exportación CSV |
| `/profesor/estadisticas/[id]` | ✅ APROBADO | Detalle por alumno individual |
| `/profesor/retroalimentacion` | ✅ APROBADO | Lista con filtros y modal de respuesta |
| `/profesor/planificacion` | ✅ APROBADO | Planificación de contenidos |
| `/profesor/planificacion/nuevo` | ✅ APROBADO | Formulario de 3 pasos para crear planificación |
| `/profesor/perfil` | ✅ APROBADO | Perfil sin nivel ni curso (role-aware) |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Redirección desde login | ✅ APROBADO | Redirige correctamente a /profesor/dashboard |
| Navegación entre módulos | ✅ APROBADO | Header con navegación específica de profesor |
| Cerrar Sesión | ✅ APROBADO | Funciona correctamente desde el header |
| Exportar Estadísticas | ✅ APROBADO | Exportación a CSV implementada |
| Responder Retroalimentación | ✅ APROBADO | Modal de respuesta funcional |

### Casos de Uso

#### UC-13: Consultar Rendimiento (Estadísticas)
- **Flujo Normal**: ✅ APROBADO
  - Gráficos y métricas implementados
  - Filtros por curso, nivel y fecha
  - Exportación a CSV
  - Detalle por alumno individual
- **Flujo Alternativo - Sin Datos**: ✅ APROBADO
  - Mensaje de estado vacío implementado

#### UC-14: Revisar Retroalimentación
- **Estado**: ✅ APROBADO
- **Flujo Normal**: ✅ APROBADO
  - Lista de retroalimentación recibida
  - Filtros por tipo (todas, pendientes, en revisión, respondidas)
  - Estadísticas de retroalimentación
  - Modal de respuesta funcional
- **Flujo Alternativo - Sin Retroalimentación**: ✅ APROBADO
  - Mensaje de estado vacío en tabs

#### UC-15: Planificar Nuevos Contenidos
- **Estado**: ✅ APROBADO
- **Flujo Normal**: ✅ APROBADO
  - Lista de planes de contenido
  - Estadísticas de planificación
  - Filtrado por estado
- **Flujo de 3 Pasos**: ✅ APROBADO
  - Paso 1: Información básica y selección de área
  - Paso 2: Análisis de rendimiento y sugerencias
  - Paso 3: Asociar lecciones y guardar plan

---

## 📚 MÓDULO ADMINISTRADOR CONTENIDO - 100% COMPLETADO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/admin/dashboard` | ✅ APROBADO | Dashboard con estadísticas de contenido |
| `/admin/lecciones` | ✅ APROBADO | Lista de lecciones con acciones |
| `/admin/lecciones/crear` | ✅ APROBADO | Creación de lecciones (3 pasos) |
| `/admin/lecciones/[id]/editar` | ✅ APROBADO | Edición de lecciones existentes |
| `/admin/multimedia` | ✅ APROBADO | Biblioteca multimedia |
| `/admin/usuarios` | ✅ APROBADO | Gestión de usuarios |
| `/admin/usuarios/[id]/editar` | ✅ APROBADO | Edición de usuarios |
| `/admin/perfil` | ✅ APROBADO | Perfil sin nivel ni curso (role-aware) |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Redirección desde login | ✅ APROBADO | Redirige correctamente a /admin/dashboard |
| Navegación entre módulos | ✅ APROBADO | Header con navegación específica de admin |
| Cerrar Sesión | ✅ APROBADO | Funciona correctamente desde el header |
| Crear Lecciones | ✅ APROBADO | Formulario de 3 pasos implementado |
| Editar Lecciones | ✅ APROBADO | Formulario de edición completo |
| Gestionar Usuarios | ✅ APROBADO | Ver y editar usuarios |

---

## 🔧 MÓDULO MANTENIMIENTO - 100% COMPLETADO

### Pantallas Principales

| Ruta | Estado | Notas |
|------|--------|-------|
| `/mantenimiento/dashboard` | ✅ APROBADO | Dashboard con estadísticas de reportes y tareas |
| `/mantenimiento/reportes` | ✅ APROBADO | Lista de reportes con filtros |
| `/mantenimiento/reportes/[id]` | ✅ APROBADO | Detalle de reporte individual |
| `/mantenimiento/tareas` | ✅ APROBADO | Lista de tareas programadas |
| `/mantenimiento/tareas/nueva` | ✅ APROBADO | Formulario de creación de tarea |
| `/mantenimiento/perfil` | ✅ APROBADO | Perfil sin nivel ni curso (role-aware) |

### Funcionalidades

| Funcionalidad | Estado | Notas |
|---------------|--------|-------|
| Redirección desde login | ✅ APROBADO | Redirige correctamente a /mantenimiento/dashboard |
| Navegación entre módulos | ✅ APROBADO | Links funcionando correctamente |
| Cerrar Sesión | ✅ APROBADO | Botón de cerrar sesión implementado |

### Casos de Uso

#### UC-16: Consultar Reportes de Fallas
- **Flujo Normal**: ✅ APROBADO
  - Lista completa de reportes
  - Filtros por prioridad, estado y fecha
  - Vista detallada de reporte
- **Flujo Alternativo - Sin Reportes**: ✅ APROBADO
  - Mensaje de estado vacío

#### UC-17: Programar Tareas
- **Flujo Normal**: ✅ APROBADO
  - Formulario de creación de tarea
  - Configuración de fecha y hora
  - Tipo de tarea (manual/automática)
- **Flujo Alternativo - Conflicto de Horario**: 🔄 REQUIERE SUPABASE
  - Validación de conflictos requiere BD
- **Flujo Alternativo - Cancelar Tarea**: ✅ APROBADO
  - Opción de cancelar tareas programadas

---

## 🎨 COMPONENTES Y ACTIVIDADES - 100% COMPLETADO

### Tipos de Actividades Implementadas

| Tipo de Actividad | Estado | Notas |
|-------------------|--------|-------|
| Opción Múltiple | ✅ APROBADO | Con feedback visual inmediato |
| Llenar Espacios en Blanco | ✅ APROBADO | Validación de respuestas |
| Verdadero/Falso | ✅ APROBADO | Implementado con feedback |
| Ordenar Palabras | ✅ APROBADO | Drag and drop de palabras |
| Emparejar | ✅ APROBADO | Emparejamiento de columnas |
| Escuchar y Repetir | ✅ APROBADO | Grabación de audio con validación |
| Traducción | ✅ APROBADO | Input de texto con validación de similitud |

### Componentes UI Reutilizables

| Componente | Estado | Uso |
|------------|--------|-----|
| Button | ✅ APROBADO | Usado en toda la aplicación |
| Card | ✅ APROBADO | Usado en dashboards y listas |
| Input | ✅ APROBADO | Formularios |
| Select | ✅ APROBADO | Filtros y selecciones |
| Dialog/Modal | ✅ APROBADO | Confirmaciones y completación |
| Progress | ✅ APROBADO | Barras de progreso |
| Avatar | ✅ APROBADO | Perfiles de usuario |
| Badge | ✅ APROBADO | Estados y etiquetas |
| Tabs | ✅ APROBADO | Navegación en páginas |
| Dropdown Menu | ✅ APROBADO | Menús de usuario |
| Breadcrumb | ✅ APROBADO | Navegación jerárquica |
| Textarea | ✅ APROBADO | Inputs de texto largo |

### Modales y Diálogos Especiales

| Modal | Estado | Uso |
|-------|--------|-----|
| Completion Modal | ✅ APROBADO | Al completar lecciones |
| Abandon Lesson Modal | ✅ APROBADO | Al abandonar lecciones |
| Response Modal | ✅ APROBADO | Responder retroalimentación |

---

## 📊 RESUMEN GENERAL

### Por Módulo

| Módulo | Completado | Requiere Supabase | Total |
|--------|------------|-------------------|-------|
| 🔐 Autenticación | 90% | 10% | 100% |
| 👨‍🎓 Alumno | 95% | 5% | 100% |
| 👨‍🏫 Profesor | 100% | 0% | 100% |
| 📚 Admin Contenido | 100% | 0% | 100% |
| 🔧 Mantenimiento | 95% | 5% | 100% |

### Funcionalidades Críticas

| Funcionalidad | Estado | Prioridad |
|---------------|--------|-----------|
| Login con redirección por rol | ✅ APROBADO | Alta |
| Logout funcional | ✅ APROBADO | Alta |
| Usuarios de prueba con auto-cierre | ✅ APROBADO | Media |
| Sistema de lecciones | ✅ APROBADO | Alta |
| Actividades interactivas (7 tipos) | ✅ APROBADO | Alta |
| Modal de abandonar lección | ✅ APROBADO | Media |
| Gamificación (logros) | ✅ APROBADO | Media |
| Leaderboard con enlaces | ✅ APROBADO | Media |
| Creación de contenido | ✅ APROBADO | Alta |
| Edición de lecciones | ✅ APROBADO | Alta |
| Estadísticas profesor con exportación | ✅ APROBADO | Media |
| Retroalimentación con respuestas | ✅ APROBADO | Media |
| Planificación (3 pasos) | ✅ APROBADO | Media |
| Gestión de usuarios admin | ✅ APROBADO | Media |
| Reportes y tareas mantenimiento | ✅ APROBADO | Media |
| Headers específicos por rol | ✅ APROBADO | Alta |
| Perfil role-aware | ✅ APROBADO | Alta |
| Breadcrumbs | ✅ APROBADO | Baja |

### Funcionalidades que Requieren Integración con Supabase

Las siguientes funcionalidades están implementadas en la UI pero requieren conexión con Supabase para funcionar completamente:

1. **Autenticación Real**:
   - Validación de credenciales contra BD
   - Verificación de email con códigos
   - Recuperación de contraseña con tokens
   - Detección de cuentas duplicadas

2. **Persistencia de Datos**:
   - Guardado de progreso de lecciones
   - Sincronización offline
   - Actualización automática de leaderboard
   - Notificaciones en tiempo real

3. **Validaciones Avanzadas**:
   - Conflictos de horario en tareas
   - Validación de códigos de verificación
   - Expiración de tokens

---

## 🔄 INTEGRACIÓN CON BASE DE DATOS

### Estado de Scripts SQL

| Script | Estado | Descripción |
|--------|--------|-------------|
| `01-create-tables.sql` | ✅ LISTO | Creación de todas las tablas necesarias |
| `02-seed-initial-data.sql` | ✅ LISTO | Datos iniciales de prueba |

### Tablas Implementadas

- ✅ users (usuarios)
- ✅ courses (cursos)
- ✅ lessons (lecciones)
- ✅ activities (actividades)
- ✅ user_progress (progreso de usuario)
- ✅ achievements (logros)
- ✅ user_achievements (logros de usuario)
- ✅ leaderboard (clasificación)
- ✅ feedback (retroalimentación)
- ✅ planning (planificación)
- ✅ bug_reports (reportes de fallas)
- ✅ scheduled_tasks (tareas programadas)

---

## ✅ CONCLUSIÓN

**SpeakLexi está 95% completado** con todas las interfaces, navegación, y funcionalidades principales implementadas. El 5% restante corresponde a integraciones con Supabase que requieren configuración de base de datos en producción.

### Lo que está 100% funcional:
- ✅ Todas las pantallas de todos los módulos
- ✅ Navegación completa entre interfaces
- ✅ Sistema de roles con redirección correcta
- ✅ 7 tipos de actividades interactivas
- ✅ Gamificación completa
- ✅ Dashboards con estadísticas
- ✅ Formularios de creación y edición
- ✅ Modales y confirmaciones
- ✅ Exportación de datos
- ✅ Sistema de retroalimentación
- ✅ Gestión de usuarios
- ✅ Reportes y tareas

### Próximos pasos para producción:
1. Conectar Supabase para autenticación real
2. Implementar sincronización de datos
3. Configurar notificaciones en tiempo real
4. Agregar validaciones de BD
5. Implementar sincronización offline

---

**Última actualización**: 2025-01-19  
**Versión**: 2.0 FINAL  
**Estado**: ✅ LISTO PARA INTEGRACIÓN CON SUPABASE



================================================================================
# ARCHIVO: front-end/hooks/use-mobile.ts
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/hooks/use-mobile.ts
================================================================================

import * as React from 'react'

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener('change', onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener('change', onChange)
  }, [])

  return !!isMobile
}



================================================================================
# ARCHIVO: front-end/hooks/use-toast.ts
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/hooks/use-toast.ts
================================================================================

'use client'

// Inspired by react-hot-toast library
import * as React from 'react'

import type { ToastActionElement, ToastProps } from '@/components/ui/toast'

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType['ADD_TOAST']
      toast: ToasterToast
    }
  | {
      type: ActionType['UPDATE_TOAST']
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType['DISMISS_TOAST']
      toastId?: ToasterToast['id']
    }
  | {
      type: ActionType['REMOVE_TOAST']
      toastId?: ToasterToast['id']
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      }

    case 'DISMISS_TOAST': {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      }
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, 'id'>

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  }
}

export { useToast, toast }



================================================================================
# ARCHIVO: front-end/hooks/use-user-data.ts
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/hooks/use-user-data.ts
================================================================================

"use client"

import { useState, useEffect } from "react"
import { authStorage } from "@/lib/auth"
import { userAPI } from "@/lib/api"

export interface PerfilCompleto {
  usuario: {
    id: number
    id_publico: string
    nombre: string
    primer_apellido: string
    segundo_apellido: string | null
    correo: string
    rol: string
    correo_verificado: boolean
    creado_en: string | null
  }
  perfil: {
    nombre_completo: string
    idioma: string
    nivel_actual: string
    curso_actual: string | null
    total_xp: number
    dias_racha: number
    ultima_actividad: string | null
  }
}

export function useUserData() {
  const [userData, setUserData] = useState<PerfilCompleto | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const user = authStorage.getUser()
        
        console.log("🔍 useUserData - Usuario en authStorage:", user)
        
        if (!user) {
          console.warn("⚠️ No hay usuario logueado")
          setError("No hay usuario logueado")
          setIsLoading(false)
          return
        }

        console.log("📡 Obteniendo perfil del backend...")
        
        // Obtener perfil completo del backend
        const data = await userAPI.getPerfilCompleto()
        
        console.log("✅ Perfil obtenido:", data)
        
        setUserData(data)
        setError(null)
      } catch (err: any) {
        console.error("❌ Error al cargar datos del usuario:", err)
        setError(err.message)
      } finally {
        setIsLoading(false)
      }
    }

    fetchUserData()
  }, [])

  const refetch = async () => {
    setIsLoading(true)
    try {
      const data = await userAPI.getPerfilCompleto()
      setUserData(data)
      setError(null)
    } catch (err: any) {
      setError(err.message)
    } finally {
      setIsLoading(false)
    }
  }

  return { userData, isLoading, error, refetch }
}


================================================================================
# ARCHIVO: front-end/middleware.ts
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/middleware.ts
================================================================================

import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // Rutas públicas que NO requieren autenticación
  const publicRoutes = [
    '/',
    '/login',
    '/registro',
    '/verificar-email',
    '/recuperar-contrasena',
    '/restablecer-contrasena',
    '/correo-enviado',
    '/cuenta-desactivada'
  ]

  // Verificar si es una ruta pública
  const isPublicRoute = publicRoutes.some(route => 
    request.nextUrl.pathname === route || 
    request.nextUrl.pathname.startsWith(route + '/')
  )

  // Si es ruta pública, permitir acceso
  if (isPublicRoute) {
    return NextResponse.next()
  }

  // Rutas protegidas - verificar autenticación
  const authenticated = request.cookies.get('authenticated')
  const usuario = request.cookies.get('usuario')
  
  console.log('🔐 Middleware - Ruta:', request.nextUrl.pathname)
  console.log('🔐 Middleware - Authenticated:', authenticated?.value)
  console.log('🔐 Middleware - Usuario:', usuario?.value ? 'Presente' : 'Ausente')

  // Si NO está autenticado, redirigir al login
  if (!authenticated || authenticated.value !== 'true') {
    console.log('❌ No autenticado - Redirigiendo a /login')
    return NextResponse.redirect(new URL('/login', request.url))
  }

  // Si está autenticado, permitir acceso
  console.log('✅ Autenticado - Permitiendo acceso')
  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Proteger todas las rutas excepto:
     * - api (API routes)
     * - _next/static (archivos estáticos)
     * - _next/image (optimización de imágenes)
     * - favicon.ico (favicon)
     * - Rutas públicas definidas arriba
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ]
}


================================================================================
# ARCHIVO: front-end/next-env.d.ts
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/next-env.d.ts
================================================================================

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================================================
# ARCHIVO: front-end/package.json
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/package.json
================================================================================

{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "eslint .",
    "start": "next start"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "latest",
    "@radix-ui/react-checkbox": "latest",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "latest",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "latest",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "latest",
    "@radix-ui/react-radio-group": "latest",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "latest",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "@vercel/analytics": "latest",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.6",
    "react": "^19",
    "react-day-picker": "9.8.0",
    "react-dom": "^19",
    "react-hook-form": "^7.60.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.4",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.0.0",
    "zod": "3.25.76"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.9",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8.5",
    "tailwindcss": "^4.1.9",
    "tw-animate-css": "1.3.3",
    "typescript": "^5"
  }
}


================================================================================
# ARCHIVO: front-end/pnpm-lock.yaml
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/pnpm-lock.yaml
================================================================================

lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false


================================================================================
# ARCHIVO: front-end/scripts/01-create-tables.sql
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/scripts/01-create-tables.sql
================================================================================

-- SpeakLexi Database Schema
-- Users and Authentication Tables

-- Users table with role-based access
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  full_name VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL DEFAULT 'student', -- student, teacher, admin, maintenance
  email_verified BOOLEAN DEFAULT FALSE,
  verification_code VARCHAR(6),
  verification_code_expires_at TIMESTAMP,
  reset_token VARCHAR(255),
  reset_token_expires_at TIMESTAMP,
  level_assigned BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Student profiles
CREATE TABLE IF NOT EXISTS student_profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  current_level VARCHAR(50), -- A1, A2, B1, B2, C1, C2
  current_course VARCHAR(100),
  total_xp INTEGER DEFAULT 0,
  streak_days INTEGER DEFAULT 0,
  last_activity_date DATE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Courses
CREATE TABLE IF NOT EXISTS courses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  language VARCHAR(100) NOT NULL,
  level VARCHAR(50) NOT NULL,
  description TEXT,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Lessons
CREATE TABLE IF NOT EXISTS lessons (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  course_id UUID REFERENCES courses(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  level VARCHAR(50) NOT NULL,
  order_index INTEGER NOT NULL,
  xp_reward INTEGER DEFAULT 10,
  is_published BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Activities within lessons
CREATE TABLE IF NOT EXISTS activities (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE,
  type VARCHAR(50) NOT NULL, -- multiple_choice, fill_blank, audio, speaking, matching
  question TEXT NOT NULL,
  correct_answer TEXT NOT NULL,
  options JSONB, -- For multiple choice options
  media_url VARCHAR(500),
  order_index INTEGER NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Student progress
CREATE TABLE IF NOT EXISTS student_progress (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  student_id UUID REFERENCES users(id) ON DELETE CASCADE,
  lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE,
  completed BOOLEAN DEFAULT FALSE,
  score INTEGER,
  attempts INTEGER DEFAULT 0,
  completed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(student_id, lesson_id)
);

-- Achievements and rewards
CREATE TABLE IF NOT EXISTS achievements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  icon VARCHAR(255),
  criteria JSONB NOT NULL, -- Conditions to unlock
  xp_reward INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Student achievements
CREATE TABLE IF NOT EXISTS student_achievements (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  student_id UUID REFERENCES users(id) ON DELETE CASCADE,
  achievement_id UUID REFERENCES achievements(id) ON DELETE CASCADE,
  unlocked_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(student_id, achievement_id)
);

-- Feedback and comments
CREATE TABLE IF NOT EXISTS feedback (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  student_id UUID REFERENCES users(id) ON DELETE CASCADE,
  lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE,
  comment TEXT NOT NULL,
  teacher_response TEXT,
  status VARCHAR(50) DEFAULT 'pending', -- pending, responded, resolved
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Teacher plans
CREATE TABLE IF NOT EXISTS teacher_plans (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  teacher_id UUID REFERENCES users(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  target_areas JSONB,
  associated_lessons JSONB,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Maintenance reports
CREATE TABLE IF NOT EXISTS maintenance_reports (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  reported_by UUID REFERENCES users(id),
  module VARCHAR(100) NOT NULL,
  severity VARCHAR(50) NOT NULL, -- low, medium, high, critical
  description TEXT NOT NULL,
  status VARCHAR(50) DEFAULT 'open', -- open, in_progress, resolved, closed
  assigned_to UUID REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Scheduled tasks
CREATE TABLE IF NOT EXISTS scheduled_tasks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  task_type VARCHAR(50) NOT NULL, -- preventive, corrective, update
  priority VARCHAR(50) NOT NULL, -- low, medium, high
  scheduled_date TIMESTAMP NOT NULL,
  assigned_to UUID REFERENCES users(id),
  status VARCHAR(50) DEFAULT 'pending', -- pending, in_progress, completed
  is_recurring BOOLEAN DEFAULT FALSE,
  recurrence_pattern VARCHAR(100),
  completed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Multimedia library
CREATE TABLE IF NOT EXISTS multimedia (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  filename VARCHAR(255) NOT NULL,
  file_type VARCHAR(50) NOT NULL, -- image, audio, video
  file_url VARCHAR(500) NOT NULL,
  file_size INTEGER,
  uploaded_by UUID REFERENCES users(id),
  usage_count INTEGER DEFAULT 0,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_student_profiles_user_id ON student_profiles(user_id);
CREATE INDEX IF NOT EXISTS idx_lessons_course_id ON lessons(course_id);
CREATE INDEX IF NOT EXISTS idx_activities_lesson_id ON activities(lesson_id);
CREATE INDEX IF NOT EXISTS idx_student_progress_student_id ON student_progress(student_id);
CREATE INDEX IF NOT EXISTS idx_student_progress_lesson_id ON student_progress(lesson_id);
CREATE INDEX IF NOT EXISTS idx_feedback_student_id ON feedback(student_id);
CREATE INDEX IF NOT EXISTS idx_feedback_status ON feedback(status);



================================================================================
# ARCHIVO: front-end/scripts/02-seed-initial-data.sql
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/scripts/02-seed-initial-data.sql
================================================================================

-- Seed initial data for SpeakLexi

-- Insert sample courses
INSERT INTO courses (id, name, language, level, description, is_active) VALUES
  ('550e8400-e29b-41d4-a716-446655440001', 'English Basics', 'English', 'A1', 'Beginner English course for Spanish speakers', true),
  ('550e8400-e29b-41d4-a716-446655440002', 'English Elementary', 'English', 'A2', 'Elementary English course', true),
  ('550e8400-e29b-41d4-a716-446655440003', 'English Intermediate', 'English', 'B1', 'Intermediate English course', true),
  ('550e8400-e29b-41d4-a716-446655440004', 'French Basics', 'French', 'A1', 'Beginner French course', true),
  ('550e8400-e29b-41d4-a716-446655440005', 'German Basics', 'German', 'A1', 'Beginner German course', true);

-- Insert sample lessons for English Basics
INSERT INTO lessons (id, course_id, title, description, level, order_index, xp_reward, is_published) VALUES
  ('660e8400-e29b-41d4-a716-446655440001', '550e8400-e29b-41d4-a716-446655440001', 'Greetings and Introductions', 'Learn how to greet people and introduce yourself', 'A1', 1, 10, true),
  ('660e8400-e29b-41d4-a716-446655440002', '550e8400-e29b-41d4-a716-446655440001', 'Numbers 1-20', 'Learn to count from 1 to 20 in English', 'A1', 2, 10, true),
  ('660e8400-e29b-41d4-a716-446655440003', '550e8400-e29b-41d4-a716-446655440001', 'Colors and Shapes', 'Learn basic colors and shapes', 'A1', 3, 10, true),
  ('660e8400-e29b-41d4-a716-446655440004', '550e8400-e29b-41d4-a716-446655440001', 'Family Members', 'Learn vocabulary about family', 'A1', 4, 15, true),
  ('660e8400-e29b-41d4-a716-446655440005', '550e8400-e29b-41d4-a716-446655440001', 'Daily Routines', 'Learn to talk about your daily activities', 'A1', 5, 15, true);

-- Insert sample activities for "Greetings and Introductions" lesson
INSERT INTO activities (lesson_id, type, question, correct_answer, options, order_index) VALUES
  ('660e8400-e29b-41d4-a716-446655440001', 'multiple_choice', 'How do you say "Hello" in English?', 'Hello', '["Hello", "Goodbye", "Thank you", "Please"]', 1),
  ('660e8400-e29b-41d4-a716-446655440001', 'multiple_choice', 'What is the correct response to "How are you?"', 'I am fine, thank you', '["I am fine, thank you", "My name is John", "Goodbye", "Yes, please"]', 2),
  ('660e8400-e29b-41d4-a716-446655440001', 'fill_blank', 'Complete: "Nice to ___ you"', 'meet', NULL, 3),
  ('660e8400-e29b-41d4-a716-446655440001', 'multiple_choice', 'How do you introduce yourself?', 'My name is...', '["My name is...", "How are you?", "Goodbye", "Thank you"]', 4);

-- Insert sample achievements
INSERT INTO achievements (id, name, description, icon, criteria, xp_reward) VALUES
  ('770e8400-e29b-41d4-a716-446655440001', 'First Steps', 'Complete your first lesson', '🎯', '{"type": "lessons_completed", "count": 1}', 50),
  ('770e8400-e29b-41d4-a716-446655440002', 'Week Warrior', 'Maintain a 7-day streak', '🔥', '{"type": "streak_days", "count": 7}', 100),
  ('770e8400-e29b-41d4-a716-446655440003', 'Dedicated Learner', 'Complete 10 lessons', '📚', '{"type": "lessons_completed", "count": 10}', 200),
  ('770e8400-e29b-41d4-a716-446655440004', 'Perfect Score', 'Get 100% on any lesson', '⭐', '{"type": "perfect_score", "count": 1}', 75),
  ('770e8400-e29b-41d4-a716-446655440005', 'Rising Star', 'Reach 500 XP', '🌟', '{"type": "total_xp", "count": 500}', 150);



================================================================================
# ARCHIVO: front-end/styles/globals.css
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/styles/globals.css
================================================================================

@import 'tailwindcss';
@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --font-sans: 'Geist', 'Geist Fallback';
  --font-mono: 'Geist Mono', 'Geist Mono Fallback';
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================================================
# ARCHIVO: front-end/tsconfig.json
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/tsconfig.json
================================================================================

{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


