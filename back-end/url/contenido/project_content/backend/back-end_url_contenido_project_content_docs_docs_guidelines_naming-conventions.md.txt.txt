# ARCHIVO: back-end/url/contenido/project_content/docs/docs_guidelines_naming-conventions.md.txt
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/back-end/url/contenido/project_content/docs/docs_guidelines_naming-conventions.md.txt
# FECHA DESCARGA: 2025-10-29 18:40:44
# ==================================================

# ARCHIVO: docs/guidelines/naming-conventions.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/docs/guidelines/naming-conventions.md
# FECHA DESCARGA: 2025-10-28 22:57:26
# ==================================================

# üè∑Ô∏è Convenciones de Nombres - SpeakLexi

## üéØ Principio General
> **Los nombres deben ser descriptivos, consistentes y en espa√±ol** (excepto t√©rminos t√©cnicos est√°ndar en ingl√©s).

---

## üêç Backend (Python/Flask)

### **1. Archivos y M√≥dulos**
```
‚úÖ BIEN - snake_case en espa√±ol
usuario.py
gestor_usuarios.py
correo_service.py
auth.py (t√©cnico, puede ser ingl√©s)
leccion.py
progreso.py

‚ùå MAL
Usuario.py          # ‚ùå PascalCase
gestorUsuarios.py   # ‚ùå camelCase
user.py             # ‚ùå Ingl√©s inconsistente
USUARIO.PY          # ‚ùå MAY√öSCULAS
```

### **2. Clases (Modelos)**
```python
‚úÖ BIEN - PascalCase, sustantivos singulares
class Usuario:
    pass

class PerfilUsuario:
    pass

class Leccion:
    pass

class ReporteFalla:
    pass

class TareaMantenimiento:
    pass

‚ùå MAL
class usuario:              # ‚ùå Min√∫sculas
class Usuarios:             # ‚ùå Plural
class usuario_model:        # ‚ùå snake_case
class User:                 # ‚ùå Ingl√©s inconsistente
```

### **3. Funciones y M√©todos**
```python
‚úÖ BIEN - snake_case, verbos descriptivos
def registrar_usuario():
    pass

def enviar_correo_verificacion():
    pass

def calcular_nivel_usuario():
    pass

def obtener_lecciones_por_nivel():
    pass

def validar_credenciales():
    pass

# M√©todos privados con gui√≥n bajo inicial
def _generar_hash_password():
    pass

def _validar_datos_entrada():
    pass

‚ùå MAL
def RegistrarUsuario():        # ‚ùå PascalCase
def registerUser():            # ‚ùå camelCase + ingl√©s
def register():                # ‚ùå No descriptivo
def reg_usr():                 # ‚ùå Abreviaciones
def enviarCorreo():            # ‚ùå camelCase
```

### **4. Variables**
```python
‚úÖ BIEN - snake_case, descriptivas
usuario_id = "123"
email_usuario = "test@example.com"
datos_registro = {...}
lista_lecciones = []
nivel_actual = "principiante"
fecha_creacion = datetime.now()
es_activo = True
tiene_verificacion = False

# Constantes en MAY√öSCULAS
MAX_INTENTOS_LOGIN = 3
TIEMPO_EXPIRACION_TOKEN = 3600
NIVELES_DISPONIBLES = ['principiante', 'intermedio', 'avanzado']

‚ùå MAL
id = "123"                  # ‚ùå Demasiado gen√©rico
e = "test@example.com"      # ‚ùå Una letra
data = {...}                # ‚ùå Ingl√©s + no descriptivo
list = []                   # ‚ùå Palabra reservada
n = "principiante"          # ‚ùå Abreviaci√≥n
x = True                    # ‚ùå No descriptivo
```

### **5. Blueprints (Rutas)**
```python
‚úÖ BIEN - sufijo _bp
from flask import Blueprint

auth_bp = Blueprint('auth', __name__, url_prefix='/api/auth')
usuario_bp = Blueprint('usuarios', __name__, url_prefix='/api/usuarios')
leccion_bp = Blueprint('lecciones', __name__, url_prefix='/api/lecciones')
progreso_bp = Blueprint('progreso', __name__, url_prefix='/api/progreso')

‚ùå MAL
authBlueprint               # ‚ùå camelCase
usuario_routes              # ‚ùå Inconsistente con _bp
bp_auth                     # ‚ùå Prefijo en lugar de sufijo
```

### **6. Servicios/Gestores**
```python
‚úÖ BIEN - prefijo gestor_ o sufijo _service
gestor_usuarios.py
gestor_lecciones.py
gestor_progreso.py
correo_service.py
autenticacion_service.py

# Dentro del archivo
class GestorUsuarios:
    def registrar(self, datos):
        pass
    
    def actualizar_perfil(self, usuario_id, datos):
        pass

‚ùå MAL
user_manager.py         # ‚ùå Ingl√©s
UsuarioGestor.py       # ‚ùå PascalCase en archivo
manager_usuario.py     # ‚ùå Orden incorrecto
```

### **7. Rutas/Endpoints**
```python
‚úÖ BIEN - kebab-case (guiones), plurales para recursos
@auth_bp.route('/registro', methods=['POST'])
@usuario_bp.route('/perfil', methods=['GET'])
@usuario_bp.route('/cambiar-curso', methods=['PUT'])
@leccion_bp.route('/', methods=['GET'])  # /api/lecciones
@leccion_bp.route('/<leccion_id>', methods=['GET'])
@progreso_bp.route('/racha-actual', methods=['GET'])

‚ùå MAL
@auth_bp.route('/Registro')              # ‚ùå PascalCase
@usuario_bp.route('/cambiarcurso')       # ‚ùå Sin separador
@usuario_bp.route('/cambiar_curso')      # ‚ùå snake_case
@leccion_bp.route('/leccion/<id>')       # ‚ùå Singular inconsistente
```

---

## üóÑÔ∏è Base de Datos (MySQL/SQLAlchemy)

### **1. Nombres de Tablas**
```python
‚úÖ BIEN - Plural, snake_case
__tablename__ = 'usuarios'
__tablename__ = 'perfiles_usuario'
__tablename__ = 'lecciones'
__tablename__ = 'progresos'
__tablename__ = 'recompensas'
__tablename__ = 'reportes_falla'
__tablename__ = 'tareas_mantenimiento'

‚ùå MAL
__tablename__ = 'Usuario'           # ‚ùå Singular + PascalCase
__tablename__ = 'usuario'           # ‚ùå Singular
__tablename__ = 'perfil_usuarios'   # ‚ùå Inconsistente
__tablename__ = 'users'             # ‚ùå Ingl√©s
```

### **2. Nombres de Columnas**
```python
‚úÖ BIEN - snake_case, descriptivas
id = db.Column(db.Integer, primary_key=True)
nombre_completo = db.Column(db.String(100))
email = db.Column(db.String(120), unique=True)
password_hash = db.Column(db.String(255))
fecha_registro = db.Column(db.DateTime)
fecha_nacimiento = db.Column(db.Date)
es_activo = db.Column(db.Boolean, default=True)
nivel_actual = db.Column(db.String(50))
puntos_acumulados = db.Column(db.Integer, default=0)

# Claves for√°neas con sufijo _id
usuario_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'))
leccion_id = db.Column(db.Integer, db.ForeignKey('lecciones.id'))

‚ùå MAL
Nombre = db.Column(...)              # ‚ùå PascalCase
nombreCompleto = db.Column(...)      # ‚ùå camelCase
name = db.Column(...)                # ‚ùå Ingl√©s
n = db.Column(...)                   # ‚ùå Abreviaci√≥n
created_at = db.Column(...)          # ‚ùå Ingl√©s (usar fecha_creacion)
isActive = db.Column(...)            # ‚ùå camelCase + ingl√©s
```

### **3. √çndices y Constraints**
```python
‚úÖ BIEN
db.Index('idx_usuarios_email', 'email')
db.Index('idx_lecciones_nivel', 'nivel')
db.UniqueConstraint('email', name='uq_usuarios_email')
db.ForeignKeyConstraint(['usuario_id'], ['usuarios.id'], name='fk_progreso_usuario')

‚ùå MAL
db.Index('index1', 'email')          # ‚ùå No descriptivo
db.Index('email_idx', 'email')       # ‚ùå Orden incorrecto
```

### **4. Relaciones SQLAlchemy**
```python
‚úÖ BIEN
# En Usuario
perfil = db.relationship('PerfilUsuario', backref='usuario', uselist=False)
lecciones_completadas = db.relationship('Progreso', backref='usuario')
recompensas = db.relationship('Recompensa', backref='usuario')

# En Leccion
actividades = db.relationship('Actividad', backref='leccion', cascade='all, delete-orphan')

‚ùå MAL
prof = db.relationship(...)          # ‚ùå Abreviaci√≥n
leccionesCompletadas = db.relationship(...)  # ‚ùå camelCase
```

---

## ‚öõÔ∏è Frontend (React/Next.js/TypeScript)

### **1. Archivos y Carpetas**
```
‚úÖ BIEN - kebab-case para archivos, PascalCase para componentes
app/
‚îú‚îÄ‚îÄ login/page.tsx                    ‚úÖ
‚îú‚îÄ‚îÄ registro/page.tsx                 ‚úÖ
‚îú‚îÄ‚îÄ recuperar-contrasena/page.tsx     ‚úÖ
‚îú‚îÄ‚îÄ dashboard/page.tsx                ‚úÖ

components/
‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îú‚îÄ‚îÄ LoginForm.tsx                 ‚úÖ Componente
‚îÇ   ‚îú‚îÄ‚îÄ RegisterForm.tsx              ‚úÖ
‚îÇ   ‚îî‚îÄ‚îÄ login-form.tsx                ‚úÖ Alternativa v√°lida
‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx                    ‚úÖ
‚îÇ   ‚îî‚îÄ‚îÄ button.tsx                    ‚úÖ shadcn/ui usa min√∫sculas

hooks/
‚îú‚îÄ‚îÄ use-user-data.ts                  ‚úÖ
‚îú‚îÄ‚îÄ use-auth.ts                       ‚úÖ

‚ùå MAL
app/Login/page.tsx                    # ‚ùå PascalCase en carpeta
components/login_form.tsx             # ‚ùå snake_case
components/loginForm.tsx              # ‚ùå camelCase
hooks/useUserData.ts                  # ‚ùå camelCase sin guion
```

### **2. Componentes React**
```tsx
‚úÖ BIEN - PascalCase
export function LoginForm() {}
export function DashboardHeader() {}
export function LessonCard() {}
export function UserProfileSettings() {}

// Componentes internos (no exportados)
function LoadingSpinner() {}

‚ùå MAL
export function loginForm() {}        # ‚ùå camelCase
export function login_form() {}       # ‚ùå snake_case
export function LOGINFORM() {}        # ‚ùå MAY√öSCULAS
```

### **3. Props y State**
```tsx
‚úÖ BIEN - camelCase
interface LoginFormProps {
  initialEmail?: string;
  onSubmit: (data: LoginData) => void;
  isLoading: boolean;
  errorMessage?: string;
}

function LoginForm({ initialEmail, onSubmit, isLoading }: LoginFormProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
}

‚ùå MAL
interface Props {                     # ‚ùå Demasiado gen√©rico
  InitialEmail?: string;              # ‚ùå PascalCase
  on_submit: () => void;              # ‚ùå snake_case
}

const [Email, SetEmail] = useState(); # ‚ùå PascalCase
const [show_password, set_show_password] = useState(); # ‚ùå snake_case
```

### **4. Hooks Personalizados**
```tsx
‚úÖ BIEN - prefijo use + camelCase
export function useAuth() {}
export function useUserData() {}
export function useLessons() {}
export function useLocalStorage() {}

‚ùå MAL
export function auth() {}             # ‚ùå Sin prefijo use
export function UseAuth() {}          # ‚ùå PascalCase
export function use_auth() {}         # ‚ùå snake_case
```

### **5. Tipos e Interfaces TypeScript**
```tsx
‚úÖ BIEN - PascalCase
interface Usuario {
  id: string;
  nombre: string;
  email: string;
}

type NivelCurso = 'principiante' | 'intermedio' | 'avanzado';

type LeccionEstado = 'pendiente' | 'en_progreso' | 'completada';

interface PropsFormularioRegistro {
  onSuccess: () => void;
}

‚ùå MAL
interface usuario {}                  # ‚ùå min√∫sculas
type nivel_curso = string;            # ‚ùå snake_case
interface propsFormularioRegistro {}  # ‚ùå camelCase
```

### **6. Constantes**
```tsx
‚úÖ BIEN - MAY√öSCULAS con gui√≥n bajo
const API_BASE_URL = 'http://localhost:5000/api';
const MAX_LOGIN_ATTEMPTS = 3;
const TOKEN_STORAGE_KEY = 'auth_token';
const NIVELES_DISPONIBLES = ['principiante', 'intermedio', 'avanzado'];

‚ùå MAL
const apiBaseUrl = '...';             # ‚ùå camelCase
const max_login_attempts = 3;         # ‚ùå snake_case min√∫sculas
const MaxLoginAttempts = 3;           # ‚ùå PascalCase
```

### **7. Funciones de Utilidad**
```tsx
‚úÖ BIEN - camelCase, verbos descriptivos
export function formatearFecha(fecha: Date): string {}
export function validarEmail(email: string): boolean {}
export function calcularNivel(puntos: number): number {}
export function obtenerToken(): string | null {}

‚ùå MAL
export function FormatearFecha() {}   # ‚ùå PascalCase
export function formatear_fecha() {}  # ‚ùå snake_case
export function format() {}           # ‚ùå No descriptivo
export function fmt() {}              # ‚ùå Abreviaci√≥n
```

### **8. Rutas Next.js**
```
‚úÖ BIEN - kebab-case
app/
‚îú‚îÄ‚îÄ login/                            ‚úÖ /login
‚îú‚îÄ‚îÄ registro/                         ‚úÖ /registro
‚îú‚îÄ‚îÄ recuperar-contrasena/             ‚úÖ /recuperar-contrasena
‚îú‚îÄ‚îÄ perfil/                           ‚úÖ /perfil
‚îú‚îÄ‚îÄ lecciones/
‚îÇ   ‚îî‚îÄ‚îÄ [id]/                         ‚úÖ /lecciones/123
‚îî‚îÄ‚îÄ admin/
    ‚îî‚îÄ‚îÄ usuarios/
        ‚îî‚îÄ‚îÄ [id]/
            ‚îî‚îÄ‚îÄ editar/               ‚úÖ /admin/usuarios/123/editar

‚ùå MAL
app/Login/                            # ‚ùå PascalCase
app/recuperar_contrasena/             # ‚ùå snake_case
app/recuperarContrasena/              # ‚ùå camelCase
```

---

## üåê Variables de Entorno (.env)
```bash
‚úÖ BIEN - MAY√öSCULAS con gui√≥n bajo
DB_HOST=localhost
DB_PORT=3306
DB_USER=root
DB_PASSWORD=loquesea2013
DB_NAME=SpeakLexi
JWT_SECRET_KEY=clave_secreta
JWT_ACCESS_TOKEN_EXPIRES=3600
MAIL_SERVER=smtp.gmail.com
MAIL_USERNAME=donitasdechocolate01@gmail.com
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

‚ùå MAL
db_host=localhost                     # ‚ùå Min√∫sculas
DbHost=localhost                      # ‚ùå PascalCase
dbHost=localhost                      # ‚ùå camelCase
DATABASE-HOST=localhost               # ‚ùå Guiones en lugar de _
```

---

## üìÅ Estructura de Carpetas
```
‚úÖ BIEN - snake_case o kebab-case
back-end/                             ‚úÖ
‚îú‚îÄ‚îÄ config/                           ‚úÖ
‚îú‚îÄ‚îÄ models/                           ‚úÖ
‚îú‚îÄ‚îÄ routes/                           ‚úÖ
‚îú‚îÄ‚îÄ services/                         ‚úÖ
‚îî‚îÄ‚îÄ utils/                            ‚úÖ

front-end/                            ‚úÖ
‚îú‚îÄ‚îÄ app/                              ‚úÖ
‚îú‚îÄ‚îÄ components/                       ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ auth/                         ‚úÖ
‚îÇ   ‚îú‚îÄ‚îÄ dashboard/                    ‚úÖ
‚îÇ   ‚îî‚îÄ‚îÄ ui/                           ‚úÖ
‚îú‚îÄ‚îÄ hooks/                            ‚úÖ
‚îî‚îÄ‚îÄ lib/                              ‚úÖ

‚ùå MAL
BackEnd/                              # ‚ùå PascalCase
back_End/                             # ‚ùå Inconsistente
BACKEND/                              # ‚ùå MAY√öSCULAS
componentes/                          # ‚ùå Espa√±ol inconsistente con proyecto
```

---

## üé® Clases CSS (Tailwind)
```tsx
‚úÖ BIEN - kebab-case para clases personalizadas
<div className="bg-blue-500 text-white p-4 rounded-lg">
  {/* Tailwind usa clases predefinidas */}
</div>

// En globals.css
.boton-primario {
  @apply bg-blue-500 text-white px-4 py-2 rounded;
}

.tarjeta-leccion {
  @apply border rounded-lg shadow-md p-6;
}

‚ùå MAL
.botonPrimario {}                     # ‚ùå camelCase
.boton_primario {}                    # ‚ùå snake_case (no est√°ndar en CSS)
.BotonPrimario {}                     # ‚ùå PascalCase
```

---

## üìä Resumen de Convenciones

| Elemento | Convenci√≥n | Ejemplo |
|----------|-----------|---------|
| **Archivos Python** | snake_case | `gestor_usuarios.py` |
| **Clases Python** | PascalCase | `class Usuario:` |
| **Funciones Python** | snake_case | `def registrar_usuario():` |
| **Variables Python** | snake_case | `usuario_id = "123"` |
| **Constantes Python** | MAY√öSCULAS | `MAX_INTENTOS = 3` |
| **Tablas BD** | snake_case plural | `usuarios`, `lecciones` |
| **Columnas BD** | snake_case | `nombre_completo`, `email` |
| **Archivos React** | kebab-case / PascalCase | `LoginForm.tsx`, `login-form.tsx` |
| **Componentes React** | PascalCase | `function LoginForm()` |
| **Props/State** | camelCase | `isLoading`, `userName` |
| **Hooks** | use + camelCase | `useAuth()`, `useUserData()` |
| **Tipos TS** | PascalCase | `interface Usuario {}` |
| **Funciones TS** | camelCase | `validarEmail()` |
| **Rutas Next.js** | kebab-case | `/recuperar-contrasena` |
| **Variables ENV** | MAY√öSCULAS | `DB_HOST`, `JWT_SECRET_KEY` |
| **Clases CSS** | kebab-case | `.boton-primario` |

---

## üö® Errores Comunes a Evitar

### 1. **Mezclar Idiomas**
```python
‚ùå MAL
def register_usuario(data):  # ‚ùå Ingl√©s + Espa√±ol
    user_email = data['correo']  # ‚ùå Ingl√©s + Espa√±ol
    
‚úÖ BIEN
def registrar_usuario(data):
    email_usuario = data['email']
```

### 2. **Abreviaciones No Claras**
```python
‚ùå MAL
usr_id = "123"
msg = "Hola"
btn_clk = True

‚úÖ BIEN
usuario_id = "123"
mensaje = "Hola"
boton_clickeado = True
```

### 3. **Inconsistencia en el Proyecto**
```python
‚ùå MAL - Inconsistente
# En un archivo
class Usuario:
    pass

# En otro archivo
class user_profile:
    pass

‚úÖ BIEN - Consistente
class Usuario:
    pass

class PerfilUsuario:
    pass
```

### 4. **Nombres Demasiado Gen√©ricos**
```python
‚ùå MAL
def handle():
    data = get()
    process(data)
    
‚úÖ BIEN
def manejar_registro_usuario():
    datos_formulario = obtener_datos_formulario()
    procesar_registro(datos_formulario)
```

---

## ‚úÖ Checklist de Nombres

Antes de crear un archivo, variable o funci√≥n, preg√∫ntate:

- [ ] ¬øSigue la convenci√≥n correcta (snake_case, PascalCase, camelCase)?
- [ ] ¬øEs descriptivo y claro?
- [ ] ¬øEst√° en espa√±ol (excepto t√©rminos t√©cnicos)?
- [ ] ¬øEs consistente con el resto del proyecto?
- [ ] ¬øEvita abreviaciones confusas?
- [ ] ¬øNo usa palabras reservadas del lenguaje?

---

## üìö Referencias

- **PEP 8** (Python): https://pep8.org/
- **Google TypeScript Style Guide**: https://google.github.io/styleguide/tsguide.html
- **Airbnb JavaScript Style Guide**: https://github.com/airbnb/javascript

---

**Actualizado:** Octubre 2025  
**Proyecto:** SpeakLexi v1.0.0