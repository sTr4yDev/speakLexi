# ARCHIVO: back-end/models/cursos.py
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/back-end/models/cursos.py
# FECHA DESCARGA: 2025-10-28 22:54:15
# ==================================================

# back-end/models/cursos.py
from extensions import db
from sqlalchemy.dialects.mysql import JSON
from datetime import datetime, date
from decimal import Decimal


class Curso(db.Model):
    """Modelo para cursos organizados por niveles CEFR (A1-C2)"""
    __tablename__ = 'cursos'
    
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(100), nullable=False)
    nivel = db.Column(db.String(10), nullable=False)  # A1, A2, B1, B2, C1, C2
    descripcion = db.Column(db.Text)
    idioma = db.Column(db.String(50), nullable=False, default='ingles')
    codigo = db.Column(db.String(20), unique=True, nullable=False)
    profesor_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'))
    imagen_portada = db.Column(db.String(500))
    orden = db.Column(db.Integer, default=0)
    activo = db.Column(db.Boolean, default=True)
    total_lecciones = db.Column(db.Integer, default=0)
    duracion_estimada_total = db.Column(db.Integer, default=0)
    requisitos_previos = db.Column(JSON)
    objetivos_aprendizaje = db.Column(JSON)
    creado_en = db.Column(db.DateTime, default=datetime.utcnow)
    actualizado_en = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relaciones
    lecciones = db.relationship('Leccion', backref='curso', lazy='dynamic')
    progresos = db.relationship('ProgresoCurso', backref='curso', lazy='dynamic')
    profesor = db.relationship('Usuario', foreign_keys=[profesor_id], backref='cursos_impartidos')
    
    def to_dict(self, incluir_lecciones=False, incluir_profesor=False):
        """Convierte el curso a diccionario"""
        data = {
            'id': self.id,
            'nombre': self.nombre,
            'nivel': self.nivel,
            'descripcion': self.descripcion,
            'idioma': self.idioma,
            'codigo': self.codigo,
            'profesor_id': self.profesor_id,
            'imagen_portada': self.imagen_portada,
            'orden': self.orden,
            'activo': self.activo,
            'total_lecciones': self.total_lecciones,
            'duracion_estimada_total': self.duracion_estimada_total,
            'requisitos_previos': self.requisitos_previos or [],
            'objetivos_aprendizaje': self.objetivos_aprendizaje or [],
            'creado_en': self.creado_en.isoformat() if self.creado_en else None,
            'actualizado_en': self.actualizado_en.isoformat() if self.actualizado_en else None
        }
        
        if incluir_profesor and self.profesor:
            data['profesor'] = {
                'id': self.profesor.id,
                'nombre': self.profesor.nombre,
                'primer_apellido': self.profesor.primer_apellido,
                'correo': self.profesor.correo
            }
        
        if incluir_lecciones:
            from models.leccion import Leccion
            lecciones = Leccion.query.filter_by(curso_id=self.id).order_by(Leccion.orden).all()
            data['lecciones'] = [l.to_dict() for l in lecciones]
        
        return data
    
    def tiene_prerequisitos_cumplidos(self, usuario_id):
        """Verifica si el usuario cumple con los prerequisitos"""
        if not self.requisitos_previos:
            return True
        
        from models.cursos import ProgresoCurso
        for curso_prereq_id in self.requisitos_previos:
            progreso = ProgresoCurso.query.filter_by(
                usuario_id=usuario_id,
                curso_id=curso_prereq_id,
                estado='completado'
            ).first()
            
            if not progreso:
                return False
        
        return True
    
    def __repr__(self):
        return f'<Curso {self.codigo}: {self.nombre}>'


class ProgresoCurso(db.Model):
    """Modelo para seguimiento del progreso de los usuarios en los cursos"""
    __tablename__ = 'progreso_cursos'
    
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), nullable=False)
    curso_id = db.Column(db.Integer, db.ForeignKey('cursos.id'), nullable=False)
    lecciones_completadas = db.Column(db.Integer, default=0)
    lecciones_totales = db.Column(db.Integer, default=0)
    porcentaje_completado = db.Column(db.Numeric(5, 2), default=0.00)
    fecha_inicio = db.Column(db.Date)
    fecha_completado = db.Column(db.Date)
    estado = db.Column(
        db.Enum('no_iniciado', 'en_progreso', 'completado', 'abandonado'),
        default='no_iniciado'
    )
    tiempo_dedicado = db.Column(db.Integer, default=0)  # en minutos
    puntuacion_promedio = db.Column(db.Numeric(5, 2))
    ultima_leccion_id = db.Column(db.Integer, db.ForeignKey('lecciones.id'))
    
    # Relaciones
    usuario = db.relationship('Usuario', backref='progresos_cursos')
    ultima_leccion = db.relationship('Leccion', foreign_keys=[ultima_leccion_id])
    
    __table_args__ = (
        db.UniqueConstraint('usuario_id', 'curso_id', name='unique_usuario_curso'),
    )
    
    def to_dict(self, incluir_curso=False, incluir_usuario=False):
        """Convierte el progreso a diccionario"""
        data = {
            'id': self.id,
            'usuario_id': self.usuario_id,
            'curso_id': self.curso_id,
            'lecciones_completadas': self.lecciones_completadas,
            'lecciones_totales': self.lecciones_totales,
            'porcentaje_completado': float(self.porcentaje_completado) if self.porcentaje_completado else 0.0,
            'fecha_inicio': self.fecha_inicio.isoformat() if self.fecha_inicio else None,
            'fecha_completado': self.fecha_completado.isoformat() if self.fecha_completado else None,
            'estado': self.estado,
            'tiempo_dedicado': self.tiempo_dedicado,
            'puntuacion_promedio': float(self.puntuacion_promedio) if self.puntuacion_promedio else None,
            'ultima_leccion_id': self.ultima_leccion_id
        }
        
        if incluir_curso and self.curso:
            data['curso'] = self.curso.to_dict()
        
        if incluir_usuario and self.usuario:
            data['usuario'] = {
                'id': self.usuario.id,
                'nombre': self.usuario.nombre,
                'primer_apellido': self.usuario.primer_apellido,
                'correo': self.usuario.correo
            }
        
        return data
    
    def actualizar_progreso(self):
        """Actualiza el porcentaje de completado"""
        if self.lecciones_totales > 0:
            self.porcentaje_completado = Decimal(
                round((self.lecciones_completadas / self.lecciones_totales) * 100, 2)
            )
            
            if self.porcentaje_completado >= 100 and self.estado != 'completado':
                self.estado = 'completado'
                if not self.fecha_completado:
                    self.fecha_completado = date.today()
    
    def __repr__(self):
        return f'<ProgresoCurso Usuario:{self.usuario_id} Curso:{self.curso_id} {self.porcentaje_completado}%>'
