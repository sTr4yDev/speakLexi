# ARCHIVO: back-end/routes/auth.py
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/back-end/routes/auth.py
# FECHA DESCARGA: 2025-10-29 18:39:54
# ==================================================

from flask import Blueprint, request, jsonify
# IMPORTACIÓN ACTUALIZADA: Importar la clase Usuario directamente
from models.usuario import Usuario
# IMPORTACIÓN NECESARIA para JWT
from flask_jwt_extended import create_access_token, create_refresh_token
# Importar el gestor (asumiendo que está actualizado para los nuevos perfiles)
from services.gestor_usuarios import GestorUsuarios

# ========================================
# BLUEPRINT DE AUTENTICACIÓN
# ========================================
# ✅ ESTA LÍNEA ES LA IMPORTANTE que faltaba o estaba incorrecta
auth_bp = Blueprint("auth", __name__, url_prefix="/api/auth")
gestor = GestorUsuarios() # Instancia del gestor

# ========================================
# MANEJO DE PREFLIGHT REQUESTS (CORS) - Opcional aquí si ya está en app.py
# ========================================
# Puedes mantener o quitar este bloque si ya lo gestionas globalmente en app.py
@auth_bp.before_request
def handle_preflight():
    """Permite manejar solicitudes OPTIONS de CORS"""
    if request.method == "OPTIONS":
        # Respuesta simple para preflight, flask_cors usualmente maneja los headers
        return "", 204

# ========================================
# REGISTRO Y VERIFICACIÓN (Usa el gestor actualizado)
# ========================================
@auth_bp.route("/register", methods=["POST"])
def registrar():
    """Registra un nuevo usuario (asume rol 'alumno' por defecto)"""
    data = request.get_json()
    if not data:
        return jsonify({"error": "No se recibieron datos JSON"}), 400

    nombre = data.get("nombre")
    primer_apellido = data.get("primer_apellido")
    segundo_apellido = data.get("segundo_apellido")
    correo = data.get("correo")
    password = data.get("password")
    # Datos opcionales para perfil estudiante
    idioma = data.get("idioma", "Inglés")
    nivel_actual = data.get("nivel_actual", "A1")

    # Validación básica
    campos_obligatorios = {'nombre': nombre, 'primer_apellido': primer_apellido, 'correo': correo, 'password': password}
    campos_faltantes = [k for k, v in campos_obligatorios.items() if not v]
    if campos_faltantes:
        return jsonify({"error": f"Faltan datos obligatorios: {', '.join(campos_faltantes)}"}), 400

    # Llamar al gestor para registrar (asume rol 'alumno')
    # El gestor ahora debe crear Usuario, PerfilUsuario (base) y PerfilEstudiante
    respuesta, codigo = gestor.registrar_usuario(
        nombre, primer_apellido, segundo_apellido,
        correo, password,
        # Pasar datos específicos del perfil estudiante
        datos_perfil={'idioma_aprendizaje': idioma, 'nivel_actual': nivel_actual}
    )
    return jsonify(respuesta), codigo

@auth_bp.route("/verificar-email", methods=["POST"])
def verificar_email():
    """Verifica el correo con código de 6 dígitos"""
    data = request.get_json()
    correo = data.get("correo")
    codigo = data.get("codigo")

    if not correo or not codigo:
        return jsonify({"error": "Correo y código son requeridos"}), 400

    respuesta, codigo_http = gestor.verificar_correo(correo, codigo)
    return jsonify(respuesta), codigo_http

@auth_bp.route("/reenviar-codigo", methods=["POST"])
def reenviar_codigo():
    """Reenvía el código de verificación"""
    data = request.get_json()
    correo = data.get("correo")

    if not correo:
        return jsonify({"error": "Correo requerido"}), 400

    respuesta, codigo_http = gestor.reenviar_codigo(correo)
    return jsonify(respuesta), codigo_http

# ========================================
# AUTENTICACIÓN (Usa gestor y añade token)
# ========================================
@auth_bp.route("/login", methods=["POST"])
def login():
    """Inicia sesión, devuelve datos del usuario, perfil específico y token JWT"""
    data = request.get_json()
    correo = data.get("correo")
    password = data.get("password")

    if not correo or not password:
        return jsonify({"error": "Faltan credenciales (correo y contraseña)"}), 400

    # Autenticar usando el gestor
    respuesta_auth, codigo_auth = gestor.autenticar_usuario(correo, password)

    # --- MANEJO DE ERRORES DE AUTENTICACIÓN ---
    if codigo_auth != 200:
        # Si la cuenta está desactivada, añadir ID si es posible
        if codigo_auth == 403 and respuesta_auth.get("codigo") == "CUENTA_DESACTIVADA":
            try:
                # No necesitas importar Usuario aquí si ya lo hace el gestor
                usuario_desactivado = Usuario.query.filter_by(correo=correo).first()
                if usuario_desactivado:
                    respuesta_auth["usuario_id"] = usuario_desactivado.id
            except Exception as e:
                 print(f"⚠️ Error al buscar ID de usuario desactivado {correo}: {e}")
                 pass
        return jsonify(respuesta_auth), codigo_auth

    # --- LOGIN EXITOSO: Generar Token y Devolver Datos Completos ---
    try:
        # El gestor ahora debería devolver el usuario con su perfil específico
        usuario_data_completa = respuesta_auth.get('usuario')
        if not usuario_data_completa or 'id' not in usuario_data_completa:
            print(f"❌ Error crítico: Gestor.autenticar_usuario no devolvió 'usuario' con 'id'. Respuesta: {respuesta_auth}")
            return jsonify({"error": "Error interno del servidor al procesar la autenticación"}), 500

        usuario_id = usuario_data_completa['id']

        # Crear tokens JWT (identidad como string)
        access_token = create_access_token(identity=str(usuario_id))
        # refresh_token = create_refresh_token(identity=str(usuario_id)) # Opcional

        # Construir la respuesta final
        respuesta_final = {
            "mensaje": "Inicio de sesión exitoso",
            "access_token": access_token,
            # "refresh_token": refresh_token, # Incluir si se usa
            "usuario": usuario_data_completa # Ya incluye perfil base y específico
        }

        return jsonify(respuesta_final), 200

    except Exception as e:
        print(f"❌ Error inesperado durante la generación del token o construcción de respuesta para {correo}: {e}")
        return jsonify({"error": f"Error interno del servidor después de la autenticación: {str(e)}"}), 500


# ========================================
# RECUPERACIÓN DE CONTRASEÑA (Usa gestor)
# ========================================
@auth_bp.route("/recuperar-password", methods=["POST"])
def recuperar_password():
    """Inicia el proceso de recuperación de contraseña"""
    data = request.get_json()
    correo = data.get("correo")

    if not correo:
        return jsonify({"error": "Correo requerido"}), 400

    respuesta, codigo = gestor.solicitar_recuperacion_password(correo)
    return jsonify(respuesta), codigo

@auth_bp.route("/validar-token-recuperacion", methods=["POST"])
def validar_token():
    """Valida que el token de recuperación sea válido"""
    data = request.get_json()
    token = data.get("token")

    if not token:
        return jsonify({"error": "Token requerido"}), 400

    respuesta, codigo = gestor.validar_token_recuperacion(token)
    return jsonify(respuesta), codigo

@auth_bp.route("/restablecer-password", methods=["POST"])
def restablecer_password():
    """Restablece la contraseña usando el token"""
    data = request.get_json()
    token = data.get("token")
    nueva_password = data.get("nueva_password")

    if not token or not nueva_password:
        return jsonify({"error": "Token y nueva contraseña son requeridos"}), 400

    if len(nueva_password) < 8:
        return jsonify({"error": "La contraseña debe tener al menos 8 caracteres"}), 400

    respuesta, codigo = gestor.restablecer_password(token, nueva_password)
    return jsonify(respuesta), codigo

# ========================================
# RUTA DE PRUEBA (Opcional)
# ========================================
@auth_bp.route("/test", methods=["GET"])
def test():
    """Ruta de prueba para verificar que el blueprint funciona"""
    return jsonify({"mensaje": "Blueprint de auth funcionando correctamente"}), 200

