# ARCHIVO: front-end/components/admin/activity-forms/word-order-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/word-order-form.tsx
# FECHA DESCARGA: 2025-10-28 22:55:30
# ==================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Save, X, Shuffle } from "lucide-react"
import { toast } from "sonner"
import { Badge } from "@/components/ui/badge"

interface ActivityFormProps {
  onGuardar: (actividad: any) => void
  onCancelar: () => void
  actividadEditar?: any
}

export function WordOrderForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [pregunta, setPregunta] = useState("")
  const [instrucciones, setInstrucciones] = useState("")
  const [oracionCorrecta, setOracionCorrecta] = useState("")
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(10)

  useEffect(() => {
    if (actividadEditar) {
      setPregunta(actividadEditar.pregunta || "")
      setInstrucciones(actividadEditar.instrucciones || "")
      setOracionCorrecta(actividadEditar.respuesta_correcta?.join(" ") || "")
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 10)
    }
  }, [actividadEditar])

  const palabras = oracionCorrecta.trim().split(/\s+/).filter(p => p)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!pregunta.trim()) {
      toast.error("Escribe la instrucción")
      return
    }

    if (!oracionCorrecta.trim()) {
      toast.error("Escribe la oración correcta")
      return
    }

    if (palabras.length < 3) {
      toast.error("La oración debe tener al menos 3 palabras")
      return
    }

    // Desordenar palabras para el estudiante
    const palabrasDesordenadas = [...palabras].sort(() => Math.random() - 0.5)

    const actividad = {
      tipo: 'word_order',
      pregunta: pregunta.trim(),
      instrucciones: instrucciones.trim() || "Ordena las palabras para formar una oración correcta",
      opciones: {
        palabras: palabrasDesordenadas
      },
      respuesta_correcta: palabras,
      pista: pista.trim(),
      puntos,
      orden: actividadEditar?.orden || 0
    }

    onGuardar(actividad)
    toast.success("Actividad guardada")
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="pregunta">Instrucción/Contexto *</Label>
        <Textarea
          id="pregunta"
          placeholder="Ej: Ordena las palabras para formar una pregunta en inglés"
          value={pregunta}
          onChange={(e) => setPregunta(e.target.value)}
          rows={2}
          required
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="instrucciones">Instrucciones adicionales</Label>
        <Input
          id="instrucciones"
          placeholder="Ej: Arrastra las palabras en el orden correcto"
          value={instrucciones}
          onChange={(e) => setInstrucciones(e.target.value)}
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="oracion">Oración correcta * (mínimo 3 palabras)</Label>
        <Textarea
          id="oracion"
          placeholder="Ej: How are you today"
          value={oracionCorrecta}
          onChange={(e) => setOracionCorrecta(e.target.value)}
          rows={2}
          required
        />
        <p className="text-xs text-muted-foreground">
          💡 Separa las palabras con espacios. Se desordenarán automáticamente.
        </p>
      </div>

      {palabras.length > 0 && (
        <div className="space-y-2">
          <Label>Vista previa (orden correcto):</Label>
          <div className="flex flex-wrap gap-2 p-3 bg-secondary rounded-lg">
            {palabras.map((palabra, i) => (
              <Badge key={i} variant="outline" className="text-sm">
                {i + 1}. {palabra}
              </Badge>
            ))}
          </div>
        </div>
      )}

      <div className="space-y-2">
        <Label htmlFor="pista">Pista (Opcional)</Label>
        <Input
          id="pista"
          placeholder="Ej: Recuerda que las preguntas en inglés empiezan con..."
          value={pista}
          onChange={(e) => setPista(e.target.value)}
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="puntos">Puntos</Label>
        <Input
          id="puntos"
          type="number"
          min="1"
          value={puntos}
          onChange={(e) => setPuntos(parseInt(e.target.value))}
        />
      </div>

      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button type="submit" className="flex-1" disabled={palabras.length < 3}>
          <Save className="mr-2 h-4 w-4" />
          Guardar Actividad
        </Button>
      </div>
    </form>
  )
}