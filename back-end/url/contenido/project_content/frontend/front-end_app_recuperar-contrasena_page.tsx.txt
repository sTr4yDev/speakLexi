# ARCHIVO: front-end/app/recuperar-contrasena/page.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/app/recuperar-contrasena/page.tsx
# FECHA DESCARGA: 2025-10-28 22:55:18
# ==================================================

"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Mail, Loader2, CheckCircle2, ArrowLeft, AlertCircle } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import Link from "next/link"

export default function RecuperarContrasenaPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [email, setEmail] = useState("")
  const [emailEnviado, setEmailEnviado] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")

    if (!email) {
      setError("Por favor ingresa tu correo electrónico")
      return
    }

    // Validar formato de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      setError("Por favor ingresa un correo válido")
      return
    }

    setLoading(true)

    try {
      const res = await fetch("http://localhost:5000/api/auth/recuperar-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ correo: email }),
      })

      const data = await res.json()

      if (!res.ok) {
        throw new Error(data.error || "Error al enviar el correo")
      }

      setEmailEnviado(true)
      toast({
        title: "¡Correo enviado!",
        description: "Revisa tu bandeja de entrada para continuar",
      })

    } catch (error: any) {
      setError(error.message || "Error al enviar el correo")
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background to-muted">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            {emailEnviado ? (
              <CheckCircle2 className="h-12 w-12 text-green-500" />
            ) : (
              <Mail className="h-12 w-12 text-primary" />
            )}
          </div>
          <CardTitle>
            {emailEnviado ? "¡Correo Enviado!" : "Recuperar Contraseña"}
          </CardTitle>
          <CardDescription>
            {emailEnviado
              ? "Revisa tu correo para continuar"
              : "Ingresa tu correo y te enviaremos instrucciones"}
          </CardDescription>
        </CardHeader>

        <CardContent>
          {emailEnviado ? (
            <div className="space-y-4">
              <Alert>
                <Mail className="h-4 w-4" />
                <AlertDescription>
                  <strong>Correo enviado a:</strong> {email}
                  <p className="mt-2 text-sm">
                    Hemos enviado un enlace de recuperación a tu correo. 
                    El enlace expira en 1 hora.
                  </p>
                </AlertDescription>
              </Alert>

              <div className="bg-muted/50 rounded-lg p-4 space-y-2">
                <p className="text-sm font-semibold">¿No recibiste el correo?</p>
                <ul className="text-sm text-muted-foreground space-y-1 ml-4">
                  <li>• Revisa tu carpeta de spam</li>
                  <li>• Verifica que el correo sea correcto</li>
                  <li>• Espera unos minutos e intenta de nuevo</li>
                </ul>
              </div>

              <div className="flex flex-col gap-3">
                <Button
                  variant="outline"
                  onClick={() => {
                    setEmailEnviado(false)
                    setEmail("")
                  }}
                  className="w-full"
                >
                  Enviar a otro correo
                </Button>
                <Button
                  variant="ghost"
                  onClick={() => router.push("/login")}
                  className="w-full"
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Volver al inicio de sesión
                </Button>
              </div>
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-4">
              {error && (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}

              <Alert>
                <AlertDescription className="text-sm">
                  Te enviaremos un enlace seguro a tu correo electrónico para 
                  que puedas restablecer tu contraseña.
                </AlertDescription>
              </Alert>

              <div className="space-y-2">
                <Label htmlFor="email">Correo Electrónico</Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="tu@email.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  disabled={loading}
                  autoFocus
                />
              </div>

              <Button type="submit" className="w-full" disabled={loading}>
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Enviando...
                  </>
                ) : (
                  <>
                    <Mail className="mr-2 h-4 w-4" />
                    Enviar instrucciones
                  </>
                )}
              </Button>

              <div className="text-center">
                <Link href="/login" className="text-sm text-primary hover:underline">
                  <ArrowLeft className="inline mr-1 h-3 w-3" />
                  Volver al inicio de sesión
                </Link>
              </div>
            </form>
          )}
        </CardContent>
      </Card>
    </div>
  )
}