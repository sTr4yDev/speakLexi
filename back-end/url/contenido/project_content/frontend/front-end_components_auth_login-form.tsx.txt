# ARCHIVO: front-end/components/auth/login-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/auth/login-form.tsx
# FECHA DESCARGA: 2025-10-29 18:44:36
# ==================================================

"use client"

import type React from "react"
import { useState } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { useToast } from "@/hooks/use-toast"
import Link from "next/link"
import { Eye, EyeOff, Loader2, ChevronDown, ChevronUp, User, AlertCircle, RefreshCw } from "lucide-react"
// Importa la funci√≥n setAuthData de tu librer√≠a auth.ts
import { authStorage } from "@/lib/auth" 
// Importar authAPI (opcional, pero buena pr√°ctica)
// import { authAPI } from "@/lib/api" // No necesitas importar authAPI si usas fetch directo aqu√≠

const TEST_USERS = [
  {
    name: "Estudiante Demo",
    email: "estudiante@speaklexi.com",
    password: "estudiante123",
    role: "estudiante",
    description: "Acceso completo al m√≥dulo de aprendizaje",
    dashboard: "/dashboard",
  },
  {
    name: "Profesor Demo",
    email: "profesor@speaklexi.com",
    password: "profesor123",
    role: "profesor",
    description: "Acceso a estad√≠sticas y retroalimentaci√≥n",
    dashboard: "/profesor/dashboard",
  },
  {
    name: "Admin Demo",
    email: "admin@speaklexi.com",
    password: "admin123",
    role: "admin",
    description: "Gesti√≥n de contenido y lecciones",
    dashboard: "/admin/dashboard",
  },
  {
    name: "Mantenimiento Demo",
    email: "mantenimiento@speaklexi.com",
    password: "mantenimiento123",
    role: "mantenimiento",
    description: "Reportes y tareas programadas",
    dashboard: "/mantenimiento/dashboard",
  },
]

export function LoginForm() {
  const router = useRouter()
  const { toast } = useToast()
  
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showTestUsers, setShowTestUsers] = useState(false)
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  })

  const [cuentaDesactivada, setCuentaDesactivada] = useState(false)
  const [diasRestantes, setDiasRestantes] = useState(0)
  const [userId, setUserId] = useState<string | null>(null) // Para reactivaci√≥n
  const [error, setError] = useState("")

  const handleTestUserClick = (user: (typeof TEST_USERS)[0]) => {
    setFormData({
      email: user.email,
      password: user.password,
    })
    setShowTestUsers(false)
    setCuentaDesactivada(false)
    setError("")
    
    toast({
      title: "Credenciales cargadas",
      description: `Listo para iniciar sesi√≥n como ${user.role}`,
    })
  }

  const handleReactivar = async () => {
    if (!userId) {
      toast({
        title: "Error",
        description: "No se pudo identificar el usuario para reactivar",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)
    setError("")
    
    try {
      // Considera mover esta l√≥gica a userAPI en api.ts si la usas en otro lugar
      const res = await fetch(`http://localhost:5000/api/usuario/reactivar/${userId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ password: formData.password }),
      })

      const data = await res.json() // Intenta parsear siempre

      if (!res.ok) {
        throw new Error(data.error || "Error al reactivar la cuenta")
      }

      toast({
        title: "¬°Cuenta reactivada!",
        description: data.mensaje || "Tu cuenta ha sido reactivada exitosamente",
      })

      setCuentaDesactivada(false)
      setError("")
      
      // Intenta hacer login autom√°ticamente despu√©s de reactivar
      setTimeout(() => {
        // Simula un evento submit para reusar la l√≥gica de handleSubmit
        handleSubmit({ preventDefault: () => {} } as React.FormEvent) 
      }, 1000)

    } catch (error: any) {
      console.error("Error al reactivar:", error)
      let errorMessage = error.message || "Error desconocido al reactivar"
      if (error.message === "Failed to fetch") {
        errorMessage = "No se pudo conectar con el servidor."
      }
      setError(errorMessage)
      toast({ title: "Error", description: errorMessage, variant: "destructive" })
    } finally {
      setIsLoading(false)
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setCuentaDesactivada(false) // Resetea estado de cuenta desactivada
    setError("") // Limpia errores previos

    try {
      // Usa el fetch directo como lo ten√≠as, ya que manejas errores espec√≠ficos aqu√≠
       const res = await fetch("http://localhost:5000/api/auth/login", {
         method: "POST",
         headers: { "Content-Type": "application/json" },
         body: JSON.stringify({
           correo: formData.email,
           password: formData.password,
         }),
       })

      const data = await res.json() // Intenta parsear la respuesta siempre
      console.log("üì¶ Respuesta completa del backend:", data)

      if (!res.ok) {
        // --- Manejo de errores espec√≠ficos ---
        if (data.codigo === "CUENTA_DESACTIVADA") {
          setUserId(data.usuario_id?.toString() || null) // Guarda el ID para reactivar
          setCuentaDesactivada(true)
          setDiasRestantes(data.dias_restantes || 0)
          toast({
            title: "Cuenta desactivada",
            description: `Tienes ${data.dias_restantes || 0} d√≠as para reactivarla.`,
            variant: "destructive",
          })
          // No lances error aqu√≠, muestra el bot√≥n de reactivar
        } else if (data.codigo === "CUENTA_ELIMINADA") {
          setError("Esta cuenta ha sido eliminada permanentemente.")
          toast({ title: "Cuenta eliminada", description: "Esta cuenta ya no existe.", variant: "destructive"})
        } else if (data.codigo === "EMAIL_NOT_VERIFIED") {
          toast({ title: "Email no verificado", description: "Revisa tu correo o reenv√≠a el c√≥digo.", variant: "destructive" })
          setTimeout(() => router.push(`/verificar-email?email=${encodeURIComponent(formData.email)}`), 1500)
        } else {
          // Error gen√©rico de login (credenciales inv√°lidas, etc.)
          throw new Error(data.error || `Error ${res.status}: ${res.statusText}`)
        }
         setIsLoading(false); // Detiene el loading en caso de error manejado
         return; // Detiene la ejecuci√≥n si hubo un error manejado
      }

      // ‚úÖ LOGIN EXITOSO
      const usuario = data.usuario
      const access_token = data.access_token 

      // Validar que ambos datos existen antes de proceder
      if (!usuario || typeof usuario !== 'object' || !access_token || typeof access_token !== 'string') {
        console.error("Respuesta inv√°lida del servidor:", data); 
        throw new Error("Respuesta inv√°lida del servidor tras login exitoso.");
      }

      console.log("‚úÖ Usuario recibido:", usuario)
      console.log("üîë Token recibido:", access_token ? 'S√≠' : 'No') // Verifica si el token lleg√≥

      // --- USA authStorage PARA GUARDAR TODO ---
      authStorage.setAuthData(usuario, access_token) 
      // Verifica que se guard√≥ correctamente
      console.log("üîç Verificando localStorage - Token:", localStorage.getItem('token') ? 'Guardado' : 'NO Guardado');
      console.log("üîç Verificando localStorage - UserID:", localStorage.getItem('userId') ? 'Guardado' : 'NO Guardado');


      toast({ title: "‚úÖ Inicio de sesi√≥n exitoso", description: `Bienvenido ${usuario.nombre}` })

      // --- Redirecci√≥n ---
      const rol = usuario.rol?.toLowerCase() || 'estudiante' // Asegura que rol exista y sea string
      console.log("üîÄ Rol detectado:", rol)
      
      let redirectPath = "/dashboard" // Default para estudiante
      if (rol === "profesor" || rol === "teacher") redirectPath = "/profesor/dashboard"
      else if (rol === "admin" || rol === "administrador") redirectPath = "/admin/dashboard"
      else if (rol === "mantenimiento" || rol === "maintenance") redirectPath = "/mantenimiento/dashboard"

      console.log("üöÄ Redirigiendo a:", redirectPath)
      
      // Forzar recarga para que el middleware/layout detecte los nuevos datos de sesi√≥n
      window.location.href = redirectPath
      // No necesitas setIsLoading(false) aqu√≠ porque la p√°gina recargar√°

    } catch (error: any) {
      console.error("‚ùå Error en handleSubmit:", error)
      let errorMessage = error.message || "Ocurri√≥ un error inesperado."
      if (error.message === "Failed to fetch") {
        errorMessage = "No se pudo conectar al servidor. Intenta m√°s tarde."
      }
      setError(errorMessage)
      toast({ title: "Error de inicio de sesi√≥n", description: errorMessage, variant: "destructive" })
      setIsLoading(false); // Aseg√∫rate de detener el loading en el catch
    } 
    // No necesitas finally si la redirecci√≥n ocurre en el try
  }

  // --- El JSX (la parte visual del formulario) ---
  return (
    <div className="space-y-4">
      {/* ALERTA DE ERRORES GENERALES (excluyendo cuenta desactivada) */}
      {error && !cuentaDesactivada && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* ALERTA DE CUENTA DESACTIVADA */}
      {cuentaDesactivada && (
        <Alert className="border-orange-500 bg-orange-50 dark:bg-orange-950">
          <RefreshCw className="h-4 w-4 text-orange-600" />
          <AlertDescription>
            <strong className="text-orange-900 dark:text-orange-100">
              Tu cuenta est√° desactivada
            </strong>
            <p className="mt-2 text-sm text-orange-800 dark:text-orange-200">
              {diasRestantes > 0 ? (
                <>
                  Tienes <strong>{diasRestantes} d√≠as</strong> para reactivarla. 
                  Despu√©s ser√° eliminada permanentemente.
                </>
              ) : (
                "El per√≠odo de recuperaci√≥n ha expirado. La cuenta ser√° eliminada."
              )}
            </p>
            {/* Bot√≥n de reactivar solo si hay d√≠as restantes */}
            {diasRestantes > 0 && (
              <Button
                onClick={handleReactivar}
                disabled={isLoading}
                className="mt-3 w-full bg-orange-600 hover:bg-orange-700 text-white" // Estilo naranja
              >
                {isLoading ? (
                  <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Reactivando...</>
                ) : (
                  <><RefreshCw className="mr-2 h-4 w-4" /> Reactivar mi cuenta</>
                )}
              </Button>
            )}
          </AlertDescription>
        </Alert>
      )}

      {/* SECCI√ìN USUARIOS DE PRUEBA */}
      <div className="rounded-lg border bg-muted/30 overflow-hidden">
        <button
          type="button"
          onClick={() => setShowTestUsers(!showTestUsers)}
          className="w-full flex items-center justify-between p-3 text-sm font-medium hover:bg-muted/50"
        >
          <span className="flex items-center gap-2"><User className="h-4 w-4" /> Usuarios de Prueba</span>
          {showTestUsers ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
        </button>
        {showTestUsers && (
          <div className="p-3 pt-0 space-y-2">
            {TEST_USERS.map((user) => (
              <button
                key={user.email}
                type="button"
                onClick={() => handleTestUserClick(user)}
                className="w-full text-left p-3 rounded-md border bg-background hover:bg-accent hover:border-primary"
              >
                <div className="flex items-start justify-between gap-2">
                  <div className="flex-1 min-w-0">
                    <p className="font-medium text-sm">{user.name}</p>
                    <p className="text-xs text-muted-foreground truncate">{user.email}</p>
                    <p className="text-xs text-muted-foreground mt-1">{user.description}</p>
                  </div>
                  <span className="text-xs font-medium px-2 py-1 rounded-full bg-primary/10 text-primary whitespace-nowrap">
                    {user.role}
                  </span>
                </div>
              </button>
            ))}
          </div>
        )}
      </div>

      {/* FORMULARIO PRINCIPAL DE LOGIN */}
      {/* No mostrar si la cuenta est√° desactivada y no se puede reactivar */}
      {!(cuentaDesactivada && diasRestantes <= 0) && (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Correo Electr√≥nico</Label>
            <Input
              id="email" type="email" placeholder="tu@email.com"
              value={formData.email}
              onChange={(e) => setFormData({ ...formData, email: e.target.value })}
              required disabled={isLoading || cuentaDesactivada} // Deshabilitar si est√° desactivada
            />
          </div>
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="password">Contrase√±a</Label>
              <Link href="/recuperar-contrasena" className="text-sm text-primary hover:underline" tabIndex={-1}>
                ¬øOlvidaste tu contrase√±a?
              </Link>
            </div>
            <div className="relative">
              <Input
                id="password" type={showPassword ? "text" : "password"} placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                value={formData.password}
                onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                required disabled={isLoading || cuentaDesactivada} // Deshabilitar si est√° desactivada
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground"
                disabled={isLoading || cuentaDesactivada}
              >
                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
              </button>
            </div>
          </div>
          <Button type="submit" className="w-full" disabled={isLoading || cuentaDesactivada}>
            {isLoading ? (
              <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Iniciando sesi√≥n...</>
            ) : ( "Iniciar Sesi√≥n" )}
          </Button>
        </form>
      )}

      {/* ENLACE A REGISTRO */}
      <div className="text-center text-sm text-muted-foreground">
        ¬øNo tienes cuenta?{" "}
        <Link href="/registro" className="text-primary hover:underline font-medium">
          Reg√≠strate aqu√≠
        </Link>
      </div>
    </div>
  )
}

