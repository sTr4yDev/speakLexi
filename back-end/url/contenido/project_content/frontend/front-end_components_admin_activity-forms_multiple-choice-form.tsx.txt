# ARCHIVO: front-end/components/admin/activity-forms/multiple-choice-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/activity-forms/multiple-choice-form.tsx
# FECHA DESCARGA: 2025-10-28 22:55:27
# ==================================================

"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Save, X } from "lucide-react"
import { toast } from "sonner"

interface ActivityFormProps {
  onGuardar: (actividad: any) => void
  onCancelar: () => void
  actividadEditar?: any
}

export function MultipleChoiceForm({ onGuardar, onCancelar, actividadEditar }: ActivityFormProps) {
  const [pregunta, setPregunta] = useState("")
  const [instrucciones, setInstrucciones] = useState("")
  const [opciones, setOpciones] = useState<string[]>(["", "", "", ""])
  const [respuestaCorrecta, setRespuestaCorrecta] = useState<number>(0)
  const [pista, setPista] = useState("")
  const [puntos, setPuntos] = useState(10)

  useEffect(() => {
    if (actividadEditar) {
      setPregunta(actividadEditar.pregunta || "")
      setInstrucciones(actividadEditar.instrucciones || "")
      setOpciones(actividadEditar.opciones || ["", "", "", ""])
      setRespuestaCorrecta(actividadEditar.respuesta_correcta || 0)
      setPista(actividadEditar.pista || "")
      setPuntos(actividadEditar.puntos || 10)
    }
  }, [actividadEditar])

  const handleOpcionChange = (index: number, valor: string) => {
    const nuevasOpciones = [...opciones]
    nuevasOpciones[index] = valor
    setOpciones(nuevasOpciones)
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!pregunta.trim()) {
      toast.error("La pregunta es obligatoria")
      return
    }

    const opcionesLlenas = opciones.filter(o => o.trim())
    if (opcionesLlenas.length < 2) {
      toast.error("Debes agregar al menos 2 opciones")
      return
    }

    if (!opciones[respuestaCorrecta]?.trim()) {
      toast.error("Debes seleccionar una respuesta correcta vÃ¡lida")
      return
    }

    const actividad = {
      tipo: 'multiple_choice',
      pregunta: pregunta.trim(),
      instrucciones: instrucciones.trim() || "Selecciona la respuesta correcta",
      opciones: opciones.filter(o => o.trim()),
      respuesta_correcta: respuestaCorrecta,
      pista: pista.trim(),
      puntos,
      orden: actividadEditar?.orden || 0
    }

    onGuardar(actividad)
    toast.success("Actividad guardada")
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="pregunta">Pregunta *</Label>
        <Textarea
          id="pregunta"
          placeholder="Ej: What does 'Hello' mean in Spanish?"
          value={pregunta}
          onChange={(e) => setPregunta(e.target.value)}
          rows={2}
          required
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="instrucciones">Instrucciones</Label>
        <Input
          id="instrucciones"
          placeholder="Ej: Selecciona la traducciÃ³n correcta"
          value={instrucciones}
          onChange={(e) => setInstrucciones(e.target.value)}
        />
      </div>

      <div className="space-y-3">
        <Label>Opciones * (mÃ­nimo 2)</Label>
        <RadioGroup value={respuestaCorrecta.toString()} onValueChange={(v) => setRespuestaCorrecta(parseInt(v))}>
          {opciones.map((opcion, index) => (
            <div key={index} className="flex items-center gap-3">
              <RadioGroupItem value={index.toString()} id={`opcion-${index}`} />
              <Input
                placeholder={`OpciÃ³n ${index + 1}`}
                value={opcion}
                onChange={(e) => handleOpcionChange(index, e.target.value)}
                className="flex-1"
              />
              <Label htmlFor={`opcion-${index}`} className="text-xs text-muted-foreground min-w-[80px]">
                {index === respuestaCorrecta && opcion ? "âœ“ Correcta" : ""}
              </Label>
            </div>
          ))}
        </RadioGroup>
        <p className="text-xs text-muted-foreground">
          ðŸ’¡ Selecciona el cÃ­rculo para marcar la respuesta correcta
        </p>
      </div>

      <div className="space-y-2">
        <Label htmlFor="pista">Pista (Opcional)</Label>
        <Input
          id="pista"
          placeholder="Ej: Es un saludo comÃºn..."
          value={pista}
          onChange={(e) => setPista(e.target.value)}
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="puntos">Puntos</Label>
        <Input
          id="puntos"
          type="number"
          min="1"
          value={puntos}
          onChange={(e) => setPuntos(parseInt(e.target.value))}
        />
      </div>

      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancelar} className="flex-1">
          <X className="mr-2 h-4 w-4" />
          Cancelar
        </Button>
        <Button type="submit" className="flex-1">
          <Save className="mr-2 h-4 w-4" />
          Guardar Actividad
        </Button>
      </div>
    </form>
  )
}