# ARCHIVO: front-end/components/admin/admin-stats.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/admin/admin-stats.tsx
# FECHA DESCARGA: 2025-10-28 22:55:32
# ==================================================

"use client"

import { Card } from "@/components/ui/card"
import { BookOpen, ImageIcon, Users, FileText } from "lucide-react"
import { useState, useEffect } from "react"
import { leccionesAPI, multimediaAPI } from "@/lib/api"

export function AdminStats() {
  const [stats, setStats] = useState({
    totalLecciones: 0,
    totalMultimedia: 0,
    totalUsuarios: 0,
    cursosActivos: 0,
    loading: true
  })

  useEffect(() => {
    cargarEstadisticas()
  }, [])

  const cargarEstadisticas = async () => {
    try {
      // Obtener estadísticas de lecciones
      const leccionesRes = await leccionesAPI.listar({ por_pagina: 1 })
      
      // Obtener estadísticas de multimedia
      const multimediaRes = await multimediaAPI.estadisticas()
      
      setStats({
        totalLecciones: leccionesRes.total || 0,
        totalMultimedia: multimediaRes.total_recursos || 0,
        totalUsuarios: 0, // TODO: Implementar endpoint de usuarios
        cursosActivos: 0, // TODO: Implementar endpoint de cursos
        loading: false
      })
    } catch (error) {
      console.error("Error al cargar estadísticas:", error)
      setStats(prev => ({ ...prev, loading: false }))
    }
  }

  const statsData = [
    {
      label: "Total Lecciones",
      value: stats.totalLecciones,
      change: stats.loading ? "Cargando..." : "Ver todas",
      icon: BookOpen,
      color: "text-primary",
    },
    {
      label: "Archivos Multimedia",
      value: stats.totalMultimedia,
      change: stats.loading ? "Cargando..." : "Ver biblioteca",
      icon: ImageIcon,
      color: "text-secondary",
    },
    {
      label: "Usuarios Totales",
      value: stats.totalUsuarios || "N/A",
      change: "Próximamente",
      icon: Users,
      color: "text-accent",
    },
    {
      label: "Cursos Activos",
      value: stats.cursosActivos || "N/A",
      change: "Próximamente",
      icon: FileText,
      color: "text-primary",
    },
  ]

  return (
    <Card className="p-6">
      <h2 className="mb-4 text-xl font-bold">Estadísticas de Contenido</h2>

      <div className="grid gap-4 sm:grid-cols-2">
        {statsData.map((stat, index) => {
          const Icon = stat.icon
          return (
            <div key={index} className="flex items-start gap-3 rounded-lg bg-muted/50 p-4">
              <div className={`flex h-10 w-10 items-center justify-center rounded-lg bg-background ${stat.color}`}>
                <Icon className="h-5 w-5" />
              </div>
              <div className="flex-1">
                <p className="text-sm text-muted-foreground">{stat.label}</p>
                <div className="mt-1 flex items-baseline gap-2">
                  <span className="text-2xl font-bold">
                    {stats.loading ? "..." : stat.value}
                  </span>
                </div>
                <p className="mt-1 text-xs text-muted-foreground">{stat.change}</p>
              </div>
            </div>
          )
        })}
      </div>
    </Card>
  )
}