# ARCHIVO: front-end/components/auth/verify-email-form.tsx
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/components/auth/verify-email-form.tsx
# FECHA DESCARGA: 2025-10-28 22:55:43
# ==================================================

"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useToast } from "@/hooks/use-toast"
import { Loader2 } from "lucide-react"

export function VerifyEmailForm() {
  const router = useRouter()
  const { toast } = useToast()
  const [isLoading, setIsLoading] = useState(false)
  const [isResending, setIsResending] = useState(false)
  const [code, setCode] = useState(["", "", "", "", "", ""])
  const [email, setEmail] = useState("")

  // ‚úÖ Recuperamos correo y rol del localStorage
  useEffect(() => {
    const storedEmail = localStorage.getItem("correo")
    const storedRole = localStorage.getItem("rol") || "estudiante"

    // üîí Si el usuario es admin, profesor o mantenimiento ‚Üí redirigir
    if (["admin", "profesor", "mantenimiento"].includes(storedRole)) {
      toast({
        title: "Acceso no requerido",
        description: "Tu cuenta no requiere verificaci√≥n de correo.",
      })
      router.push("/dashboard") // o la ruta principal de admin
      return
    }

    if (storedEmail) {
      setEmail(storedEmail)
    } else {
      toast({
        title: "Error",
        description: "No se encontr√≥ el correo del usuario. Reg√≠strate nuevamente.",
        variant: "destructive",
      })
      router.push("/registro")
    }
  }, [router, toast])

  const handleChange = (index: number, value: string) => {
    if (value.length > 1) return
    const newCode = [...code]
    newCode[index] = value
    setCode(newCode)
    if (value && index < 5) {
      const nextInput = document.getElementById(`code-${index + 1}`)
      nextInput?.focus()
    }
  }

  const handleKeyDown = (index: number, e: React.KeyboardEvent) => {
    if (e.key === "Backspace" && !code[index] && index > 0) {
      const prevInput = document.getElementById(`code-${index - 1}`)
      prevInput?.focus()
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    const verificationCode = code.join("")

    if (verificationCode.length !== 6) {
      toast({
        title: "Error",
        description: "Por favor ingresa el c√≥digo completo",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)
    try {
      const res = await fetch("http://localhost:5000/api/auth/verificar-email", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          correo: email,
          codigo: verificationCode,
        }),
      })

      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Error al verificar el correo")

      toast({
        title: "Correo verificado",
        description: "Tu cuenta ha sido activada correctamente",
      })

      router.push("/asignar-nivel")
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleResend = async () => {
    setIsResending(true)
    try {
      const res = await fetch("http://localhost:5000/api/auth/reenviar-codigo", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ correo: email }),
      })

      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Error al reenviar c√≥digo")

      toast({
        title: "C√≥digo reenviado",
        description: "Revisa tu correo electr√≥nico",
      })
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      })
    } finally {
      setIsResending(false)
    }
  }

  return (
    <div className="space-y-6">
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="flex justify-center gap-2">
          {code.map((digit, index) => (
            <Input
              key={index}
              id={`code-${index}`}
              type="text"
              inputMode="numeric"
              maxLength={1}
              value={digit}
              onChange={(e) => handleChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              className="h-14 w-12 text-center text-lg font-semibold"
              required
            />
          ))}
        </div>

        <Button type="submit" className="w-full" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Verificando...
            </>
          ) : (
            "Verificar Email"
          )}
        </Button>
      </form>

      <div className="text-center">
        <p className="text-sm text-muted-foreground">
          ¬øNo recibiste el c√≥digo?{" "}
          <button
            onClick={handleResend}
            disabled={isResending}
            className="font-medium text-primary hover:underline disabled:opacity-50"
          >
            {isResending ? "Reenviando..." : "Reenviar c√≥digo"}
          </button>
        </p>
      </div>
    </div>
  )
}
