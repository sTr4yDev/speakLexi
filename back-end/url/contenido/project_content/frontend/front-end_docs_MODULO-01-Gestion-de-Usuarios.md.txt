# ARCHIVO: front-end/docs/MODULO-01-Gestion-de-Usuarios.md
# URL: https://raw.githubusercontent.com/sTr4yDev/speakLexi/main/front-end/docs/MODULO-01-Gestion-de-Usuarios.md
# FECHA DESCARGA: 2025-10-28 22:57:06
# ==================================================

# M√ìDULO 1: AUTENTICACI√ìN Y GESTI√ìN DE USUARIOS

**Proyecto:** SpeakLexi  
**Fecha de implementaci√≥n:** Octubre 2025  
**Estado:** ‚úÖ COMPLETADO  
**Versi√≥n:** 1.0

---

## üìã √çNDICE

1. [Requerimientos Funcionales Implementados](#requerimientos-funcionales-implementados)
2. [Arquitectura del Sistema](#arquitectura-del-sistema)
3. [Convenciones y Est√°ndares](#convenciones-y-est√°ndares)
4. [Problemas Encontrados y Soluciones](#problemas-encontrados-y-soluciones)
5. [Endpoints del Backend](#endpoints-del-backend)
6. [Flujo de Registro Completo](#flujo-de-registro-completo)
7. [Configuraci√≥n CORS](#configuraci√≥n-cors)
8. [Modelos de Base de Datos](#modelos-de-base-de-datos)
9. [Pr√≥ximos Pasos](#pr√≥ximos-pasos)

---

## üéØ REQUERIMIENTOS FUNCIONALES IMPLEMENTADOS

### ‚úÖ RF-1: Iniciar sesi√≥n
- **Descripci√≥n:** El usuario puede acceder al sistema ingresando su correo electr√≥nico y contrase√±a.
- **Endpoint:** `POST /api/auth/login`
- **Validaciones:**
  - Verificaci√≥n de correo electr√≥nico
  - Estado de cuenta (activo, desactivado, eliminado)
  - Contrase√±a correcta
- **Caracter√≠sticas adicionales:**
  - Manejo de cuentas desactivadas con opci√≥n de reactivaci√≥n
  - Redirecci√≥n seg√∫n rol del usuario
  - Usuarios de prueba para testing

### ‚úÖ RF-2: Recuperar contrase√±a
- **Descripci√≥n:** El sistema permite recuperar la contrase√±a mediante un enlace enviado al correo electr√≥nico.
- **Endpoints:**
  - `POST /api/auth/recuperar-password` - Solicitar recuperaci√≥n
  - `POST /api/auth/validar-token-recuperacion` - Validar token
  - `POST /api/auth/restablecer-password` - Cambiar contrase√±a
- **Caracter√≠sticas:**
  - Token seguro de 32 bytes
  - Expiraci√≥n de 1 hora
  - Correo con dise√±o HTML profesional

### ‚úÖ RF-3: Autenticar usuario
- **Descripci√≥n:** El sistema env√≠a autom√°ticamente un mensaje de verificaci√≥n al correo electr√≥nico del usuario para validar su identidad.
- **Endpoint:** `POST /api/auth/verificar-email`
- **Caracter√≠sticas:**
  - C√≥digo de 6 d√≠gitos
  - Expiraci√≥n de 10 minutos
  - Opci√≥n de reenv√≠o de c√≥digo
  - Dise√±o de correo profesional

### ‚úÖ RF-4: Registrar usuario
- **Descripci√≥n:** El usuario puede crear una cuenta proporcionando informaci√≥n b√°sica.
- **Endpoint:** `POST /api/auth/register`
- **Datos requeridos:**
  - Nombre
  - Primer apellido
  - Segundo apellido (opcional)
  - Correo electr√≥nico
  - Contrase√±a (m√≠nimo 8 caracteres)
  - Idioma de aprendizaje
- **Caracter√≠sticas:**
  - Validaci√≥n de correo √∫nico
  - Hash de contrase√±as con Werkzeug
  - Generaci√≥n de ID p√∫blico √∫nico
  - Creaci√≥n autom√°tica de perfil

### ‚úÖ RF-5: Asignar nivel de usuario
- **Descripci√≥n:** Despu√©s del registro, el sistema clasifica al usuario seg√∫n su nivel de dominio del idioma.
- **Endpoint:** `PATCH /api/usuario/actualizar-nivel`
- **M√©todos de asignaci√≥n:**
  1. **Evaluaci√≥n autom√°tica:** 10 preguntas de nivel progresivo
  2. **Selecci√≥n manual:** El usuario elige su nivel
- **Niveles disponibles:** A1, A2, B1, B2, C1, C2

### ‚úÖ RF-6: Cambiar curso
- **Descripci√≥n:** El sistema permite al usuario cambiar el curso de idioma.
- **Endpoint:** `PATCH /api/usuario/cambiar-curso`
- **Estado:** ‚ö†Ô∏è Parcialmente implementado (backend listo, frontend pendiente)
- **Caracter√≠sticas:**
  - Validaci√≥n de idiomas disponibles
  - Reinicio de progreso (XP y racha)
  - Reasignaci√≥n de nivel

### ‚úÖ RF-7: Eliminar cuenta
- **Descripci√≥n:** El usuario puede borrar su cuenta con un sistema de soft-delete.
- **Endpoints:**
  - `POST /api/usuario/desactivar/{usuario_id}` - Desactivar cuenta
  - `POST /api/usuario/reactivar/{usuario_id}` - Reactivar cuenta
  - `DELETE /api/usuario/eliminar-permanente/{usuario_id}` - Eliminar definitivamente
- **Caracter√≠sticas:**
  - Per√≠odo de gracia de 30 d√≠as
  - Reactivaci√≥n con contrase√±a
  - Eliminaci√≥n permanente autom√°tica despu√©s de 30 d√≠as

---

## üèóÔ∏è ARQUITECTURA DEL SISTEMA

### Backend (Flask)
```
back-end/
‚îú‚îÄ‚îÄ app.py                      # Punto de entrada, configuraci√≥n CORS
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îú‚îÄ‚îÄ database.py             # Configuraci√≥n SQLAlchemy
‚îÇ   ‚îî‚îÄ‚îÄ settings.py             # Variables de entorno y configuraci√≥n
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ usuario.py              # Modelos Usuario y PerfilUsuario
‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ auth.py                 # Rutas de autenticaci√≥n
‚îÇ   ‚îî‚îÄ‚îÄ usuario_routes.py       # Rutas de gesti√≥n de usuarios
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ gestor_usuarios.py      # L√≥gica de negocio
‚îÇ   ‚îî‚îÄ‚îÄ correo_service.py       # Env√≠o de correos
‚îî‚îÄ‚îÄ extensions.py               # Extensiones Flask (Mail, DB)
```

### Frontend (Next.js + TypeScript)
```
front-end/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ login/page.tsx
‚îÇ   ‚îú‚îÄ‚îÄ registro/page.tsx
‚îÇ   ‚îú‚îÄ‚îÄ verificar-email/page.tsx
‚îÇ   ‚îú‚îÄ‚îÄ asignar-nivel/page.tsx
‚îÇ   ‚îú‚îÄ‚îÄ recuperar-contrasena/page.tsx
‚îÇ   ‚îî‚îÄ‚îÄ eliminar-cuenta/page.tsx
‚îî‚îÄ‚îÄ components/
    ‚îî‚îÄ‚îÄ auth/
        ‚îú‚îÄ‚îÄ login-form.tsx
        ‚îú‚îÄ‚îÄ register-form.tsx
        ‚îú‚îÄ‚îÄ verify-email-form.tsx
        ‚îú‚îÄ‚îÄ level-assignment-flow.tsx
        ‚îî‚îÄ‚îÄ recover-password-form.tsx
```

---

## üìê CONVENCIONES Y EST√ÅNDARES

### ‚ö†Ô∏è IMPORTANTE: Nombres de Rutas Backend

**SIEMPRE usar nombres en INGL√âS para las rutas del backend:**

| ‚ùå INCORRECTO | ‚úÖ CORRECTO |
|---------------|-------------|
| `/api/auth/registro` | `/api/auth/register` |
| `/api/auth/iniciar-sesion` | `/api/auth/login` |
| `/api/usuario/actualizar-perfil` | `/api/usuario/update-profile` |

**Raz√≥n:** Las APIs REST est√°ndar usan ingl√©s universalmente. Esto evita confusiones y facilita la integraci√≥n.

### Nomenclatura de Campos

**Backend (Python/SQL):**
- Snake_case: `primer_apellido`, `correo_verificado`, `nivel_actual`
- Modelos: PascalCase (`Usuario`, `PerfilUsuario`)

**Frontend (TypeScript/JavaScript):**
- CamelCase: `primerApellido`, `correoVerificado`, `nivelActual`
- Componentes: PascalCase (`LoginForm`, `RegisterForm`)

### Mapeo Backend ‚Üî Frontend
```python
# Backend env√≠a:
{
  "primer_apellido": "P√©rez",
  "nivel_actual": "B1"
}

// Frontend recibe y transforma:
{
  primerApellido: "P√©rez",
  nivelActual: "B1"
}
```

---

## üêõ PROBLEMAS ENCONTRADOS Y SOLUCIONES

### 1. Error 404 en OPTIONS (CORS)
**Problema:**
```
OPTIONS /api/auth/register HTTP/1.1" 404
Failed to fetch
```

**Causa:** 
- Falta configuraci√≥n de CORS en Flask
- M√©todo PATCH no incluido en headers permitidos

**Soluci√≥n:**
```python
from flask_cors import CORS

CORS(app, resources={
    r"/api/*": {
        "origins": ["http://localhost:3000"],
        "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True
    }
})

# Adem√°s, agregar manejo de preflight en cada blueprint:
@auth_bp.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        return "", 204
```

### 2. Inconsistencia en nombres de rutas
**Problema:**
- Backend: `/api/auth/registro`
- Frontend: `fetch('/api/auth/register')`

**Soluci√≥n:**
Estandarizar TODO a ingl√©s en el backend:
```python
# ‚ùå ANTES
@auth_bp.route("/registro", methods=["POST"])

# ‚úÖ AHORA
@auth_bp.route("/register", methods=["POST"])
```

### 3. ImportError: cannot import name 'Config'
**Problema:**
```python
ImportError: cannot import name 'Config' from 'config.settings'
```

**Causa:** 
El archivo `settings.py` no ten√≠a la clase `Config` definida.

**Soluci√≥n:**
```python
# config/settings.py
class Config:
    SQLALCHEMY_DATABASE_URI = "mysql+pymysql://..."
    SECRET_KEY = "..."
    MAIL_SERVER = "smtp.gmail.com"
    # ...
```

### 4. M√©todo PATCH bloqueado por CORS
**Problema:**
```
Method PATCH is not allowed by Access-Control-Allow-Methods in preflight response
```

**Soluci√≥n:**
Agregar expl√≠citamente `PATCH` en la lista de m√©todos permitidos:
```python
"methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
```

### 5. Usuario no se guarda despu√©s de verificar email
**Problema:**
El nivel del usuario no se actualizaba despu√©s de la asignaci√≥n.

**Causa:**
Faltaba el endpoint `PATCH /api/usuario/actualizar-nivel` con soporte CORS.

**Soluci√≥n:**
Implementar el endpoint y agregar manejo de OPTIONS en `usuario_routes.py`.

---

## üîå ENDPOINTS DEL BACKEND

### Autenticaci√≥n (`/api/auth/`)

| M√©todo | Endpoint | Descripci√≥n | Body |
|--------|----------|-------------|------|
| POST | `/login` | Iniciar sesi√≥n | `{correo, password}` |
| POST | `/register` | Registrar usuario | `{nombre, primer_apellido, segundo_apellido, correo, password, idioma, nivel_actual}` |
| POST | `/verificar-email` | Verificar c√≥digo | `{correo, codigo}` |
| POST | `/reenviar-codigo` | Reenviar c√≥digo de verificaci√≥n | `{correo}` |
| POST | `/recuperar-password` | Solicitar recuperaci√≥n | `{correo}` |
| POST | `/validar-token-recuperacion` | Validar token | `{token}` |
| POST | `/restablecer-password` | Cambiar contrase√±a | `{token, nueva_password}` |

### Gesti√≥n de Usuarios (`/api/usuario/`)

| M√©todo | Endpoint | Descripci√≥n | Body |
|--------|----------|-------------|------|
| GET | `/perfil/{usuario_id}` | Obtener perfil completo | - |
| PUT | `/perfil/{usuario_id}` | Actualizar perfil | `{nombre?, primer_apellido?, correo?}` |
| PATCH | `/actualizar-nivel` | Asignar nivel despu√©s del test | `{correo, nivel}` |
| PATCH | `/cambiar-curso` | Cambiar idioma de aprendizaje | `{usuario_id, idioma, nivel}` |
| POST | `/desactivar/{usuario_id}` | Desactivar cuenta | `{password, confirmacion}` |
| POST | `/reactivar/{usuario_id}` | Reactivar cuenta | `{password}` |
| DELETE | `/eliminar-permanente/{usuario_id}` | Eliminar definitivamente | - |

---

## üîÑ FLUJO DE REGISTRO COMPLETO

```mermaid
graph TD
    A[Usuario llena formulario] --> B[POST /api/auth/register]
    B --> C[C√≥digo de 6 d√≠gitos enviado por correo]
    C --> D[Usuario ingresa c√≥digo]
    D --> E[POST /api/auth/verificar-email]
    E --> F[Correo verificado ‚úì]
    F --> G[Redirige a /asignar-nivel]
    G --> H{¬øM√©todo de asignaci√≥n?}
    H -->|Evaluaci√≥n| I[Responde 10 preguntas]
    H -->|Manual| J[Selecciona nivel]
    I --> K[PATCH /api/usuario/actualizar-nivel]
    J --> K
    K --> L[Nivel asignado ‚úì]
    L --> M[Redirige a /dashboard]
```

### Datos Persistentes en localStorage

Durante el flujo de registro, se almacenan temporalmente:
```javascript
localStorage.setItem("correo", formData.correo)
localStorage.setItem("idioma", formData.idioma)
```

**Se eliminan despu√©s de completar la asignaci√≥n de nivel:**
```javascript
localStorage.removeItem("correo")
localStorage.removeItem("idioma")
```

---

## üåê CONFIGURACI√ìN CORS

### Backend (`app.py`)
```python
from flask_cors import CORS

CORS(app, resources={
    r"/api/*": {
        "origins": ["http://localhost:3000"],
        "methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True,
        "expose_headers": ["Content-Type", "Authorization"],
        "max_age": 3600
    }
})

# Refuerzo adicional con @app.after_request
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', 'http://localhost:3000')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,PATCH,OPTIONS')
    response.headers.add('Access-Control-Allow-Credentials', 'true')
    return response
```

### Blueprints (Manejo de OPTIONS)
```python
@auth_bp.before_request
def handle_preflight():
    if request.method == "OPTIONS":
        return "", 204
```

---

## üóÑÔ∏è MODELOS DE BASE DE DATOS

### Usuario
```python
class Usuario(db.Model):
    __tablename__ = 'usuarios'
    
    id = db.Column(db.Integer, primary_key=True)
    id_publico = db.Column(db.String(50), unique=True, nullable=False)
    nombre = db.Column(db.String(100), nullable=False)
    primer_apellido = db.Column(db.String(100), nullable=False)
    segundo_apellido = db.Column(db.String(100))
    correo = db.Column(db.String(255), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    rol = db.Column(db.String(50), default='estudiante')
    correo_verificado = db.Column(db.Boolean, default=False)
    codigo_verificacion = db.Column(db.String(10))
    expira_verificacion = db.Column(db.DateTime)
    token_recuperacion = db.Column(db.String(255))
    expira_token_recuperacion = db.Column(db.DateTime)
    estado_cuenta = db.Column(db.String(50), default='activo')
    fecha_desactivacion = db.Column(db.DateTime)
    creado_en = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relaci√≥n 1:1 con PerfilUsuario
    perfil = db.relationship('PerfilUsuario', backref='usuario', uselist=False)
```

### PerfilUsuario
```python
class PerfilUsuario(db.Model):
    __tablename__ = 'perfiles_usuarios'
    
    id = db.Column(db.Integer, primary_key=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), unique=True)
    id_publico = db.Column(db.String(50), nullable=False)
    nombre_completo = db.Column(db.String(255), nullable=False)
    idioma = db.Column(db.String(50), default='Ingl√©s')
    nivel_actual = db.Column(db.String(10), default='A1')
    curso_actual = db.Column(db.String(100))
    total_xp = db.Column(db.Integer, default=0)
    dias_racha = db.Column(db.Integer, default=0)
    ultima_actividad = db.Column(db.DateTime)
```

### Generaci√≥n de ID P√∫blico
Patr√≥n: `YY + IDIOMA + INICIALES + NIVEL`

Ejemplo:
```python
# Usuario: Juan P√©rez Mart√≠nez, Ingl√©s, A1
# Resultado: 25INGJPMA1

a√±o = "25"
idioma_codigo = "ING"
iniciales = "JPM"
nivel = "A1"
id_publico = "25INGJPMA1"
```

---

## üìß SERVICIOS DE CORREO

### Configuraci√≥n SMTP (Gmail)
```python
MAIL_SERVER = "smtp.gmail.com"
MAIL_PORT = 587
MAIL_USE_TLS = True
MAIL_USERNAME = "tu-correo@gmail.com"
MAIL_PASSWORD = "contrase√±a-de-aplicaci√≥n"  # No usar contrase√±a real
```

### Plantillas de Correo

#### Verificaci√≥n de Email
- Asunto: "Verifica tu cuenta en SpeakLexi"
- C√≥digo: 6 d√≠gitos
- Expiraci√≥n: 10 minutos
- Dise√±o: HTML con gradiente morado

#### Recuperaci√≥n de Contrase√±a
- Asunto: "Recuperaci√≥n de contrase√±a - SpeakLexi"
- Token: Enlace seguro con 32 bytes
- Expiraci√≥n: 1 hora
- Dise√±o: HTML con bot√≥n de acci√≥n

---

## üîê SEGURIDAD IMPLEMENTADA

### Contrase√±as
- Hash con `werkzeug.security.generate_password_hash`
- M√©todo: `pbkdf2:sha256`
- Validaci√≥n: M√≠nimo 8 caracteres

### Tokens
- Generaci√≥n: `secrets.token_urlsafe(32)`
- Longitud: 43 caracteres en base64
- Almacenamiento: Hash en base de datos
- Expiraci√≥n: 1 hora para recuperaci√≥n

### C√≥digos de Verificaci√≥n
- Generaci√≥n: `random.randint(100000, 999999)`
- Longitud: 6 d√≠gitos
- Expiraci√≥n: 10 minutos

### Validaciones
- Correo √∫nico en registro
- Estado de cuenta en login
- Verificaci√≥n de correo obligatoria
- Contrase√±a requerida para desactivaci√≥n/reactivaci√≥n

---

## ‚úÖ CHECKLIST DE IMPLEMENTACI√ìN

- [x] RF-1: Iniciar sesi√≥n
- [x] RF-2: Recuperar contrase√±a
- [x] RF-3: Autenticar usuario (verificaci√≥n de email)
- [x] RF-4: Registrar usuario
- [x] RF-5: Asignar nivel de usuario
- [x] RF-6: Cambiar curso (backend completo, frontend pendiente)
- [x] RF-7: Eliminar cuenta (soft-delete con per√≠odo de gracia)
- [x] Configuraci√≥n CORS completa
- [x] Manejo de errores estandarizado
- [x] Validaciones de seguridad
- [x] Documentaci√≥n de endpoints
- [x] Usuarios de prueba para testing

---

## üöÄ PR√ìXIMOS PASOS

### M√≥dulo 2: Gesti√≥n de Lecciones (Pendiente)
- RF-8: Ver lecciones disponibles
- RF-9: Realizar lecci√≥n
- RF-10: Guardar progreso
- RF-11: Sistema de XP y logros

### Mejoras Pendientes del M√≥dulo 1
1. **RF-6 Cambiar Curso (Frontend):**
   - Crear p√°gina `/cambiar-curso`
   - Componente de selecci√≥n de idioma
   - Confirmaci√≥n de reinicio de progreso
   
2. **Implementar JWT real:**
   - Reemplazar token fake
   - Middleware de autenticaci√≥n
   - Refresh tokens

3. **Mejoras de seguridad:**
   - Rate limiting para endpoints sensibles
   - Validaci√≥n de contrase√±as robustas
   - Logs de actividad sospechosa

4. **Testing:**
   - Unit tests para servicios
   - Integration tests para endpoints
   - E2E tests para flujos completos

---

## üìù NOTAS PARA DESARROLLADORES

### Para IAs/Asistentes que lean este documento:

1. **SIEMPRE usar nombres de rutas en ingl√©s** en el backend
2. **Verificar que CORS incluya PATCH** cuando se agreguen nuevas rutas
3. **Agregar `@bp.before_request` para OPTIONS** en cada nuevo blueprint
4. **Seguir el patr√≥n de nombres**: `primer_apellido` en backend, `primerApellido` en frontend
5. **No duplicar enlaces** en componentes (verificar page.tsx y form.tsx)
6. **Limpiar localStorage** despu√©s de completar flujos de registro
7. **Usar `estado_cuenta`** para soft-delete, no eliminar directamente

### Estructura de Respuestas del Backend
```python
# √âxito
return jsonify({
    "mensaje": "Operaci√≥n exitosa",
    "data": {...}
}), 200

# Error est√°ndar
return jsonify({
    "error": "Descripci√≥n del error"
}), 400

# Error con c√≥digo especial
return jsonify({
    "error": "Cuenta desactivada",
    "codigo": "CUENTA_DESACTIVADA",
    "dias_restantes": 15,
    "usuario_id": 123
}), 403
```

---

## üìû CONTACTO Y SOPORTE

**Desarrollador Principal:** sTr4yDev  
**Repositorio:** https://github.com/sTr4yDev/speakLexi  
**√öltima actualizaci√≥n:** Octubre 2025

---

**FIN DEL DOCUMENTO**